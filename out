#!/nix/store/345523198bcsdzay55pfiimkiajq6lq8-bash-interactive-5.2p37/bin/bash
file="${XDG_RUNTIME_DIR:-/tmp}/dmFyIF-ags.js"

cat <<EOF | base64 --decode > $file
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __knownSymbol = (name, symbol) => (symbol = Symbol[name]) ? symbol : Symbol.for("Symbol." + name);
var __typeError = (msg) => {
  throw TypeError(msg);
};
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __decoratorStart = (base) => [, , , __create(base?.[__knownSymbol("metadata")] ?? null)];
var __decoratorStrings = ["class", "method", "getter", "setter", "accessor", "field", "value", "get", "set"];
var __expectFn = (fn) => fn !== void 0 && typeof fn !== "function" ? __typeError("Function expected") : fn;
var __decoratorContext = (kind, name, done, metadata, fns) => ({ kind: __decoratorStrings[kind], name, metadata, addInitializer: (fn) => done._ ? __typeError("Already initialized") : fns.push(__expectFn(fn || null)) });
var __decoratorMetadata = (array, target) => __defNormalProp(target, __knownSymbol("metadata"), array[3]);
var __runInitializers = (array, flags, self, value) => {
  for (var i = 0, fns = array[flags >> 1], n = fns && fns.length; i < n; i++) flags & 1 ? fns[i].call(self) : value = fns[i].call(self, value);
  return value;
};
var __decorateElement = (array, flags, name, decorators, target, extra) => {
  var fn, it, done, ctx, access, k = flags & 7, s = !!(flags & 8), p = !!(flags & 16);
  var j = k > 3 ? array.length + 1 : k ? s ? 1 : 2 : 0, key = __decoratorStrings[k + 5];
  var initializers = k > 3 && (array[j - 1] = []), extraInitializers = array[j] || (array[j] = []);
  var desc = k && (!p && !s && (target = target.prototype), k < 5 && (k > 3 || !p) && __getOwnPropDesc(k < 4 ? target : { get [name]() {
    return __privateGet(this, extra);
  }, set [name](x) {
    return __privateSet(this, extra, x);
  } }, name));
  k ? p && k < 4 && __name(extra, (k > 2 ? "set " : k > 1 ? "get " : "") + name) : __name(target, name);
  for (var i = decorators.length - 1; i >= 0; i--) {
    ctx = __decoratorContext(k, name, done = {}, array[3], extraInitializers);
    if (k) {
      ctx.static = s, ctx.private = p, access = ctx.access = { has: p ? (x) => __privateIn(target, x) : (x) => name in x };
      if (k ^ 3) access.get = p ? (x) => (k ^ 1 ? __privateGet : __privateMethod)(x, target, k ^ 4 ? extra : desc.get) : (x) => x[name];
      if (k > 2) access.set = p ? (x, y) => __privateSet(x, target, y, k ^ 4 ? extra : desc.set) : (x, y) => x[name] = y;
    }
    it = (0, decorators[i])(k ? k < 4 ? p ? extra : desc[key] : k > 4 ? void 0 : { get: desc.get, set: desc.set } : target, ctx), done._ = 1;
    if (k ^ 4 || it === void 0) __expectFn(it) && (k > 4 ? initializers.unshift(it) : k ? p ? extra = it : desc[key] = it : target = it);
    else if (typeof it !== "object" || it === null) __typeError("Object expected");
    else __expectFn(fn = it.get) && (desc.get = fn), __expectFn(fn = it.set) && (desc.set = fn), __expectFn(fn = it.init) && initializers.unshift(fn);
  }
  return k || __decoratorMetadata(array, target), desc && __defProp(target, name, desc), p ? k ^ 4 ? extra : desc : target;
};
var __accessCheck = (obj, member, msg) => member.has(obj) || __typeError("Cannot " + msg);
var __privateIn = (member, obj) => Object(obj) !== obj ? __typeError('Cannot use the "in" operator on this value') : member.has(obj);
var __privateGet = (obj, member, getter) => (__accessCheck(obj, member, "read from private field"), getter ? getter.call(obj) : member.get(obj));
var __privateSet = (obj, member, value, setter) => (__accessCheck(obj, member, "write to private field"), setter ? setter.call(obj, value) : member.set(obj, value), value);
var __privateMethod = (obj, member, method) => (__accessCheck(obj, member, "access private method"), method);

// ../../../../../nix/store/ybmnrn9psssjab9md9mpvd7v8ybvjzcy-ags-js-lib-3.0.0/share/ags/js/gnim/src/jsx/jsx.ts
import GObject2 from "gi://GObject";

// ../../../../../nix/store/ybmnrn9psssjab9md9mpvd7v8ybvjzcy-ags-js-lib-3.0.0/share/ags/js/gnim/src/jsx/state.ts
import GObject from "gi://GObject";
import Gio from "gi://Gio";
import GLib from "gi://GLib";

// ../../../../../nix/store/ybmnrn9psssjab9md9mpvd7v8ybvjzcy-ags-js-lib-3.0.0/share/ags/js/gnim/src/util.ts
function kebabify(str) {
  return str.replace(/([a-z])([A-Z])/g, "$1-$2").replaceAll("_", "-").toLowerCase();
}
function snakeify(str) {
  return str.replace(/([a-z])([A-Z])/g, "$1-$2").replaceAll("-", "_").toLowerCase();
}
function set(obj, prop, value) {
  const key = snakeify(prop);
  const getter = `get_${key}`;
  const setter = `set_${key}`;
  let current;
  if (getter in obj && typeof obj[getter] === "function") {
    current = obj[getter]();
  } else {
    current = obj[prop];
  }
  if (current !== value) {
    if (setter in obj && typeof obj[setter] === "function") {
      ;
      obj[setter](value);
    } else {
      Object.assign(obj, { [prop]: value });
    }
  }
}

// ../../../../../nix/store/ybmnrn9psssjab9md9mpvd7v8ybvjzcy-ags-js-lib-3.0.0/share/ags/js/gnim/src/jsx/state.ts
var Accessor = class _Accessor extends Function {
  static {
    this.$gtype = GObject.TYPE_JSOBJECT;
  }
  #get;
  #subscribe;
  constructor(get, subscribe) {
    super("return arguments.callee._call.apply(arguments.callee, arguments)");
    this.#subscribe = subscribe ?? (() => () => void 0);
    this.#get = get;
  }
  /**
   * Subscribe for value changes.
   * @param callback The function to run when the current value changes.
   * @returns Unsubscribe function.
   */
  subscribe(callback) {
    return this.#subscribe(callback);
  }
  /**
   * @returns The current value.
   */
  get() {
    _Accessor.evaluating?.add(this);
    return this.#get();
  }
  /**
   * Create a new `Accessor` that applies a transformation on its value.
   * @param transform The transformation to apply. Should be a pure function.
   */
  as(transform) {
    return new _Accessor(() => transform(this.#get()), this.#subscribe);
  }
  _call(transform) {
    return this.as(transform);
  }
  toString() {
    return `Accessor<${this.get()}>`;
  }
  [Symbol.toPrimitive]() {
    console.warn("Accessor implicitly converted to a primitive value.");
    return this.toString();
  }
};
function createState(init) {
  let currentValue = init;
  const subscribers = /* @__PURE__ */ new Set();
  const subscribe = (callback) => {
    subscribers.add(callback);
    return () => subscribers.delete(callback);
  };
  const set2 = (newValue) => {
    const value = typeof newValue === "function" ? newValue(currentValue) : newValue;
    if (currentValue !== value) {
      currentValue = value;
      subscribers.forEach((cb) => cb());
    }
  };
  return [new Accessor(() => currentValue, subscribe), set2];
}
function createComputed(deps, transform) {
  let dispose;
  const subscribers = /* @__PURE__ */ new Set();
  const cache = new Array(deps.length);
  const subscribe = (callback) => {
    if (subscribers.size === 0) {
      dispose = deps.map(
        (dep, i) => dep.subscribe(() => {
          const value = dep.get();
          if (cache[i] !== value) {
            cache[i] = dep.get();
            subscribers.forEach((cb) => cb());
          }
        })
      );
    }
    subscribers.add(callback);
    return () => {
      subscribers.delete(callback);
      if (subscribers.size === 0) {
        dispose.map((cb) => cb());
        dispose.length = 0;
        cache.length = 0;
      }
    };
  };
  const get = () => {
    const args = deps.map((dep, i) => {
      if (!cache[i]) {
        cache[i] = dep.get();
      }
      return cache[i];
    });
    return transform ? transform(...args) : args;
  };
  return new Accessor(get, subscribe);
}
function createBinding(object, key) {
  const prop = kebabify(key);
  const subscribe = (callback) => {
    const sig = object instanceof Gio.Settings ? "changed" : "notify";
    const id = object.connect(`${sig}::${prop}`, () => callback());
    return () => object.disconnect(id);
  };
  const get = () => {
    if (object instanceof Gio.Settings) {
      return object.get_value(key).recursiveUnpack();
    } else {
      const getter = `get_${prop.replaceAll("-", "_")}`;
      if (getter in object && typeof object[getter] === "function") {
        return object[getter]();
      }
      if (prop in object) return object[prop];
      if (key in object) return object[key];
      throw Error(`cannot get property ${key}`);
    }
  };
  return new Accessor(get, subscribe);
}

// ../../../../../nix/store/ybmnrn9psssjab9md9mpvd7v8ybvjzcy-ags-js-lib-3.0.0/share/ags/js/gnim/src/jsx/env.ts
function configue(conf) {
  return Object.assign(env, conf);
}
function missingImpl() {
  throw Error("missing impl");
}
var env = {
  intrinsicElements: {},
  addChild: missingImpl,
  setCss: missingImpl,
  setClass: missingImpl,
  initProps: () => void 0,
  defaultCleanup: () => void 0
};

// ../../../../../nix/store/ybmnrn9psssjab9md9mpvd7v8ybvjzcy-ags-js-lib-3.0.0/share/ags/js/gnim/src/jsx/scope.ts
var Scope = class _Scope {
  constructor(parent) {
    this.contexts = /* @__PURE__ */ new Map();
    this.cleanups = /* @__PURE__ */ new Set();
    this.mounts = /* @__PURE__ */ new Set();
    this.mounted = false;
    this.parent = parent;
  }
  onCleanup(callback) {
    this.cleanups?.add(callback);
  }
  onMount(callback) {
    if (this.parent && !this.parent.mounted) {
      this.parent.onMount(callback);
    } else {
      this.mounts.add(callback);
    }
  }
  run(fn) {
    const prev = _Scope.current;
    _Scope.current = this;
    try {
      return fn();
    } finally {
      this.mounts.forEach((cb) => cb());
      this.mounts.clear();
      this.mounted = true;
      _Scope.current = prev;
    }
  }
  dispose() {
    this.cleanups.forEach((cb) => cb());
    this.cleanups.clear();
    this.contexts.clear();
    delete this.parent;
  }
};
function getScope() {
  const scope = Scope.current;
  if (!scope) {
    throw Error("cannot get scope: out of tracking context");
  }
  return scope;
}
function onCleanup(cleanup) {
  if (!Scope.current) {
    console.error(Error("out of tracking context: will not be able to cleanup"));
  }
  Scope.current?.onCleanup(cleanup);
}
function createRoot(fn) {
  const scope = new Scope(null);
  return scope.run(() => fn(() => scope.dispose()));
}

// ../../../../../nix/store/ybmnrn9psssjab9md9mpvd7v8ybvjzcy-ags-js-lib-3.0.0/share/ags/js/gnim/src/jsx/jsx.ts
var gtkType = Symbol("gtk builder type");
function getType(object) {
  return gtkType in object ? object[gtkType] : null;
}
function isGObjectCtor(ctor) {
  return ctor.prototype instanceof GObject2.Object;
}
function isFunctionCtor(ctor) {
  return typeof ctor === "function" && !isGObjectCtor(ctor);
}
function setType(object, type) {
  if (gtkType in object && object[gtkType] !== "") {
    console.warn(`type overriden from ${object[gtkType]} to ${type} on ${object}`);
  }
  Object.assign(object, { [gtkType]: type });
}
function jsx(ctor, inprops, key) {
  const { $, $type, $constructor, children = [], ...rest } = inprops;
  const props = rest;
  if (key) Object.assign(props, { key });
  env.initProps(props);
  for (const [key2, value] of Object.entries(props)) {
    if (value === void 0) delete props[key2];
  }
  if (typeof ctor === "string") {
    if (ctor in env.intrinsicElements) {
      ctor = env.intrinsicElements[ctor];
    } else {
      throw Error(`unknown intrinsic element "${ctor}"`);
    }
  }
  if (isFunctionCtor(ctor)) {
    const object2 = ctor({ children, ...props });
    if ($type) setType(object2, $type);
    $?.(object2);
    return object2;
  }
  const { css, class: className } = props;
  delete props.css;
  delete props.class;
  const signals = [];
  const bindings = [];
  for (const [key2, value] of Object.entries(props)) {
    if (key2.startsWith("on")) {
      signals.push([key2.slice(2), value]);
      delete props[key2];
    }
    if (value instanceof Accessor) {
      bindings.push([key2, value]);
      props[key2] = value.get();
    }
  }
  const object = $constructor ? $constructor(props) : new ctor(props);
  if ($constructor) Object.assign(object, props);
  if ($type) setType(object, $type);
  if (css) env.setCss(object, css);
  if (className) env.setClass(object, className);
  for (const child of Array.isArray(children) ? children : [children]) {
    if (child === true) {
      console.warn("Trying to add boolean value of `true` as a child.");
      continue;
    }
    if (Array.isArray(child)) {
      for (const ch of child) {
        env.addChild(object, ch, -1);
      }
    } else if (child) {
      env.addChild(object, child, -1);
    }
  }
  const disposeHandlers = signals.map(([sig, handler]) => {
    const name = kebabify(sig);
    const id = name.startsWith("notify-") ? object.connect(`notify::${name.slice(7)}`, handler) : object.connect(kebabify(sig), handler);
    return () => object.disconnect(id);
  });
  const disposeBindings = bindings.map(([prop, binding]) => {
    const dispose = binding.subscribe(() => {
      set(object, prop, binding.get());
    });
    set(object, prop, binding.get());
    return dispose;
  });
  if (disposeBindings.length > 0 || disposeHandlers.length > 0) {
    onCleanup(() => {
      disposeHandlers.forEach((cb) => cb());
      disposeBindings.forEach((cb) => cb());
    });
  }
  $?.(object);
  return object;
}
var jsxs = jsx;

// ../../../../../nix/store/ybmnrn9psssjab9md9mpvd7v8ybvjzcy-ags-js-lib-3.0.0/share/ags/js/gnim/src/jsx/Fragment.ts
import GObject3 from "gi://GObject";

// ../../../../../nix/store/ybmnrn9psssjab9md9mpvd7v8ybvjzcy-ags-js-lib-3.0.0/share/ags/js/gnim/src/gnome/signalTracker.ts
var mod = import("resource:///org/gnome/shell/misc/signalTracker.js");
var registerDestroyableType = await mod.then((mod2) => mod2.registerDestroyableType).catch(() => () => void 0);

// ../../../../../nix/store/ybmnrn9psssjab9md9mpvd7v8ybvjzcy-ags-js-lib-3.0.0/share/ags/js/gnim/src/jsx/Fragment.ts
var _a, _b, _c;
var Fragment = class _Fragment extends (_c = GObject3.Object, _b = GObject3.signals, _a = GObject3.properties, _c) {
  constructor({ children = [] } = {}) {
    super();
    this.connectionIds = /* @__PURE__ */ new Set();
    this._children = Array.isArray(children) ? children : [children];
  }
  static {
    this[_b] = {
      "destroy": {},
      "child-added": {
        param_types: [GObject3.TYPE_OBJECT, GObject3.TYPE_UINT]
      },
      "child-removed": {
        param_types: [GObject3.TYPE_OBJECT, GObject3.TYPE_UINT]
      }
    };
  }
  static {
    this[_a] = {
      children: GObject3.ParamSpec.jsobject("children", "", "", GObject3.ParamFlags.READABLE)
    };
  }
  static {
    GObject3.registerClass(this);
    registerDestroyableType(this);
  }
  static new(children = []) {
    return new _Fragment({ children });
  }
  get children() {
    return [...this._children];
  }
  addChild(child, index = -1) {
    if (child instanceof _Fragment) {
      throw Error(`nesting Fragments are not yet supported`);
    }
    if (index > 0) {
      this._children = [
        ...this._children.slice(0, index),
        child,
        ...this._children.slice(index)
      ];
    } else {
      this._children.push(child);
      index = this._children.length - 1;
    }
    this.emit("child-added", child, index);
    this.notify("children");
  }
  hasChild(child) {
    return this._children.findIndex((ch) => ch === child) > -1;
  }
  removeChild(child) {
    const index = this._children.findIndex((i) => i === child);
    this._children.splice(index, 1);
    this.emit("child-removed", child, index);
    this.notify("children");
  }
  connect(signal, callback) {
    const id = super.connect(signal, callback);
    this.connectionIds.add(id);
    return id;
  }
  disconnect(id) {
    super.disconnect(id);
    this.connectionIds.delete(id);
  }
  destroy() {
    this.emit("destroy");
    for (const id of this.connectionIds.values()) {
      super.disconnect(id);
    }
  }
};

// ../../../../../nix/store/ybmnrn9psssjab9md9mpvd7v8ybvjzcy-ags-js-lib-3.0.0/share/ags/js/gnim/src/jsx/For.ts
function For({
  each,
  children: mkChild,
  cleanup,
  id = (item) => item
}) {
  const currentScope = getScope();
  const map = /* @__PURE__ */ new Map();
  const fragment = new Fragment();
  function remove2({ item, child, index: [index], scope }) {
    if (typeof cleanup === "function") {
      cleanup(child, item, index.get());
    } else if (cleanup !== null) {
      env.defaultCleanup(child);
    }
    scope.dispose();
  }
  function callback(itareable) {
    const items = [...itareable];
    const ids = items.map(id);
    const idSet = new Set(ids);
    for (const [key, value] of map.entries()) {
      fragment.removeChild(value.child);
      if (!idSet.has(key)) {
        remove2(value);
        map.delete(key);
      }
    }
    items.map((item, i) => {
      const key = ids[i];
      if (map.has(key)) {
        const {
          index: [, setIndex],
          child
        } = map.get(key);
        setIndex(i);
        if (fragment.hasChild(child)) {
          console.warn(`duplicate keys found: ${key}`);
        } else {
          fragment.addChild(child);
        }
      } else {
        const [index, setIndex] = createState(i);
        const scope = new Scope(currentScope);
        const child = scope.run(() => mkChild(item, index));
        map.set(key, { item, child, index: [index, setIndex], scope });
        fragment.addChild(child);
      }
    });
  }
  const dispose = each.subscribe(() => {
    callback(each.get());
  });
  callback(each.get());
  onCleanup(() => {
    dispose();
    for (const value of map.values()) {
      remove2(value);
    }
    map.clear();
  });
  return fragment;
}

// ../../../../../nix/store/ybmnrn9psssjab9md9mpvd7v8ybvjzcy-ags-js-lib-3.0.0/share/ags/js/gnim/src/jsx/With.ts
function With({
  value,
  children: mkChild,
  cleanup
}) {
  const currentScope = getScope();
  const fragment = new Fragment();
  let scope;
  function callback(v) {
    for (const child of fragment.children) {
      fragment.removeChild(child);
      if (typeof cleanup === "function") {
        cleanup(child);
      } else if (cleanup !== null) {
        env.defaultCleanup(child);
      }
      if (scope) scope.dispose();
    }
    scope = new Scope(currentScope);
    const ch = scope.run(() => mkChild(v));
    if (ch !== "" && ch !== false && ch !== null && ch !== void 0) {
      fragment.addChild(ch);
    }
  }
  const dispose = value.subscribe(() => {
    callback(value.get());
  });
  callback(value.get());
  onCleanup(() => {
    scope.dispose();
    dispose();
  });
  return fragment;
}

// ../../../../../nix/store/ybmnrn9psssjab9md9mpvd7v8ybvjzcy-ags-js-lib-3.0.0/share/ags/js/src/process.ts
import AstalIO from "gi://AstalIO";
var Process = AstalIO.Process;
function exec(cmd) {
  return Array.isArray(cmd) ? AstalIO.Process.execv(cmd) : AstalIO.Process.exec(cmd);
}
function execAsync(cmd) {
  return new Promise((resolve, reject) => {
    if (Array.isArray(cmd)) {
      AstalIO.Process.exec_asyncv(cmd, (_, res) => {
        try {
          resolve(AstalIO.Process.exec_asyncv_finish(res));
        } catch (error) {
          reject(error);
        }
      });
    } else {
      AstalIO.Process.exec_async(cmd, (_, res) => {
        try {
          resolve(AstalIO.Process.exec_finish(res));
        } catch (error) {
          reject(error);
        }
      });
    }
  });
}

// ../../../../../nix/store/ybmnrn9psssjab9md9mpvd7v8ybvjzcy-ags-js-lib-3.0.0/share/ags/js/src/gtk4/index.ts
import Astal from "gi://Astal?version=4.0";
import Gtk from "gi://Gtk?version=4.0";
import Gdk from "gi://Gdk?version=4.0";

// ../../../../../nix/store/ybmnrn9psssjab9md9mpvd7v8ybvjzcy-ags-js-lib-3.0.0/share/ags/js/src/gtk4/jsx-runtime.ts
import Gtk3 from "gi://Gtk?version=4.0";
import Astal2 from "gi://Astal?version=4.0";

// ../../../../../nix/store/ybmnrn9psssjab9md9mpvd7v8ybvjzcy-ags-js-lib-3.0.0/share/ags/js/gnim/src/gtk4/jsx-runtime.ts
import Gtk2 from "gi://Gtk?version=4.0";
import Gio2 from "gi://Gio?version=2.0";
import GObject4 from "gi://GObject";
var dummyBuilder = new Gtk2.Builder();
function add(parent, child, _) {
  if (!specialAdd(parent, child, _)) {
    parent.vfunc_add_child(dummyBuilder, child, getType(child));
  }
}
function specialRemove(_parent, _child) {
  return false;
}
function specialAdd(parent, child, _) {
  if (child instanceof Gtk2.Adjustment && "set_adjustment" in parent && typeof parent.set_adjustment === "function") {
    parent.set_adjustment(child);
    return true;
  }
  if (child instanceof Gtk2.Widget && parent instanceof Gtk2.Stack && child.name !== "" && child.name !== null && getType(child) === "named") {
    parent.add_named(child, child.name);
    return true;
  }
  if (child instanceof Gtk2.Popover && parent instanceof Gtk2.MenuButton) {
    parent.set_popover(child);
    return true;
  }
  if (child instanceof Gio2.MenuModel && (parent instanceof Gtk2.MenuButton || parent instanceof Gtk2.PopoverMenu)) {
    parent.set_menu_model(child);
    return true;
  }
  if (child instanceof Gio2.MenuItem && parent instanceof Gio2.Menu) {
  }
  if (child instanceof Gtk2.Window && parent instanceof Gtk2.Application) {
    parent.add_window(child);
    return true;
  }
  if (child instanceof Gtk2.TextBuffer && parent instanceof Gtk2.TextView) {
    parent.set_buffer(child);
    return true;
  }
  return false;
}
function remove(parent, child) {
  if (specialRemove(parent, child)) return;
  if ("set_child" in parent && typeof parent.set_child == "function") {
    return parent.set_child(null);
  }
  if ("remove" in parent && typeof parent.remove == "function") {
    return parent.remove(child);
  }
  throw Error(`cannot remove ${child} from ${parent}`);
}
var { addChild, intrinsicElements } = configue({
  setCss(object, css) {
    if (!(object instanceof Gtk2.Widget)) {
      return console.warn(Error(`cannot set css on ${object}`));
    }
    const ctx = object.get_style_context();
    let provider;
    const setter = (css2) => {
      if (!css2.includes("{") || !css2.includes("}")) {
        css2 = `* { ${css2} }`;
      }
      if (provider) ctx.remove_provider(provider);
      provider = new Gtk2.CssProvider();
      provider.load_from_string(css2);
      ctx.add_provider(provider, Gtk2.STYLE_PROVIDER_PRIORITY_USER);
    };
    if (css instanceof Accessor) {
      setter(css.get());
      const dispose = css.subscribe(() => setter(css.get()));
      onCleanup(dispose);
    } else {
      setter(css);
    }
  },
  setClass(object, className) {
    if (!(object instanceof Gtk2.Widget)) {
      return console.warn(Error(`cannot set className on ${object}`));
    }
    if (className instanceof Accessor) {
      object.cssClasses = className.get().split(/\s+/);
      const dispose = className.subscribe(
        () => object.cssClasses = className.get().split(/\s+/)
      );
      onCleanup(dispose);
    } else {
      object.set_css_classes(className.split(/\s+/));
    }
  },
  addChild(parent, child, index = -1) {
    if (!(child instanceof GObject4.Object)) {
      child = Gtk2.Label.new(String(child));
    }
    if (specialAdd(parent, child, index)) return;
    if (parent instanceof Fragment) {
      parent.addChild(child);
      return;
    }
    if (parent instanceof Gtk2.Buildable) {
      if (child instanceof Fragment) {
        for (const ch of child.children) {
          add(parent, ch, index);
        }
        child.connect("child-added", (_, ch, index2) => {
          if (!(ch instanceof GObject4.Object)) {
            console.error(TypeError(`cannot add ${ch} to ${parent}`));
            return;
          }
          addChild(parent, ch, index2);
        });
        child.connect("child-removed", (_, ch) => {
          if (!(ch instanceof GObject4.Object)) {
            console.error(TypeError(`cannot remove ${ch} from ${parent}`));
            return;
          }
          remove(parent, ch);
        });
        onCleanup(() => child.destroy());
        return;
      }
      add(parent, child, index);
      return;
    }
    throw Error(`cannot add ${child} to ${parent}`);
  }
});

// ../../../../../nix/store/ybmnrn9psssjab9md9mpvd7v8ybvjzcy-ags-js-lib-3.0.0/share/ags/js/src/gtk4/jsx-runtime.ts
Object.assign(intrinsicElements, {
  box: Gtk3.Box,
  button: Gtk3.Button,
  centerbox: Gtk3.CenterBox,
  // circularprogress: Astal.CircularProgress,
  drawingarea: Gtk3.DrawingArea,
  entry: Gtk3.Entry,
  image: Gtk3.Image,
  label: Gtk3.Label,
  levelbar: Gtk3.LevelBar,
  menubutton: Gtk3.MenuButton,
  overlay: Gtk3.Overlay,
  popover: Gtk3.Popover,
  revealer: Gtk3.Revealer,
  scrolledwindow: Gtk3.ScrolledWindow,
  slider: Astal2.Slider,
  stack: Gtk3.Stack,
  switch: Gtk3.Switch,
  togglebutton: Gtk3.ToggleButton,
  window: Astal2.Window
});

// launcher/modes/calculator/Calculator.tsx
function CalculatorMode({
  close,
  searchValue,
  emptySearch,
  enterPressed,
  pressedKey,
  visible,
  closed
}) {
  const [result, setResult] = createState(null);
  const [history, setHistory] = createState([]);
  closed.subscribe(() => {
    if (!closed.get() || !visible.get()) return;
    setHistory([]);
    setResult(null);
    close();
  });
  enterPressed.subscribe(() => {
    if (!enterPressed.get() || !visible.get()) return;
    const res = result.get();
    const historyData = history.get();
    if (!res || historyData[0] === res) return emptySearch();
    setHistory((prev) => [res, ...prev]);
    emptySearch();
    setResult(null);
  });
  pressedKey.subscribe(() => {
    if (!visible.get()) return;
    const keyData = pressedKey.get();
    if (!keyData) return;
    if (keyData.keyval === Gdk.KEY_Escape) {
      setHistory([]);
      setResult(null);
      close();
      return;
    }
  });
  visible.subscribe(() => {
    if (visible.get()) execAsync("qalc -e '0 - 0'");
  });
  searchValue.subscribe(() => {
    if (!visible.get()) return;
    const value = searchValue.get();
    if (!value) return;
    let res = "Invalid Input";
    try {
      res = exec(`qalc ${value}`);
    } catch (_e) {
    }
    setResult(res.trim());
  });
  return /* @__PURE__ */ jsxs(
    "box",
    {
      orientation: Gtk.Orientation.VERTICAL,
      visible,
      class: "calculator-container",
      children: [
        /* @__PURE__ */ jsx(
          "label",
          {
            label: result((res) => res || ""),
            halign: Gtk.Align.START,
            class: "calculator-result"
          }
        ),
        /* @__PURE__ */ jsx(Gtk.Separator, { visible: true, class: "calculator-separator" }),
        /* @__PURE__ */ jsx(For, { each: history, children: (historyEntry) => /* @__PURE__ */ jsx("label", { halign: Gtk.Align.START, label: historyEntry }) })
      ]
    }
  );
}

// constants/config.ts
import GLib2 from "gi://GLib";
var HOME = GLib2.getenv("HOME");
var animationTypes = [
  "CROSSFADE",
  "NONE",
  "SLIDE_DOWN",
  "SLIDE_LEFT",
  "SLIDE_RIGHT",
  "SLIDE_UP",
  "SWING_DOWN",
  "SWING_LEFT",
  "SWING_RIGHT",
  "SWING_UP"
];
var configFolder = `${HOME}/.config/stef-shell`;
var configFilePath = `${configFolder}/config.json`;
var defaultConfig = {
  paths: {
    musixmatchToken: "/tmp/musixmatch_token.json",
    backlightBaseDir: "/sys/class/backlight",
    // requires restart to apply changes
    saveFolder: `${HOME}/Music/spotifyData`,
    lyricsFolder: `${configFolder}/lyrics`
  },
  volumeStep: {
    media: 0.05,
    // 5%
    microphone: 0.05,
    // 5%
    speaker: 0.05
    // 5%
  },
  animationsDuration: {
    notification: 500,
    // 0.5 seconds
    launcher: 300,
    // 0.3 seconds
    notificationCenter: 500,
    // 0.5 seconds
    osd: 300,
    // 0.3 seconds
    sessionMenu: 300
    // 0.3 seconds
  },
  animationsType: {
    notification: "SLIDE_LEFT",
    launcher: "CROSSFADE",
    notificationCenter: "SLIDE_LEFT",
    osd: "CROSSFADE",
    sessionMenu: "CROSSFADE"
  },
  timeouts: {
    osd: 3e3,
    // 3 seconds
    defaultNotificationExpire: 5e3
    // 5 seconds
  },
  sessionMenu: {
    buttonWidth: 120,
    // in px
    buttonHeight: 120,
    // in px
    buttonGap: 50
    // in px
  },
  mediaMaxLength: 25,
  systemStatsUpdateInterval: 1e3
};

// ../../../../../nix/store/ybmnrn9psssjab9md9mpvd7v8ybvjzcy-ags-js-lib-3.0.0/share/ags/js/src/file.ts
import Astal3 from "gi://AstalIO";
function readFile(path) {
  return Astal3.read_file(path) || "";
}
function readFileAsync(path) {
  return new Promise((resolve, reject) => {
    Astal3.read_file_async(path, (_, res) => {
      try {
        resolve(Astal3.read_file_finish(res) || "");
      } catch (error) {
        reject(error);
      }
    });
  });
}
function writeFile(path, content) {
  Astal3.write_file(path, content);
}
function monitorFile(path, callback) {
  return Astal3.monitor_file(path, (file, event) => {
    callback(file, event);
  });
}

// util/file.ts
import GLib3 from "gi://GLib";
function fileExists(path, dir = false) {
  if (dir)
    return GLib3.file_test(
      path,
      GLib3.FileTest.EXISTS | GLib3.FileTest.IS_DIR
    );
  return GLib3.file_test(path, GLib3.FileTest.EXISTS);
}

// util/config.ts
import Gio3 from "gi://Gio";
var [config, setConfig] = createState(defaultConfig);
if (fileExists(configFilePath)) {
  updateConfig();
}
monitorFile(configFilePath, (_, event) => {
  if (event === Gio3.FileMonitorEvent.CHANGED) {
    console.log("Config file changed, updating config");
    updateConfig();
  }
  if (event === Gio3.FileMonitorEvent.DELETED) {
    console.warn("Config file deleted, restoring default config");
    setConfig(defaultConfig);
  }
  if (event === Gio3.FileMonitorEvent.CREATED) {
    console.log("Config file created, updating config");
    updateConfig();
  }
});
function updateConfig() {
  const data = readFile(configFilePath);
  try {
    const configData = JSON.parse(data);
    if (!validateConfig(configData)) return;
    setConfig(configData);
  } catch (e) {
    console.error("Failed to read the config file\nError:", e);
  }
}
function validateConfig(config2) {
  if (config2.paths?.musixmatchToken && (!config2.paths?.musixmatchToken.startsWith("/") || !config2.paths.musixmatchToken.endsWith(".json"))) {
    console.error(
      "Invalid `paths.musixmatchTokenPath` (must be an absolute path to a JSON file):",
      config2.paths?.musixmatchToken
    );
    return false;
  }
  if (config2.paths?.backlightBaseDir && (!config2.paths.backlightBaseDir.startsWith("/") || !fileExists(config2.paths.backlightBaseDir, true))) {
    console.error(
      "Invalid `paths.backlightBaseDir` (must be an absolute path to backlight base folder):",
      config2.paths.backlightBaseDir
    );
    return false;
  }
  if (config2.paths?.saveFolder && !config2.paths.saveFolder.startsWith("/")) {
    console.error(
      "Invalid `paths.saveFolder` (must be an absolute path to save folder):",
      config2.paths.saveFolder
    );
    return false;
  }
  if (config2.volumeStep?.media && (config2.volumeStep.media < 0 || config2.volumeStep.media > 1)) {
    console.error(
      "Invalid `volumeStep.media` (must be between 0 and 1):",
      config2.volumeStep.media
    );
    return false;
  }
  if (config2.volumeStep?.microphone && (config2.volumeStep.microphone < 0 || config2.volumeStep.microphone > 1)) {
    console.error(
      "Invalid `volumeStep.microphone` (must be between 0 and 1):",
      config2.volumeStep.microphone
    );
    return false;
  }
  if (config2.volumeStep?.speaker && (config2.volumeStep.speaker < 0 || config2.volumeStep.speaker > 1)) {
    console.error(
      "Invalid `volumeStep.speaker` (must be between 0 and 1):",
      config2.volumeStep.speaker
    );
    return false;
  }
  if (config2.animationsDuration?.notification && config2.animationsDuration.notification < 0) {
    console.error(
      "Invalid `animationsDuration.notification` (must be greater or equal to 0):",
      config2.animationsDuration.notification
    );
    return false;
  }
  if (config2.animationsDuration?.launcher && config2.animationsDuration.launcher < 0) {
    console.error(
      "Invalid `animationsDuration.launcher` (must be greater or equal to 0):",
      config2.animationsDuration.launcher
    );
    return false;
  }
  if (config2.animationsDuration?.notificationCenter && config2.animationsDuration.notificationCenter < 0) {
    console.error(
      "Invalid `animationsDuration.notificationCenter` (must be greater or equal to 0):",
      config2.animationsDuration.notificationCenter
    );
    return false;
  }
  if (config2.animationsDuration?.osd && config2.animationsDuration.osd < 0) {
    console.error(
      "Invalid `animationsDuration.osd` (must be greater or equal to 0):",
      config2.animationsDuration.osd
    );
    return false;
  }
  if (config2.animationsDuration?.sessionMenu && config2.animationsDuration.sessionMenu < 0) {
    console.error(
      "Invalid `animationsDuration.sessionMenu` (must be greater or equal to 0):",
      config2.animationsDuration.sessionMenu
    );
    return false;
  }
  if (config2.animationsType?.notification && !animationTypes.includes(config2.animationsType.notification)) {
    console.error(
      `Invalid \`animationsType.notification\` (must be one of ${animationTypes.map((type) => `"${type}"`).join(", ")}):`,
      config2.animationsType.notification
    );
    return false;
  }
  if (config2.animationsType?.launcher && !animationTypes.includes(config2.animationsType.launcher)) {
    console.error(
      `Invalid \`animationsType.launcher\` (must be one of ${animationTypes.map((type) => `"${type}"`).join(", ")}):`,
      config2.animationsType.launcher
    );
    return false;
  }
  if (config2.animationsType?.notificationCenter && !animationTypes.includes(config2.animationsType.notificationCenter)) {
    console.error(
      `Invalid \`animationsType.notificationCenter\` (must be one of ${animationTypes.map((type) => `"${type}"`).join(", ")}):`,
      config2.animationsType.notificationCenter
    );
    return false;
  }
  if (config2.animationsType?.osd && !animationTypes.includes(config2.animationsType.osd)) {
    console.error(
      `Invalid \`animationsType.osd\` (must be one of ${animationTypes.map((type) => `"${type}"`).join(", ")}):`,
      config2.animationsType.osd
    );
    return false;
  }
  if (config2.animationsType?.sessionMenu && !animationTypes.includes(config2.animationsType.sessionMenu)) {
    console.error(
      `Invalid \`animationsType.sessionMenu\` (must be one of ${animationTypes.map((type) => `"${type}"`).join(", ")}):`,
      config2.animationsType.sessionMenu
    );
    return false;
  }
  if (config2.timeouts?.osd && config2.timeouts.osd < 0) {
    console.error(
      "Invalid `timeouts.osd` (must be greater or equal to 0):",
      config2.timeouts.osd
    );
    return false;
  }
  if (config2.timeouts?.defaultNotificationExpire && config2.timeouts.defaultNotificationExpire < 0) {
    console.error(
      "Invalid `timeouts.defaultNotificationExpire` (must be greater or equal to 0):",
      config2.timeouts.defaultNotificationExpire
    );
    return false;
  }
  if (typeof config2.sessionMenu?.buttonWidth === "number" && config2.sessionMenu.buttonWidth <= 0) {
    console.error(
      "Invalid `sessionMenu.buttonWidth` (must be greater than 0):",
      config2.sessionMenu.buttonWidth
    );
    return false;
  }
  if (typeof config2.sessionMenu?.buttonHeight === "number" && config2.sessionMenu.buttonHeight <= 0) {
    console.error(
      "Invalid `sessionMenu.buttonHeight` (must be greater than 0):",
      config2.sessionMenu.buttonHeight
    );
    return false;
  }
  if (typeof config2.sessionMenu?.buttonGap === "number" && config2.sessionMenu.buttonGap <= 0) {
    console.error(
      "Invalid `sessionMenu.buttonGap` (must be greater than 0):",
      config2.sessionMenu.buttonGap
    );
    return false;
  }
  if (config2.mediaMaxLength && config2.mediaMaxLength <= 0) {
    console.error(
      "Invalid `mediaMaxLength` (must be greater than 0):",
      config2.mediaMaxLength
    );
    return false;
  }
  if (config2.systemStatsUpdateInterval && config2.systemStatsUpdateInterval < 100) {
    console.error(
      "Invalid `systemStatsUpdateInterval` (must be greater or equal to 100):",
      config2.systemStatsUpdateInterval
    );
    return false;
  }
  return true;
}

// util/icons.ts
function isIcon(icon) {
  const iconTheme = Gtk.IconTheme.get_for_display(Gdk.Display.get_default());
  return icon && iconTheme.has_icon(icon);
}

// launcher/modes/app/components/App.tsx
function App({ app, focused, onOpen }) {
  function handleLeftClick() {
    onOpen();
  }
  return /* @__PURE__ */ jsxs(
    "box",
    {
      orientation: Gtk.Orientation.HORIZONTAL,
      class: focused(
        (isFocused) => isFocused ? "app-container focus" : "app-container"
      ),
      cursor: Gdk.Cursor.new_from_name("pointer", null),
      children: [
        /* @__PURE__ */ jsx(
          Gtk.GestureClick,
          {
            button: Gdk.BUTTON_PRIMARY,
            onPressed: handleLeftClick
          }
        ),
        (app.iconName || isIcon(app.entry)) && /* @__PURE__ */ jsx(
          "image",
          {
            class: "app-icon",
            visible: Boolean(app.iconName || app.entry),
            iconName: app.iconName || app.entry,
            pixelSize: 36
          }
        ),
        /* @__PURE__ */ jsxs(
          "box",
          {
            orientation: Gtk.Orientation.VERTICAL,
            class: "app-details",
            valign: Gtk.Align.CENTER,
            children: [
              /* @__PURE__ */ jsx(
                "label",
                {
                  label: app.name,
                  class: "app-name",
                  halign: Gtk.Align.START
                }
              ),
              app.description && /* @__PURE__ */ jsx(
                "label",
                {
                  label: app.description,
                  class: "app-description",
                  halign: Gtk.Align.START
                }
              )
            ]
          }
        )
      ]
    }
  );
}

// launcher/modes/app/App.tsx
import Apps from "gi://AstalApps";
function AppMode({
  close,
  searchValue,
  enterPressed,
  pressedKey,
  visible,
  closed,
  entry
}) {
  const apps = new Apps.Apps({
    nameMultiplier: 2,
    entryMultiplier: 0,
    executableMultiplier: 2
  });
  const [focusedApp, setFocusedApp] = createState(0);
  closed.subscribe(() => {
    if (!closed.get() || !visible.get()) return;
    close();
    setAppList(apps.get_list());
  });
  enterPressed.subscribe(() => {
    if (!enterPressed.get() || !visible.get()) return;
    handleInputEnter();
  });
  pressedKey.subscribe(() => {
    if (!visible.get()) return;
    const keyData = pressedKey.get();
    if (!keyData) return;
    if ((keyData.keyval === Gdk.KEY_Down || keyData.keyval === Gdk.KEY_Tab) && appList.get().length > focusedApp.get()) {
      setFocusedApp((prev) => prev + 1);
      return;
    }
    if (keyData.keyval === Gdk.KEY_Up || keyData.keyval === Gdk.KEY_ISO_Left_Tab) {
      if (focusedApp.get() > 0) setFocusedApp((prev) => prev - 1);
      return;
    }
    if (keyData.keyval === Gdk.KEY_Escape) {
      close();
      setAppList(apps.get_list());
      return;
    }
    const isAlt = keyData.modifier & Gdk.ModifierType.ALT_MASK;
    const numberKeys = [
      Gdk.KEY_1,
      Gdk.KEY_2,
      Gdk.KEY_3,
      Gdk.KEY_4,
      Gdk.KEY_5,
      Gdk.KEY_6,
      Gdk.KEY_7,
      Gdk.KEY_8,
      Gdk.KEY_9,
      Gdk.KEY_0
    ];
    if (isAlt && numberKeys.includes(keyData.keyval)) {
      const index = numberKeys.indexOf(keyData.keyval);
      if (index === -1 || index >= appList.get().length) {
        close();
        setAppList(apps.get_list());
        return;
      }
      appList.get()[index].launch();
      close();
      setAppList(apps.get_list());
      return;
    }
    if (keyData.keyval === Gdk.KEY_Return) {
      handleInputEnter();
      return;
    }
    if (keyData.keyval === Gdk.KEY_BackSpace && entry) {
      const text = entry.text;
      if (text.length > 0) {
        const pos = entry.get_position();
        if (pos > 0) {
          const newText = entry.text.slice(0, pos - 1) + entry.text.slice(pos);
          entry.set_text(newText);
          entry.grab_focus();
          entry.set_position(pos - 1);
        }
      }
      return;
    }
    if (keyData.keyval === Gdk.KEY_Delete && entry) {
      const text = entry.text;
      if (text.length > 0) {
        const pos = entry.get_position();
        if (pos > 0) {
          const newText = entry.text.slice(0, pos) + entry.text.slice(pos + 1);
          entry.set_text(newText);
          entry.grab_focus();
          entry.set_position(pos);
        }
      }
      return;
    }
    const invalidKeys = [
      Gdk.KEY_Shift_L,
      Gdk.KEY_Shift_R,
      Gdk.KEY_Shift_Lock,
      Gdk.KEY_Alt_L,
      Gdk.KEY_Alt_R,
      Gdk.KEY_Control_L,
      Gdk.KEY_Control_R,
      Gdk.KEY_F1,
      Gdk.KEY_F2,
      Gdk.KEY_F3,
      Gdk.KEY_F4,
      Gdk.KEY_F5,
      Gdk.KEY_F6,
      Gdk.KEY_F7,
      Gdk.KEY_F8,
      Gdk.KEY_F9,
      Gdk.KEY_F10,
      Gdk.KEY_F11,
      Gdk.KEY_F12,
      Gdk.KEY_F13,
      Gdk.KEY_F14,
      Gdk.KEY_F15,
      Gdk.KEY_F16,
      Gdk.KEY_F17,
      Gdk.KEY_F18,
      Gdk.KEY_F19,
      Gdk.KEY_F20,
      Gdk.KEY_F21,
      Gdk.KEY_F22,
      Gdk.KEY_F23,
      Gdk.KEY_F24,
      Gdk.KEY_F25,
      Gdk.KEY_F26,
      Gdk.KEY_F27,
      Gdk.KEY_F28,
      Gdk.KEY_F29,
      Gdk.KEY_Cancel,
      Gdk.KEY_Num_Lock,
      Gdk.KEY_MediaRepeat,
      Gdk.KEY_AudioPlay,
      Gdk.KEY_3270_PrintScreen,
      Gdk.KEY_Left,
      Gdk.KEY_Right,
      Gdk.KEY_Up,
      Gdk.KEY_Down,
      Gdk.KEY_KP_0,
      Gdk.KEY_KP_1,
      Gdk.KEY_KP_2,
      Gdk.KEY_KP_3,
      Gdk.KEY_KP_4,
      Gdk.KEY_KP_5,
      Gdk.KEY_KP_6,
      Gdk.KEY_KP_7,
      Gdk.KEY_KP_8,
      Gdk.KEY_KP_9,
      Gdk.KEY_KP_Separator,
      Gdk.KEY_KP_Page_Up,
      Gdk.KEY_KP_Page_Down,
      Gdk.KEY_KP_End,
      Gdk.KEY_KP_Home,
      Gdk.KEY_KP_Left,
      Gdk.KEY_KP_Up,
      Gdk.KEY_KP_Right,
      Gdk.KEY_KP_Down,
      Gdk.KEY_KP_Insert,
      Gdk.KEY_KP_Delete,
      Gdk.KEY_KP_Begin,
      Gdk.KEY_Meta_L,
      Gdk.KEY_Meta_R,
      Gdk.KEY_Super_L,
      Gdk.KEY_Super_R,
      Gdk.KEY_KbdInputAssistCancel
    ];
    if (!keyData.modifier && entry && !entry.hasFocus) {
      entry.grab_focus();
      if (!invalidKeys.includes(keyData.keyval)) {
        entry.set_text(
          entry.text + String.fromCharCode(keyData.keyval)
        );
        entry.set_position(entry.text.length);
      }
      return;
    }
  });
  const [appList, setAppList] = createState(
    apps.get_list()
  );
  searchValue.subscribe(() => {
    if (!visible.get()) return;
    setAppList(apps.fuzzy_query(searchValue.get()));
    setFocusedApp(0);
  });
  function handleInputEnter() {
    const list = appList.get();
    const appIndex = focusedApp.get();
    if (list.length <= appIndex) {
      close();
      setAppList(apps.get_list());
      return;
    }
    list[appIndex].launch();
    close();
    setAppList(apps.get_list());
  }
  return /* @__PURE__ */ jsx(
    "box",
    {
      orientation: Gtk.Orientation.VERTICAL,
      visible,
      class: "apps-container",
      children: /* @__PURE__ */ jsx(For, { each: appList, children: (app, index) => /* @__PURE__ */ jsx(
        App,
        {
          app,
          focused: createComputed(
            [focusedApp, index],
            (focusedApp2, index2) => focusedApp2 === index2
          ),
          onOpen: () => {
            app.launch();
            close();
            setAppList(apps.get_list());
          }
        }
      ) })
    }
  );
}

// bar/modules/Notifications.tsx
import Notifd from "gi://AstalNotifd";
function Notifications({ class: className }) {
  const notifd2 = Notifd.get_default();
  const notifs = createBinding(notifd2, "notifications");
  const dontDisturb = createBinding(notifd2, "dontDisturb");
  function transformLabel(notifications) {
    return `${notifications.length}`;
  }
  function transformIcon(dontDisturb2) {
    return dontDisturb2 ? "mi-notifications-off-symbolic" : "mi-notifications-symbolic";
  }
  function handleLeftClick() {
    setIsNotificationCenterVisible((prev) => !prev);
  }
  function handleRightClick() {
    notifd2.set_dont_disturb(!notifd2.dontDisturb);
  }
  function handleMiddleClick() {
    const notifications = notifd2.get_notifications();
    for (const notification of notifications) {
      notification.dismiss();
    }
  }
  return /* @__PURE__ */ jsxs(
    "box",
    {
      class: className,
      cursor: Gdk.Cursor.new_from_name("pointer", null),
      children: [
        /* @__PURE__ */ jsx(
          Gtk.GestureClick,
          {
            button: Gdk.BUTTON_PRIMARY,
            onPressed: handleLeftClick
          }
        ),
        /* @__PURE__ */ jsx(
          Gtk.GestureClick,
          {
            button: Gdk.BUTTON_SECONDARY,
            onPressed: handleRightClick
          }
        ),
        /* @__PURE__ */ jsx(
          Gtk.GestureClick,
          {
            button: Gdk.BUTTON_MIDDLE,
            onPressed: handleMiddleClick
          }
        ),
        /* @__PURE__ */ jsxs(
          "box",
          {
            class: notifs(
              (notifications) => notifications.length > 0 ? "notification-icon unread" : "notification-icon"
            ),
            children: [
              /* @__PURE__ */ jsx("image", { iconName: dontDisturb(transformIcon), class: "icon" }),
              /* @__PURE__ */ jsx(With, { value: notifs, children: (notifications) => notifications.length > 0 && /* @__PURE__ */ jsx(
                "image",
                {
                  iconName: "mi-circle-symbolic",
                  class: "unread",
                  pixelSize: 8
                }
              ) })
            ]
          }
        ),
        /* @__PURE__ */ jsx("label", { label: notifs(transformLabel) })
      ]
    }
  );
}

// bar/modules/Microphone.tsx
import Wp from "gi://AstalWp";
function Microphone({ class: className }) {
  const wp = Wp.get_default();
  const microphone = wp?.audio.defaultMicrophone;
  if (!wp || !microphone)
    return /* @__PURE__ */ jsx("box", { class: className, children: /* @__PURE__ */ jsx("label", { label: "Inaccessible Microphone" }) });
  const volume = createBinding(microphone, "volume");
  const iconName = createBinding(microphone, "volume_icon");
  const device = createBinding(microphone, "description");
  const [isBluetooth, setIsBluetooth] = createState(
    microphone.get_pw_property("device.api") === "bluez5"
  );
  const icon = createComputed([iconName, volume], transformIcon);
  device.subscribe(() => {
    setIsBluetooth(microphone.get_pw_property("device.api") === "bluez5");
  });
  function transformLabel(volume2) {
    return `${Math.round(volume2 * 100)}%`;
  }
  function transformTooltip(device2) {
    return `Device: ${device2}`;
  }
  function transformIcon(iconName2, volume2) {
    if (volume2 === 0) return "microphone-sensitivity-muted-symbolic";
    return iconName2;
  }
  function handleScroll(_event, _deltaX, deltaY) {
    const wp2 = Wp.get_default();
    const microphone2 = wp2?.audio.defaultMicrophone;
    if (deltaY < 0) {
      microphone2?.set_volume(
        microphone2.volume + (config.get().volumeStep?.microphone ?? defaultConfig.volumeStep.microphone)
      );
    } else if (deltaY > 0) {
      microphone2?.set_volume(
        microphone2.volume - (config.get().volumeStep?.microphone ?? defaultConfig.volumeStep.microphone)
      );
    }
  }
  return /* @__PURE__ */ jsxs("box", { class: className, tooltipMarkup: device(transformTooltip), children: [
    /* @__PURE__ */ jsx(
      Gtk.EventControllerScroll,
      {
        flags: Gtk.EventControllerScrollFlags.VERTICAL,
        onScroll: handleScroll
      }
    ),
    /* @__PURE__ */ jsx(
      "image",
      {
        iconName: "mi-bluetooth-connected-symbolic",
        visible: isBluetooth,
        class: "microphone-bluetooth-icon"
      }
    ),
    /* @__PURE__ */ jsx("image", { iconName: icon, class: "microphone-icon" }),
    /* @__PURE__ */ jsx("label", { label: volume(transformLabel) })
  ] });
}

// util/formatTime.ts
import GLib4 from "gi://GLib";
function formatSeconds(seconds) {
  if (!Number.isFinite(seconds) || seconds < 0) return "0s";
  const h = Math.floor(seconds / 3600);
  const m = Math.floor(seconds % 3600 / 60);
  const s = Math.floor(seconds % 60);
  const parts = [];
  if (h > 0) parts.push(`${h}h`);
  if (m > 0) parts.push(`${m}m`);
  if (s > 0 || parts.length === 0) parts.push(`${s}s`);
  return parts.join(" ");
}
function time(time2, format = "%H:%M") {
  return GLib4.DateTime.new_from_unix_local(time2).format(format);
}

// bar/modules/Battery.tsx
import AstalBattery from "gi://AstalBattery";
function Battery({ class: className }) {
  const battery = AstalBattery.get_default();
  const percentage = createBinding(battery, "percentage");
  const isCharging = createBinding(battery, "charging");
  const timeToFull = createBinding(battery, "time_to_full");
  const timeToEmpty = createBinding(battery, "time_to_empty");
  const energyRate = createBinding(battery, "energy_rate");
  const iconName = createBinding(battery, "battery_icon_name");
  const [showAlt, setShowAlt] = createState(false);
  const label = createComputed(
    [showAlt, percentage, isCharging, timeToEmpty, timeToFull],
    transformLabel
  );
  const tooltip = createComputed(
    [percentage, isCharging, timeToEmpty, timeToFull, energyRate],
    transformTooltip
  );
  percentage.subscribe(() => {
    const perc = Math.round(percentage.get() * 100);
    const charging = isCharging.get();
    const icon = iconName.get();
    const baseCommand = `notify-send -a 'Battery Manager' -i ${icon}`;
    if (charging && perc === 100)
      return execAsync(
        `${baseCommand} 'Charge Completed' 'Battery is at 100%.
Unplug the charger.'`
      );
    if (charging) return;
    if (perc === 15 || perc === 10)
      return execAsync(
        `${baseCommand} 'Battery Low' 'Battery is at ${perc}%.
Plug the charger.'`
      );
    if (perc <= 5)
      return execAsync(
        `${baseCommand} 'Battery Critical' 'Battery is at ${perc}%.
Plug the charger.'`
      );
  });
  function transformLabel(showAlt2, percentage2, isCharging2, timeToEmpty2, timeToFull2) {
    if (showAlt2) {
      if (isCharging2) {
        return Math.round(percentage2 * 100) === 100 ? `Full` : `${formatSeconds(timeToFull2)}`;
      }
      return ` ${formatSeconds(timeToEmpty2)}`;
    }
    return Math.round(percentage2 * 100) === 100 ? `Full` : `${Math.round(percentage2 * 100)}%`;
  }
  function transformTooltip(percentage2, isCharging2, timeToEmpty2, timeToFull2, energyRate2) {
    return [
      `${isCharging2 ? Math.round(percentage2 * 100) === 100 ? "Full" : `Time to full: ${formatSeconds(timeToFull2)}` : `Time to empty: ${formatSeconds(timeToEmpty2)}`}`,
      `Power Drain: ${energyRate2}W`
    ].join("\n");
  }
  function leftClickHandler() {
    setShowAlt((prev) => !prev);
  }
  return /* @__PURE__ */ jsx(
    "box",
    {
      class: className,
      cursor: Gdk.Cursor.new_from_name("pointer", null),
      tooltipMarkup: tooltip,
      children: /* @__PURE__ */ jsxs("box", { children: [
        /* @__PURE__ */ jsx(
          Gtk.GestureClick,
          {
            button: Gdk.BUTTON_PRIMARY,
            onPressed: leftClickHandler
          }
        ),
        /* @__PURE__ */ jsx("image", { iconName, class: "battery-icon" }),
        /* @__PURE__ */ jsx("label", { label })
      ] })
    }
  );
}

// bar/modules/Speaker.tsx
import Wp2 from "gi://AstalWp";
function Speaker({ class: className }) {
  const wp = Wp2.get_default();
  const speaker = wp?.audio.defaultSpeaker;
  if (!wp || !speaker)
    return /* @__PURE__ */ jsx("box", { class: className, children: /* @__PURE__ */ jsx("label", { label: "Inaccessible Speaker" }) });
  const volume = createBinding(speaker, "volume");
  const isMuted = createBinding(speaker, "mute");
  const iconName = createBinding(speaker, "volume_icon");
  const device = createBinding(speaker, "description");
  const [isBluetooth, setIsBluetooth] = createState(
    speaker.get_pw_property("device.api") === "bluez5"
  );
  const icon = createComputed([iconName, volume, isMuted], transformIcon);
  device.subscribe(() => {
    setIsBluetooth(speaker.get_pw_property("device.api") === "bluez5");
  });
  function transformLabel(volume2) {
    return `${Math.round(volume2 * 100)}%`;
  }
  function transformTooltip(device2) {
    return `Device: ${device2}`;
  }
  function transformIcon(iconName2, volume2, isMuted2) {
    if (volume2 === 0) return "audio-volume-muted-symbolic";
    else if (Math.round(volume2 * 100) === 100 && !isMuted2)
      return "audio-volume-high-symbolic";
    return iconName2;
  }
  function handleScroll(_event, _deltaX, deltaY) {
    if (deltaY < 0)
      speaker?.set_volume(
        speaker.volume + (config.get().volumeStep?.speaker ?? defaultConfig.volumeStep.speaker)
      );
    else if (deltaY > 0)
      speaker?.set_volume(
        speaker.volume - (config.get().volumeStep?.speaker ?? defaultConfig.volumeStep.speaker)
      );
  }
  return /* @__PURE__ */ jsxs("box", { class: className, tooltipMarkup: device(transformTooltip), children: [
    /* @__PURE__ */ jsx(
      Gtk.EventControllerScroll,
      {
        flags: Gtk.EventControllerScrollFlags.VERTICAL,
        onScroll: handleScroll
      }
    ),
    /* @__PURE__ */ jsx(
      "image",
      {
        iconName: "mi-bluetooth-connected-symbolic",
        visible: isBluetooth,
        pixelSize: 18,
        class: "speaker-bluetooth-icon"
      }
    ),
    /* @__PURE__ */ jsx("image", { iconName: icon, class: "speaker-icon" }),
    /* @__PURE__ */ jsx("label", { label: volume(transformLabel) })
  ] });
}

// util/systemStats.ts
import Network from "gi://AstalNetwork";

// ../../../../../nix/store/ybmnrn9psssjab9md9mpvd7v8ybvjzcy-ags-js-lib-3.0.0/share/ags/js/src/time.ts
import AstalIO2 from "gi://AstalIO";
var Time = AstalIO2.Time;
function interval(interval2, callback) {
  return AstalIO2.Time.interval(interval2, () => void callback?.());
}
function timeout(timeout2, callback) {
  return AstalIO2.Time.timeout(timeout2, () => void callback?.());
}
function createPoll(init, ival, execOrFn, transform) {
  let currentValue = init;
  let timer = null;
  const subscribers = /* @__PURE__ */ new Set();
  function subscribe(callback) {
    function set2(value) {
      if (value !== currentValue) {
        currentValue = value;
        subscribers.forEach((cb) => cb());
      }
    }
    if (subscribers.size === 0) {
      timer = interval(ival, () => {
        if (typeof execOrFn === "function") {
          const value = execOrFn(currentValue);
          if (value instanceof Promise) {
            value.then(set2);
          } else {
            set2(value);
          }
        } else {
          execAsync(execOrFn).then((stdout) => {
            set2(transform ? transform(stdout, currentValue) : stdout);
          });
        }
      });
    }
    subscribers.add(callback);
    return () => {
      subscribers.delete(callback);
      if (subscribers.size === 0) {
        timer?.cancel();
        timer = null;
      }
    };
  }
  return new Accessor(() => currentValue, subscribe);
}

// util/systemStats.ts
var [cpuUsage, setCpuUsage] = createState({
  total: {
    idle: 0,
    total: 0,
    percentage: 0
  }
});
var [memoryUsage, setMemoryUsage] = createState({
  memory: {
    available: "0B",
    total: "0B",
    free: "0B",
    used: "0B",
    usage: 0
  },
  swap: {
    total: "0B",
    free: "0B",
    used: "0B",
    usage: 0
  }
});
var [networkUsage, setNetworkUsage] = createState({
  rx: 0,
  tx: 0,
  interface: "Unknown",
  isWifi: false,
  isWired: false,
  icon: "network-offline-symbolic"
});
var [diskUsage, setDiskUsage] = createState({
  device: "Unkonwn",
  totalSize: "0B",
  usedSize: "0B",
  availableSize: "0B",
  usagePercent: "0B",
  path: "0B"
});
var lastCpuInfo = {};
function getCoreInfo(core, coreData) {
  const idle = coreData[3] + coreData[4];
  const total = coreData.reduce((subtotal, curr) => subtotal + curr, 0);
  const prevCoreData = lastCpuInfo[core];
  if (prevCoreData) {
    const deltaIdle = idle - prevCoreData.idle;
    const deltaTotal = total - prevCoreData.total;
    return {
      idle: deltaIdle,
      total: deltaTotal,
      percentage: 100 * (1 - deltaIdle / deltaTotal)
    };
  }
  lastCpuInfo[core] = {
    idle,
    total,
    percentage: 0
  };
  return null;
}
async function recalculateCpuUsage() {
  const statFile = await readFileAsync("/proc/stat");
  console.assert(statFile.startsWith("cpu "), "couldn't parse /proc/stat");
  const cpuStats = statFile.split("\n").filter((part) => part.startsWith("cpu"));
  const cpuStatsData = {};
  for (const cpuStat of cpuStats) {
    const cpuData = cpuStat.split(" ");
    const coreNumber = cpuData.shift()?.replace("cpu", "") || "total";
    const coreValues = cpuData.filter(Boolean).map((value) => parseInt(value));
    const coreData = getCoreInfo(coreNumber, coreValues);
    if (coreData) cpuStatsData[coreNumber] = coreData;
  }
  if (Object.keys(cpuStatsData).length > 0) setCpuUsage(cpuStatsData);
}
async function recalculateMemoryUsage() {
  const memoryInfo = exec("free -h");
  const [
    ,
    totalRam,
    usedRam,
    freeRam,
    _sharedRam,
    _bufferCacheRam,
    availableRam
  ] = memoryInfo.split("\n")[1].split(/\s+/);
  const [, totalSwap, usedSwap, freeSwap] = memoryInfo.split("\n")[2].split(/\s+/);
  setMemoryUsage({
    memory: {
      available: availableRam.replace(",", "."),
      total: totalRam.replace(",", "."),
      free: freeRam.replace(",", "."),
      used: usedRam.replace(",", "."),
      usage: parseFloat(usedRam.replace(",", ".")) / parseFloat(totalRam.replace(",", ".")) * 100
    },
    swap: {
      total: totalSwap.replace(",", "."),
      used: usedSwap.replace(",", "."),
      free: freeSwap.replace(",", "."),
      usage: parseFloat(usedSwap.replace(",", ".")) / parseFloat(totalSwap.replace(",", ".")) * 100
    }
  });
}
var lastNetworkInfo = null;
var lastInterface = null;
function getMainNetworkInterface() {
  const ifconfig = exec("ifconfig");
  const blocks = ifconfig.split(/\n\s*\n/);
  for (const block of blocks) {
    const lines = block.split("\n").map((line) => line.trim()).filter(Boolean);
    if (lines.length === 0) continue;
    const header = lines[0];
    const name = header.split(/\s+/)[0];
    if (name === "lo") continue;
    const hasInet = lines.some((line) => /inet addr:/.test(line));
    if (hasInet) return name;
  }
  return void 0;
}
var network = Network.get_default();
network.connect("notify::primary", (source) => {
  setNetworkUsage((prev) => {
    let icon = prev.icon;
    if (source.primary === Network.Primary.WIFI) {
      icon = network.wifi.iconName;
    } else if (source.primary === Network.Primary.WIRED) {
      icon = network.wired.iconName;
    } else {
      icon = "network-offline-symbolic";
    }
    return {
      ...prev,
      isWifi: source.primary === Network.Primary.WIFI,
      isWired: source.primary === Network.Primary.WIRED,
      ssid: source.wifi?.ssid,
      frequency: source.wifi?.frequency,
      strength: source.wifi?.strength,
      icon
    };
  });
});
async function recalculateNetworkUsage() {
  const netFile = await readFileAsync("/proc/net/dev");
  const mainInterface = getMainNetworkInterface();
  if (!mainInterface) return;
  const lines = netFile.split("\n").slice(2);
  for (const line of lines) {
    if (!line.trim()) continue;
    const [iface, ...fields] = line.trim().split(/:|\s+/).filter(Boolean);
    if (iface === mainInterface) {
      const rx = parseInt(fields[0], 10);
      const tx = parseInt(fields[8], 10);
      let icon = "network-offline-symbolic";
      if (network.primary === Network.Primary.WIFI) {
        icon = network.wifi.iconName;
      } else if (network.primary === Network.Primary.WIRED) {
        icon = network.wired.iconName;
      } else {
        icon = "network-offline-symbolic";
      }
      const networkInfo = {
        rx,
        tx,
        interface: mainInterface,
        isWifi: network.primary === Network.Primary.WIFI,
        isWired: network.primary === Network.Primary.WIRED,
        ssid: network.wifi?.ssid,
        frequency: network.wifi?.frequency,
        strength: network.wifi?.strength,
        icon
      };
      if (lastNetworkInfo && mainInterface === lastInterface) {
        const newNetStats = {
          rx: networkInfo.rx - lastNetworkInfo.rx,
          tx: networkInfo.tx - lastNetworkInfo.tx,
          interface: mainInterface,
          isWifi: network.primary === Network.Primary.WIFI,
          isWired: network.primary === Network.Primary.WIRED,
          ssid: network.wifi?.ssid,
          frequency: network.wifi?.frequency,
          strength: network.wifi?.strength,
          icon
        };
        setNetworkUsage(newNetStats);
      }
      lastNetworkInfo = networkInfo;
      lastInterface = mainInterface ?? null;
      break;
    }
  }
}
function formatNetworkThroughput(value, unitIndex = 0) {
  const UNITS = ["B", "kB", "MB", "GB", "TB"];
  unitIndex += 1;
  value /= 1e3;
  if (value < 10) {
    return `${value.toFixed(2)} ${UNITS[unitIndex]}/s`;
  }
  if (value < 100) {
    return `${value.toFixed(1)} ${UNITS[unitIndex]}/s`;
  }
  if (value < 1e3) {
    return `${(value / 1e3).toFixed(2)} ${UNITS[unitIndex + 1]}/s`;
  }
  return formatNetworkThroughput(value, unitIndex);
}
async function recalculateDiskUsage() {
  const rawDiskData = exec("df -h /");
  const [device, totalSize, usedSize, availableSize, usagePercent, path] = rawDiskData.split("\n")[1].split(/\s+/g);
  setDiskUsage({
    device,
    totalSize,
    usedSize,
    availableSize,
    usagePercent,
    path
  });
}
function handleInterval() {
  recalculateCpuUsage();
  recalculateDiskUsage();
  recalculateMemoryUsage();
  recalculateNetworkUsage();
}
var currentInterval = config.get()?.systemStatsUpdateInterval || defaultConfig.systemStatsUpdateInterval;
var systemStatsInterval = interval(currentInterval, handleInterval);
config.subscribe(() => {
  const newConfig = config.get();
  if (newConfig.systemStatsUpdateInterval !== currentInterval) {
    systemStatsInterval.cancel();
    currentInterval = newConfig?.systemStatsUpdateInterval || defaultConfig.systemStatsUpdateInterval;
    systemStatsInterval = interval(currentInterval, handleInterval);
  }
});

// bar/modules/Network.tsx
function Network2({ class: className }) {
  function transformLabel(stat) {
    if (stat.isWifi) {
      return `${stat.strength}%`;
    }
    if (stat.isWired) {
      return "Wired";
    }
    return "";
  }
  function transformTooltip(stat) {
    if (stat.isWifi) {
      return [
        `Up: ${formatNetworkThroughput(stat.tx)}`,
        `Down: ${formatNetworkThroughput(stat.rx)}`,
        `SSID: ${stat.ssid}`,
        `Frequency: ${stat.frequency} GHz`,
        `Interface: ${stat.interface}`
      ].join("\n");
    }
    if (stat.isWired) {
      return [
        `Up: ${formatNetworkThroughput(stat.tx)}`,
        `Down: ${formatNetworkThroughput(stat.rx)}`,
        `Interface: ${stat.interface}`
      ].join("\n");
    }
    return "";
  }
  function transformIcon(stat) {
    return stat.icon;
  }
  return /* @__PURE__ */ jsxs("box", { class: className, tooltipMarkup: networkUsage(transformTooltip), children: [
    /* @__PURE__ */ jsx(
      "image",
      {
        iconName: networkUsage(transformIcon),
        class: "network-icon"
      }
    ),
    /* @__PURE__ */ jsx("label", { label: networkUsage(transformLabel) })
  ] });
}

// bar/modules/Memory.tsx
function Memory({ class: className }) {
  function formatLabel(usage) {
    return `${usage.memory.usage.toFixed(1)}%`;
  }
  function formatTooltip(usage) {
    return [
      `RAM: ${usage.memory.used}/${usage.memory.total} (${usage.memory.usage.toFixed(1)}%)`,
      `SWAP: ${usage.swap.used}/${usage.swap.total} (${usage.swap.usage.toFixed(1)}%)`
    ].join("\n");
  }
  return /* @__PURE__ */ jsxs("box", { class: className, children: [
    /* @__PURE__ */ jsx("image", { iconName: "mi-memory-alt-symbolic", class: "ram-icon" }),
    /* @__PURE__ */ jsx(
      "label",
      {
        label: memoryUsage(formatLabel),
        tooltipMarkup: memoryUsage(formatTooltip)
      }
    )
  ] });
}

// bar/modules/Power.tsx
function Power({ class: className }) {
  let popover = null;
  const [isPopoverOpen, setIsPopoverOpen] = createState(false);
  function handleLeftClick() {
    setIsSessionMenuVisible((prev) => !prev);
  }
  function handleRightClick() {
    if (popover) {
      if (isPopoverOpen.get()) {
        setIsPopoverOpen(false);
        popover.popdown();
        popover.set_css_classes(
          popover.cssClasses.filter(
            (className2) => className2 !== "open"
          )
        );
      } else {
        setIsPopoverOpen(true);
        popover.popup();
        popover.set_css_classes([...popover.cssClasses, "open"]);
      }
    }
  }
  return /* @__PURE__ */ jsxs(
    "box",
    {
      class: className,
      cursor: Gdk.Cursor.new_from_name("pointer", null),
      tooltipMarkup: "Power Actions",
      children: [
        /* @__PURE__ */ jsx(
          Gtk.GestureClick,
          {
            button: Gdk.BUTTON_PRIMARY,
            onPressed: handleLeftClick
          }
        ),
        /* @__PURE__ */ jsx(
          Gtk.GestureClick,
          {
            button: Gdk.BUTTON_SECONDARY,
            onPressed: handleRightClick
          }
        ),
        /* @__PURE__ */ jsx("image", { iconName: "system-shutdown-symbolic", pixelSize: 16 }),
        /* @__PURE__ */ jsx(
          "popover",
          {
            $: (self) => {
              popover = self;
            },
            onClosed: (self) => {
              setIsPopoverOpen(false);
              self.set_css_classes(
                self.cssClasses.filter(
                  (className2) => className2 !== "open"
                )
              );
            },
            children: /* @__PURE__ */ jsxs("box", { spacing: 6, orientation: Gtk.Orientation.VERTICAL, children: [
              /* @__PURE__ */ jsxs("box", { spacing: 6, children: [
                /* @__PURE__ */ jsx(
                  "button",
                  {
                    tooltipMarkup: "Lock",
                    cursor: Gdk.Cursor.new_from_name("pointer", null),
                    onClicked: () => {
                      execAsync("loginctl lock-session");
                      popover?.popdown();
                    },
                    children: /* @__PURE__ */ jsx(
                      "image",
                      {
                        iconName: "mi-lock-symbolic",
                        pixel_size: 16
                      }
                    )
                  }
                ),
                /* @__PURE__ */ jsx(
                  "button",
                  {
                    tooltipMarkup: "Sleep",
                    cursor: Gdk.Cursor.new_from_name("pointer", null),
                    onClicked: () => {
                      execAsync("systemctl suspend");
                      popover?.popdown();
                    },
                    children: /* @__PURE__ */ jsx(
                      "image",
                      {
                        iconName: "mi-dark-mode-symbolic",
                        pixel_size: 16
                      }
                    )
                  }
                ),
                /* @__PURE__ */ jsx(
                  "button",
                  {
                    tooltipMarkup: "Logout",
                    cursor: Gdk.Cursor.new_from_name("pointer", null),
                    onClicked: () => {
                      execAsync("pkill Hyprland");
                      popover?.popdown();
                    },
                    children: /* @__PURE__ */ jsx(
                      "image",
                      {
                        iconName: "mi-logout-symbolic",
                        pixel_size: 16
                      }
                    )
                  }
                ),
                /* @__PURE__ */ jsx(
                  "button",
                  {
                    tooltipMarkup: "Task Manager",
                    cursor: Gdk.Cursor.new_from_name("pointer", null),
                    onClicked: () => {
                      execAsync("kitty btop");
                      popover?.popdown();
                    },
                    children: /* @__PURE__ */ jsx(
                      "image",
                      {
                        iconName: "mi-browse-activity-symbolic",
                        pixel_size: 16
                      }
                    )
                  }
                )
              ] }),
              /* @__PURE__ */ jsxs("box", { spacing: 6, children: [
                /* @__PURE__ */ jsx(
                  "button",
                  {
                    tooltipMarkup: "Hibernate",
                    cursor: Gdk.Cursor.new_from_name("pointer", null),
                    onClicked: () => {
                      execAsync("systemctl hibernate");
                      popover?.popdown();
                    },
                    children: /* @__PURE__ */ jsx(
                      "image",
                      {
                        iconName: "mi-downloading-symbolic",
                        pixel_size: 16
                      }
                    )
                  }
                ),
                /* @__PURE__ */ jsx(
                  "button",
                  {
                    tooltipMarkup: "Shutdown",
                    cursor: Gdk.Cursor.new_from_name("pointer", null),
                    onClicked: () => {
                      execAsync("systemctl poweroff");
                      popover?.popdown();
                    },
                    children: /* @__PURE__ */ jsx(
                      "image",
                      {
                        iconName: "mi-power-settings-new-symbolic",
                        pixel_size: 16
                      }
                    )
                  }
                ),
                /* @__PURE__ */ jsx(
                  "button",
                  {
                    tooltipMarkup: "Reboot",
                    cursor: Gdk.Cursor.new_from_name("pointer", null),
                    onClicked: () => {
                      execAsync("reboot");
                      popover?.popdown();
                    },
                    children: /* @__PURE__ */ jsx(
                      "image",
                      {
                        iconName: "mi-restart-alt-symbolic",
                        pixel_size: 16
                      }
                    )
                  }
                ),
                /* @__PURE__ */ jsx(
                  "button",
                  {
                    tooltipMarkup: "Reboot to Firmware Settings",
                    cursor: Gdk.Cursor.new_from_name("pointer", null),
                    onClicked: () => {
                      execAsync("systemctl reboot --firmware-setup");
                      popover?.popdown();
                    },
                    children: /* @__PURE__ */ jsx(
                      "image",
                      {
                        iconName: "mi-settings-applications-symbolic",
                        pixel_size: 16
                      }
                    )
                  }
                )
              ] })
            ] })
          }
        )
      ]
    }
  );
}

// constants/colors.ts
var mauvre = "#c6a0f6";
var sapphire = "#7dc4e4";
var blue = "#8aadf4";
var tooltipCurrentSong = mauvre;
var lyricsSourceColor = sapphire;
var url = blue;

// util/text.ts
var [currentMarquee, setCurrentMarquee] = createState({
  text: "",
  index: 0
});
function marquee(text, width) {
  if (text.length <= width) return text;
  const marqueeData = currentMarquee.get();
  if (marqueeData.text !== text) {
    setCurrentMarquee({
      text,
      index: 0
    });
  }
  if (text.length < marqueeData.index) {
    setCurrentMarquee({
      text,
      index: 0
    });
  }
  const dividedText = `${text} \uF444 `;
  const marqueeText = dividedText.slice(marqueeData.index) + dividedText.slice(0, marqueeData.index);
  setCurrentMarquee((marqueeData2) => {
    return {
      text: marqueeData2.text,
      index: (marqueeData2.index + 1) % dividedText.length
    };
  });
  return marqueeText.slice(0, width);
}
function colorText(text, color) {
  return `<span color="${color}">${text}</span>`;
}
function escapeMarkup(text) {
  return text.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
}
function parseMarkdown(message) {
  let output = message;
  const urlRegex = /\[([^\]]+)\]\(((<|&lt;)?(https?:\/\/[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}(?:[^\s><]*))(>|&gt;)?\))|\b(https?:\/\/[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}(?:[^\s<>()]*)\b)/g;
  const boldRegex = /\*\*(.*?)\*\*/g;
  const italicRegex = /(\*|_)(.*?)\1/g;
  const underlineRegex = /__(.*?)__/g;
  const monocodeRegex = /`([^`]+)`/g;
  const tripleBacktick = /```/g;
  output = message.replace(boldRegex, (_match, text) => `<b>${text}</b>`).replace(underlineRegex, (_match, text) => `<u>${text}</u>`).replace(italicRegex, (_match, text) => `<i>${text}</i>`).replace(tripleBacktick, () => "`").replace(monocodeRegex, (_match, text) => `<tt>${text}</tt>`).replace(urlRegex, (match, text, _lt, url2) => {
    if (url2)
      return colorText(
        `<a href="${url2}">${text || url2}</a>`,
        url
      );
    return colorText(`<a href="${match}">${match}</a>`, url);
  });
  return output;
}

// bar/modules/Media.tsx
import Mpris from "gi://AstalMpris";
import Gio5 from "gi://Gio";

// util/fetch.ts
import GLib5 from "gi://GLib";
import Gio4 from "gi://Gio";
import Soup from "gi://Soup?version=3.0";
var Headers = class _Headers {
  constructor(init = {}) {
    this.headers = /* @__PURE__ */ new Map();
    if (Array.isArray(init)) {
      for (const [name, value] of init) {
        this.append(name, value);
      }
    } else if (init instanceof _Headers) {
      init.forEach((value, name) => this.set(name, value));
    } else if (typeof init === "object") {
      for (const name in init) {
        this.set(name, init[name]);
      }
    }
  }
  append(name, value) {
    name = name.toLowerCase();
    if (!this.headers.has(name)) {
      this.headers.set(name, []);
    }
    this.headers.get(name).push(value);
  }
  delete(name) {
    this.headers.delete(name.toLowerCase());
  }
  get(name) {
    const values = this.headers.get(name.toLowerCase());
    return values ? values.join(", ") : null;
  }
  getAll(name) {
    return this.headers.get(name.toLowerCase()) || [];
  }
  has(name) {
    return this.headers.has(name.toLowerCase());
  }
  set(name, value) {
    this.headers.set(name.toLowerCase(), [value]);
  }
  forEach(callbackfn, thisArg) {
    for (const [name, values] of this.headers.entries()) {
      callbackfn.call(thisArg, values.join(", "), name, this);
    }
  }
  *entries() {
    for (const [name, values] of this.headers.entries()) {
      yield [name, values.join(", ")];
    }
  }
  *keys() {
    for (const name of this.headers.keys()) {
      yield name;
    }
  }
  *values() {
    for (const values of this.headers.values()) {
      yield values.join(", ");
    }
  }
  [Symbol.iterator]() {
    return this.entries();
  }
};
var URLSearchParams = class _URLSearchParams {
  constructor(init = "") {
    this.params = /* @__PURE__ */ new Map();
    if (typeof init === "string") {
      this.parseString(init);
    } else if (Array.isArray(init)) {
      for (const [key, value] of init) {
        this.append(key, value);
      }
    } else if (init instanceof _URLSearchParams) {
      init.forEach((value, key) => this.append(key, value));
    } else if (typeof init === "object") {
      for (const key in init) {
        this.set(key, init[key]);
      }
    }
  }
  parseString(query) {
    query.replace(/^\?/, "").split("&").forEach((pair) => {
      if (!pair) return;
      const [key, value] = pair.split("=").map(decodeURIComponent);
      this.append(key, value ?? "");
    });
  }
  get size() {
    return this.params.size;
  }
  append(name, value) {
    if (!this.params.has(name)) {
      this.params.set(name, []);
    }
    this.params.get(name).push(value);
  }
  delete(name, value) {
    if (value === void 0) {
      this.params.delete(name);
    } else {
      const values = this.params.get(name) || [];
      this.params.set(
        name,
        values.filter((v) => v !== value)
      );
      if (this.params.get(name).length === 0) {
        this.params.delete(name);
      }
    }
  }
  get(name) {
    const values = this.params.get(name);
    return values ? values[0] : null;
  }
  getAll(name) {
    return this.params.get(name) || [];
  }
  has(name, value) {
    if (!this.params.has(name)) return false;
    if (value === void 0) return true;
    return this.params.get(name)?.includes(value) || false;
  }
  set(name, value) {
    this.params.set(name, [value]);
  }
  sort() {
    this.params = new Map([...this.params.entries()].sort());
  }
  toString() {
    return [...this.params.entries()].flatMap(
      ([key, values]) => values.map((value) => `${encodeURIComponent(key)}=${encodeURIComponent(value)}`)
    ).join("&");
  }
  forEach(callbackfn, thisArg) {
    for (const [key, values] of this.params.entries()) {
      for (const value of values) {
        callbackfn.call(thisArg, value, key, this);
      }
    }
  }
  [Symbol.iterator]() {
    return this.params.entries();
  }
};
var URL = class _URL {
  constructor(url2, base) {
    if (base) {
      url2 = GLib5.Uri.resolve_relative(
        base instanceof _URL ? base.toString() : base,
        url2 instanceof _URL ? url2.toString() : url2,
        GLib5.UriFlags.HAS_PASSWORD | GLib5.UriFlags.ENCODED
      );
    }
    this.uri = GLib5.Uri.parse(
      url2 instanceof _URL ? url2.toString() : url2,
      GLib5.UriFlags.HAS_PASSWORD | GLib5.UriFlags.ENCODED
    );
    this.searchParams = new URLSearchParams(this.uri.get_query() ?? "");
  }
  get href() {
    const uri = GLib5.Uri.build_with_user(
      GLib5.UriFlags.HAS_PASSWORD | GLib5.UriFlags.ENCODED,
      this.uri.get_scheme(),
      this.uri.get_user(),
      this.uri.get_password(),
      null,
      this.uri.get_host(),
      this.uri.get_port(),
      this.uri.get_path(),
      this.searchParams.toString(),
      this.uri.get_fragment()
    );
    return uri.to_string();
  }
  get origin() {
    return "null";
  }
  get protocol() {
    return `${this.uri.get_scheme()}:`;
  }
  get username() {
    return this.uri.get_user() ?? "";
  }
  get password() {
    return this.uri.get_password() ?? "";
  }
  get host() {
    const host = this.hostname;
    const port = this.port;
    return host ? host + (port ? `:${port}` : "") : "";
  }
  get hostname() {
    return this.uri.get_host() ?? "";
  }
  get port() {
    const p = this.uri.get_port();
    return p >= 0 ? p.toString() : "";
  }
  get pathname() {
    return this.uri.get_path();
  }
  get hash() {
    const frag = this.uri.get_fragment();
    return frag ? `#${frag}` : "";
  }
  get search() {
    const q = this.searchParams.toString();
    return q ? `?${q}` : "";
  }
  toString() {
    return this.href;
  }
  toJSON() {
    return this.href;
  }
};
var Response = class {
  constructor(body = null, options = {}) {
    this.body = null;
    this.bodyUsed = false;
    this.redirected = false;
    this.type = "default";
    this.url = "";
    this.body = body;
    this.headers = new Headers(options.headers ?? {});
    this.status = options.status ?? 200;
    this.statusText = options.statusText ?? "";
    this.ok = this.status >= 200 && this.status < 300;
  }
  static error() {
    throw Error("Not yet implemented");
  }
  static json(_data, _init2) {
    throw Error("Not yet implemented");
  }
  static redirect(_url, _status) {
    throw Error("Not yet implemented");
  }
  async blob() {
    throw Error("Not implemented");
  }
  async bytes() {
    const { CLOSE_SOURCE, CLOSE_TARGET } = Gio4.OutputStreamSpliceFlags;
    const outputStream = Gio4.MemoryOutputStream.new_resizable();
    if (!this.body) return null;
    await new Promise((resolve, reject) => {
      outputStream.splice_async(
        this.body,
        CLOSE_TARGET | CLOSE_SOURCE,
        GLib5.PRIORITY_DEFAULT,
        null,
        (_, res) => {
          try {
            resolve(outputStream.splice_finish(res));
          } catch (error) {
            reject(error);
          }
        }
      );
    });
    Object.assign(this, { bodyUsed: true });
    return outputStream.steal_as_bytes();
  }
  async formData() {
    throw Error("Not yet implemented");
  }
  async arrayBuffer() {
    const blob = await this.bytes();
    if (!blob) return null;
    return blob.toArray().buffer;
  }
  async text() {
    const blob = await this.bytes();
    return blob ? new TextDecoder().decode(blob.toArray()) : "";
  }
  async json() {
    const text = await this.text();
    return JSON.parse(text);
  }
  clone() {
    throw Error("Not yet implemented");
  }
};
async function fetch(url2, { method, headers, body, flags } = {}) {
  const session = new Soup.Session();
  const message = new Soup.Message({
    method: method || "GET",
    uri: url2 instanceof URL ? url2.uri : GLib5.Uri.parse(url2, GLib5.UriFlags.ENCODED)
  });
  if (flags) message.set_flags(flags);
  if (headers) {
    if (headers instanceof Headers) {
      for (const [name, value] of headers.entries()) {
        message.request_headers.append(name, String(value));
      }
    } else {
      for (const [name, value] of Object.entries(headers)) {
        message.request_headers.append(name, String(value));
      }
    }
  }
  if (typeof body === "string") {
    message.set_request_body_from_bytes(null, new GLib5.Bytes(new TextEncoder().encode(body)));
  }
  const inputStream = await new Promise((resolve, reject) => {
    session.send_async(message, 0, null, (_, res) => {
      try {
        resolve(session.send_finish(res));
      } catch (error) {
        reject(error);
      }
    });
  });
  const resposeHeaders = new Headers();
  message.get_response_headers().foreach((name, value) => resposeHeaders.append(name, value));
  return new Response(inputStream, {
    statusText: message.reason_phrase,
    status: message.status_code,
    headers: resposeHeaders
  });
}

// util/lyrics.ts
import Soup2 from "gi://Soup";
var sleep = (ms) => new Promise((resolve) => timeout(ms, () => resolve(null)));
function saveMusixmatchToken(token) {
  writeFile(
    config.get().paths?.musixmatchToken ?? defaultConfig.paths.musixmatchToken,
    JSON.stringify(token)
  );
}
function getMusixmatchToken() {
  if (!fileExists(
    config.get().paths?.musixmatchToken ?? defaultConfig.paths.musixmatchToken
  ))
    return null;
  const content = readFile(
    config.get().paths?.musixmatchToken ?? defaultConfig.paths.musixmatchToken
  );
  if (!content) return null;
  return JSON.parse(content);
}
async function getMusixmatchUsertoken(cookies) {
  const tokenData = getMusixmatchToken();
  if (tokenData) return tokenData;
  const url2 = new URL(
    "https://apic-desktop.musixmatch.com/ws/1.1/token.get?user_language=en&app_id=web-desktop-app-v1.0"
  );
  try {
    const headers = new Headers();
    if (cookies) headers.append("cookie", cookies);
    const res = await fetch(url2, {
      headers,
      flags: Soup2.MessageFlags.NO_REDIRECT
    });
    if (res.status === 301) {
      const setCookie = res.headers.getAll("Set-Cookie").map((cookie) => cookie.split(";").shift()).join("; ");
      return await getMusixmatchUsertoken(setCookie);
    }
    if (!res.ok) return null;
    const data = await res.json();
    if (!data.message.body || data.message.header.status_code === 401 && data.message.header.hint === "captcha") {
      await sleep(1e4);
      return await getMusixmatchUsertoken(cookies);
    }
    const usertoken = data.message.body.user_token;
    if (!usertoken) return null;
    const json = {
      cookies,
      usertoken,
      expiresAt: new Date(Date.now() + 10 * 60 * 1e3).getTime()
      // 10 minutes
    };
    saveMusixmatchToken(json);
    return json;
  } catch (_e) {
    return null;
  }
}
async function _searchLyricsMusixmatch(player, tokenData) {
  if (!player.available || !tokenData) return null;
  const duration = player.length / 1e3;
  const searchParams = new URLSearchParams({
    app_id: "web-desktop-app-v1.0",
    usertoken: tokenData.usertoken,
    q_track: player.title,
    q_artist: player.artist,
    q_album: player.album,
    page_size: "20",
    page: "1",
    q_duration: duration.toString(),
    s_track_rating: "asc"
  });
  const url2 = new URL(
    `https://apic-desktop.musixmatch.com/ws/1.1/track.search?${searchParams}`
  );
  try {
    const res = await fetch(url2, {
      headers: {
        cookie: tokenData.cookies || ""
      }
    });
    if (!res.ok) return null;
    const data = await res.json();
    if (data?.message?.header?.status_code === 401 && data?.message?.header?.hint === "captcha")
      return null;
    if (data?.message?.body?.track_list?.length <= 0) return null;
    const track = data?.message?.body?.track_list?.find(
      (listItem) => listItem.track.track_name?.toLowerCase() === player.title.toLowerCase() && listItem.track.artist_name?.toLowerCase().includes(player.artist.toLowerCase())
    );
    if (!track) return null;
    const commonTrackId = track?.track?.commontrack_id;
    const trackId = track?.track?.track_id;
    const hasLineSyncedLyrics = track?.track?.has_subtitles;
    if (!hasLineSyncedLyrics) return null;
    return {
      hasLineSyncedLyrics,
      commonTrackId,
      trackId
    };
  } catch (_e) {
    return null;
  }
}
async function _fetchLineSyncedLyricsMusixmatch(tokenData, commonTrackId) {
  if (!tokenData || !commonTrackId) return null;
  const searchParams = new URLSearchParams({
    app_id: "web-desktop-app-v1.0",
    usertoken: tokenData.usertoken,
    commontrack_id: commonTrackId
  });
  const url2 = new URL(
    `https://apic-desktop.musixmatch.com/ws/1.1/track.subtitle.get?${searchParams}`
  );
  try {
    const res = await fetch(url2, {
      headers: {
        cookie: tokenData.cookies || ""
      }
    });
    if (!res.ok) return null;
    const data = await res.json();
    if (data?.message?.header?.status_code === 401 && data?.message?.header?.hint === "captcha")
      return null;
    const lyrics = data?.message?.body?.subtitle?.subtitle_body;
    if (!lyrics) return null;
    return lyrics;
  } catch (_e) {
    return null;
  }
}
async function _fetchLyricsMusixmatch(player, tokenData, trackId, commonTrackId, hasLineSyncedLyrics) {
  if (!player.available || !commonTrackId && !trackId || !tokenData || !hasLineSyncedLyrics)
    return null;
  const lyricsData = await _fetchLineSyncedLyricsMusixmatch(
    tokenData,
    commonTrackId
  );
  return lyricsData;
}
async function fetchLyricsLrclib(player) {
  if (!player.available) return null;
  const searchParams = new URLSearchParams({
    track_name: player.title,
    artist_name: player.artist,
    album_name: player.album,
    q: player.title
  });
  const url2 = new URL(`https://lrclib.net/api/search?${searchParams}`);
  try {
    const res = await fetch(url2, {
      headers: {
        "Lrclib-Client": "Custom Linux Bar (https://github.com/Stef-00012/ags-topbar)",
        "User-Agent": "Custom Linux Bar (https://github.com/Stef-00012/ags-topbar)"
      }
    });
    if (!res.ok) return null;
    const data = await res.json();
    const match = data.find(
      (d) => d.artistName?.toLowerCase().includes(player.artist.toLowerCase()) && d.trackName?.toLowerCase() === player.title.toLowerCase()
    );
    if (!match || !match.syncedLyrics || match.syncedLyrics?.length <= 0)
      return null;
    return {
      source: "lrclib.net",
      lineSynced: match?.syncedLyrics
    };
  } catch (_e) {
    return null;
  }
}
async function fetchLyricsMusixmatch(player) {
  if (!player.available) return null;
  const tokenData = await getMusixmatchUsertoken();
  if (!tokenData) return null;
  const trackData = await _searchLyricsMusixmatch(player, tokenData);
  if (!trackData || !trackData.hasLineSyncedLyrics || !trackData.commonTrackId && !trackData.trackId)
    return null;
  const lyrics = await _fetchLyricsMusixmatch(
    player,
    tokenData,
    trackData.trackId,
    trackData.commonTrackId,
    trackData.hasLineSyncedLyrics
  );
  if (!lyrics) return null;
  return {
    source: "Musixmatch",
    lineSynced: lyrics
  };
}
async function _getLyrics(player) {
  const avaibleSources = {
    musixmatch: fetchLyricsMusixmatch,
    lrclib: fetchLyricsLrclib
    // netease: fetchLyricsNetease,
  };
  const sources = [
    "musixmatch",
    "lrclib"
    // "netease",
  ];
  for (const source of sources) {
    const lyrics = await avaibleSources[source](player);
    if (!lyrics) continue;
    if (lyrics?.lineSynced) {
      return {
        source: lyrics.source,
        lineSynced: lyrics.lineSynced
      };
    }
  }
  return null;
}
async function getLyrics(player) {
  if (!player.available) return null;
  const lyrics = await _getLyrics(player);
  if (!lyrics) return null;
  const parsedLyrics = parseLyrics(lyrics.lineSynced);
  if (!parsedLyrics) return null;
  return {
    source: lyrics.source,
    lyrics: parsedLyrics,
    trackId: player.trackid
  };
}
function parseLyrics(lyrics) {
  const lyricsSplit = lyrics?.split("\n");
  if (!lyricsSplit) return null;
  const formattedLyrics = [];
  let lastTime;
  for (const index in lyricsSplit) {
    const lyricText = lyricsSplit[index].split(" ");
    const time2 = lyricText.shift().replace(/[\[\]]/g, "");
    const text = lyricText.join(" ");
    const minutes = time2.split(":")[0];
    const seconds = time2.split(":")[1];
    const totalSeconds = Number.parseFloat(minutes) * 60 + Number.parseFloat(seconds);
    const instrumentalLyricIndicator = "\uF001 ";
    if (index === "0" && totalSeconds > 3 && instrumentalLyricIndicator) {
      formattedLyrics.push({
        time: 0,
        text: instrumentalLyricIndicator
      });
    }
    if (text.length > 0) {
      lastTime = totalSeconds;
      formattedLyrics.push({
        time: totalSeconds,
        text
      });
    }
    if (instrumentalLyricIndicator && // @ts-ignore
    (!lastTime || totalSeconds - lastTime > 3)) {
      lastTime = totalSeconds;
      formattedLyrics.push({
        time: totalSeconds,
        text: instrumentalLyricIndicator
      });
    }
  }
  return formattedLyrics;
}
function convertToLrc(song) {
  if (!song.lyrics || song.lyrics.length === 0) return null;
  const lrcLyrics = song.lyrics.map((lyric) => {
    const minutes = Math.floor(lyric.time / 60).toString().padStart(2, "0");
    const seconds = Math.floor(lyric.time % 60).toString().padStart(2, "0");
    const milliseconds = Math.floor(lyric.time % 1 * 1e3).toString().padStart(3, "0");
    return `[${minutes}:${seconds}.${milliseconds}] ${lyric.text}`;
  }).join("\n");
  return [
    `# Track: ${song.track}`,
    `# Artist: ${song.artist}`,
    `# Album: ${song.album}`,
    `# Source: ${song.source}`,
    `# Track ID: ${song.trackId}`,
    ``,
    lrcLyrics
  ].join("\n");
}
function parseLyricsData(lyrics, position, source) {
  if (!lyrics || lyrics.length === 0) return null;
  let firstLyric = null;
  let lastLyric = null;
  let firstTimestamp = null;
  let lastTimestamp = null;
  for (const lyric of lyrics) {
    const timestamp = lyric.time;
    const text = lyric.text;
    if (!firstLyric) firstLyric = text;
    if (!firstTimestamp && firstTimestamp !== 0) firstTimestamp = timestamp;
    if (position >= timestamp) {
      lastLyric = text;
      lastTimestamp = timestamp;
    }
  }
  const searchLyric = lastLyric || firstLyric;
  const searchTimestamp = lastTimestamp || firstTimestamp;
  if (!searchLyric) return null;
  let previousLinesAmount = 0;
  let nextLinesAmount = 0;
  const currentLyricIndex = lyrics.findIndex(
    (lyric) => lyric.time === searchTimestamp && lyric.text === searchLyric
  );
  if (currentLyricIndex === 1) previousLinesAmount = 1;
  else if (currentLyricIndex === 2) previousLinesAmount = 2;
  else if (currentLyricIndex >= 3) previousLinesAmount = 3;
  if (currentLyricIndex === lyrics.length - 1) nextLinesAmount = 1;
  else if (currentLyricIndex === lyrics.length - 2) nextLinesAmount = 2;
  else if (currentLyricIndex <= lyrics.length - 3) nextLinesAmount = 3;
  const previousLines = [...lyrics].splice(currentLyricIndex - previousLinesAmount, previousLinesAmount).map((lyric) => lyric.text);
  const nextLines = [...lyrics].splice(currentLyricIndex + 1, nextLinesAmount).map((lyric) => lyric.text);
  return {
    previous: previousLines,
    current: searchLyric,
    next: nextLines,
    source
  };
}
function formatLyricsTooltip(song, data) {
  if (!data) return "";
  const previousLyrics = data.previous.length > 0 ? `${escapeMarkup(data.previous.join("\n"))}
` : "";
  const nextLyrics = data.next.length > 0 ? `
${escapeMarkup(data.next.join("\n"))}` : "";
  const tooltip = `${previousLyrics}${colorText(`<i>${escapeMarkup(data.current)}</i>`, tooltipCurrentSong)}${nextLyrics}

${colorText(`[Source: ${song.source}]`, lyricsSourceColor)}`;
  return tooltip;
}
function useSong(player) {
  const [song, setSong] = createState(null);
  _updateLyrics();
  const id = player.connect("notify::metadata", () => {
    if (player.trackid === song.get()?.trackId) return;
    _updateLyrics();
  });
  onCleanup(() => {
    player.disconnect(id);
  });
  return song;
  function _updateLyrics() {
    if (!player.trackid || !player.available) return;
    setSong({
      artist: player.artist,
      track: player.title,
      album: player.album,
      trackId: player.trackid,
      source: "Musixmatch",
      length: player.length,
      cover: player.artUrl,
      volume: player.volume,
      position: player.position
    });
    const lyricsFolder = config.get().paths?.lyricsFolder ?? defaultConfig.paths.lyricsFolder;
    const lyricsFile = `${lyricsFolder}/${player.trackid?.split("/").pop()}.lrc`;
    if (fileExists(lyricsFile)) {
      const lyricsData = readFile(lyricsFile);
      const parsedLyrics = parseLyrics(lyricsData);
      if (parsedLyrics) {
        setSong({
          artist: player.artist,
          track: player.title,
          album: player.album,
          trackId: player.trackid,
          source: "Local File",
          length: player.length,
          cover: player.artUrl,
          volume: player.volume,
          position: player.position,
          lyrics: parsedLyrics
        });
      }
    }
    getLyrics(player).then((lyrics) => {
      if (lyrics?.trackId !== player.trackid) return;
      setSong({
        artist: player.artist,
        track: player.title,
        album: player.album,
        trackId: player.trackid,
        source: lyrics?.source || "Musixmatch",
        length: player.length,
        cover: player.artUrl,
        volume: player.volume,
        position: player.position,
        lyrics: lyrics?.lyrics
      });
    });
  }
}

// bar/modules/Media.tsx
function Media({
  class: className,
  mediaClass,
  lyricsClass,
  coverClass
}) {
  let mediaDispose = null;
  let lyricsDispose = null;
  const spotify = Mpris.Player.new("spotify");
  const song = useSong(spotify);
  const position = createBinding(spotify, "position");
  const volume = createBinding(spotify, "volume");
  const artist = createBinding(spotify, "artist");
  const track = createBinding(spotify, "title");
  const album = createBinding(spotify, "album");
  const coverArt = createBinding(spotify, "cover_art");
  const available = createBinding(spotify, "available");
  const mainMetadata = createComputed([
    track,
    artist,
    album,
    volume,
    position,
    available
  ]);
  const lyricsState = createComputed([song, position]);
  const coverVisibleState = createComputed([coverArt, available], transformCoverVisible);
  function transformCoverVisible(coverArt2, available2) {
    return available2 && !!coverArt2 && fileExists(coverArt2);
  }
  function transformMediaLabel([track2, artist2, , , , isAvailable]) {
    if (!track2 || !artist2 || !isAvailable) return "No Media Playing";
    return `${marquee(`${artist2} - ${track2}`, config.get()?.mediaMaxLength ?? defaultConfig.mediaMaxLength)}`;
  }
  function transformMediaTooltip([track2, artist2, album2, volume2, , isAvailable]) {
    if (!track2 || !artist2 || !album2 || !isAvailable) return "";
    return [
      `Artist: ${escapeMarkup(artist2)}`,
      `Track: ${escapeMarkup(track2)}`,
      `Album: ${escapeMarkup(album2)}`,
      `Volume: ${Math.round(volume2 * 100)}%`
    ].join("\n");
  }
  function transformMediaHasTooltip([track2, artist2, album2, , , isAvailable]) {
    if (!track2 || !artist2 || !album2 || !isAvailable) return false;
    return true;
  }
  function transformLyricsLabel([song2, position2]) {
    const noMediaMsg = "No Lyrics Available";
    if (!song2 || !song2.lyrics || !song2.source) return noMediaMsg;
    const parsedLyrics = parseLyricsData(
      song2.lyrics,
      position2,
      song2.source
    )?.current;
    if (!parsedLyrics) return noMediaMsg;
    return `${parsedLyrics}`;
  }
  function transformLyricsTooltip([song2, position2]) {
    if (!song2 || !song2.lyrics || !song2.source) return "";
    const lyricsData = parseLyricsData(song2.lyrics, position2, song2.source);
    if (!lyricsData) return "";
    return formatLyricsTooltip(song2, lyricsData);
  }
  function transformLyricsHasTooltip([song2, position2]) {
    if (!song2 || !song2.lyrics || !song2.source) return false;
    const lyricsData = parseLyricsData(song2.lyrics, position2, song2.source);
    if (!lyricsData) return false;
    return true;
  }
  function transformMediaIcon([track2, artist2, , , , isAvailable]) {
    if (!track2 || !artist2 || !isAvailable) return "mi-music-off-symbolic";
    return "mi-music-note-symbolic";
  }
  function handleIconLeftClick() {
    const cover = coverArt.get();
    if (!cover || !fileExists(cover)) return;
    execAsync(`xdg-open "${cover}"`);
  }
  function handleIconMiddleClick() {
    const cover = coverArt.get();
    if (!cover || !fileExists(cover) || !spotify.available) return;
    if (!fileExists(
      config.get().paths?.saveFolder ?? defaultConfig.paths.saveFolder,
      true
    ))
      Gio5.File.new_for_path(
        config.get().paths?.saveFolder ?? defaultConfig.paths.saveFolder
      ).make_directory_with_parents(null);
    const destFile = Gio5.File.new_for_path(
      `${config.get().paths?.saveFolder ?? defaultConfig.paths.saveFolder}/${spotify.trackid?.split("/").pop()}.png`
    );
    Gio5.File.new_for_path(cover).copy(
      destFile,
      Gio5.FileCopyFlags.OVERWRITE,
      null,
      null
    );
  }
  function handleMediaScroll(_event, _deltaX, deltaY) {
    if (!spotify.available) return;
    if (deltaY < 0) {
      spotify.set_volume(
        spotify.volume + (config.get().volumeStep?.media ?? defaultConfig.volumeStep.media)
      );
    } else if (deltaY > 0) {
      spotify?.set_volume(
        spotify.volume - (config.get().volumeStep?.media ?? defaultConfig.volumeStep.media)
      );
    }
  }
  function handleMediaLeftClick() {
    if (!spotify.available) return;
    spotify.play_pause();
  }
  function handleMediaRightClick() {
    if (!spotify.available) return;
    execAsync(`wl-copy ${spotify.trackid.split("/").pop()}`);
    execAsync(
      `notify-send "Stef Shell Media" "The track ID of the song has been copied"`
    );
  }
  function handleMediaMiddleClick() {
    if (!spotify.available) return;
    spotify.raise();
  }
  function handleLyricsLeftClick() {
    const songData = song.get();
    if (!songData) return;
    const lyrics = convertToLrc(songData);
    if (!lyrics) return;
    const path = `/tmp/lyrics.lrc`;
    if (fileExists(path)) {
      Gio5.File.new_for_path(path).delete(null);
    }
    writeFile(path, lyrics);
    execAsync(`xdg-open "${path}"`);
  }
  function handleLyricsMiddleClick() {
    const songData = song.get();
    if (!songData) return;
    const lyrics = convertToLrc(songData);
    if (!lyrics) return;
    const path = `${config.get().paths?.saveFolder ?? defaultConfig.paths.saveFolder}/${songData.trackId.split("/").pop()}.lrc`;
    if (!fileExists(
      config.get().paths?.saveFolder ?? defaultConfig.paths.saveFolder,
      true
    ))
      Gio5.File.new_for_path(
        config.get().paths?.saveFolder ?? defaultConfig.paths.saveFolder
      ).make_directory_with_parents(null);
    if (fileExists(path)) {
      Gio5.File.new_for_path(path).delete(null);
    }
    writeFile(path, lyrics);
    execAsync(`xdg-open "${path}"`);
  }
  return /* @__PURE__ */ jsxs("box", { class: className, children: [
    /* @__PURE__ */ jsxs("box", { cursor: Gdk.Cursor.new_from_name("pointer", null), children: [
      /* @__PURE__ */ jsx(
        "image",
        {
          class: coverClass,
          valign: Gtk.Align.CENTER,
          visible: coverVisibleState,
          file: coverArt,
          overflow: Gtk.Overflow.HIDDEN
        }
      ),
      /* @__PURE__ */ jsx(
        Gtk.GestureClick,
        {
          button: Gdk.BUTTON_PRIMARY,
          onPressed: handleIconLeftClick
        }
      ),
      /* @__PURE__ */ jsx(
        Gtk.GestureClick,
        {
          button: Gdk.BUTTON_MIDDLE,
          onPressed: handleIconMiddleClick
        }
      )
    ] }),
    /* @__PURE__ */ jsxs(
      "box",
      {
        class: mediaClass,
        cursor: available(
          (isAvailable) => isAvailable ? Gdk.Cursor.new_from_name("pointer", null) : Gdk.Cursor.new_from_name("default", null)
        ),
        hasTooltip: mainMetadata(transformMediaHasTooltip),
        onQueryTooltip: (_label, _x, _y, _keyboardMode, tooltip) => {
          if (mediaDispose) mediaDispose();
          createRoot((dispose) => {
            mediaDispose = dispose;
            tooltip.set_custom(
              jsx(Gtk.Label, {
                justify: Gtk.Justification.CENTER,
                useMarkup: true,
                label: mainMetadata(transformMediaTooltip)
              })
            );
          });
          return true;
        },
        children: [
          /* @__PURE__ */ jsx(
            "image",
            {
              iconName: mainMetadata(transformMediaIcon),
              class: "media-icon"
            }
          ),
          /* @__PURE__ */ jsx("label", { label: mainMetadata(transformMediaLabel) }),
          /* @__PURE__ */ jsx(
            Gtk.EventControllerScroll,
            {
              flags: Gtk.EventControllerScrollFlags.VERTICAL,
              onScroll: handleMediaScroll
            }
          ),
          /* @__PURE__ */ jsx(
            Gtk.GestureClick,
            {
              button: Gdk.BUTTON_PRIMARY,
              onPressed: handleMediaLeftClick
            }
          ),
          /* @__PURE__ */ jsx(
            Gtk.GestureClick,
            {
              button: Gdk.BUTTON_SECONDARY,
              onPressed: handleMediaRightClick
            }
          ),
          /* @__PURE__ */ jsx(
            Gtk.GestureClick,
            {
              button: Gdk.BUTTON_MIDDLE,
              onPressed: handleMediaMiddleClick
            }
          )
        ]
      }
    ),
    /* @__PURE__ */ jsxs(
      "box",
      {
        class: lyricsClass,
        cursor: lyricsState(
          ([songData]) => songData?.lyrics ? Gdk.Cursor.new_from_name("pointer", null) : Gdk.Cursor.new_from_name("default", null)
        ),
        hasTooltip: lyricsState(transformLyricsHasTooltip),
        onQueryTooltip: (_label, _x, _y, _keyboardMode, tooltip) => {
          if (lyricsDispose) lyricsDispose();
          createRoot((dispose) => {
            lyricsDispose = dispose;
            tooltip.set_custom(
              jsx(Gtk.Label, {
                justify: Gtk.Justification.CENTER,
                useMarkup: true,
                label: lyricsState(transformLyricsTooltip)
              })
            );
          });
          return true;
        },
        children: [
          /* @__PURE__ */ jsx("image", { iconName: "mi-lyrics-symbolic", class: "lyrics-icon" }),
          /* @__PURE__ */ jsx("label", { label: lyricsState(transformLyricsLabel) }),
          /* @__PURE__ */ jsx(
            Gtk.GestureClick,
            {
              button: Gdk.BUTTON_PRIMARY,
              onPressed: handleLyricsLeftClick
            }
          ),
          /* @__PURE__ */ jsx(
            Gtk.GestureClick,
            {
              button: Gdk.BUTTON_MIDDLE,
              onPressed: handleLyricsMiddleClick
            }
          )
        ]
      }
    )
  ] });
}

// bar/modules/Disk.tsx
function Disk({ class: className }) {
  function transformLabel(usage) {
    return `${usage.availableSize}`;
  }
  function transformTooltip(usage) {
    return `${usage.usedSize} used out of ${usage.totalSize} (${usage.usagePercent})`;
  }
  return /* @__PURE__ */ jsxs("box", { class: className, children: [
    /* @__PURE__ */ jsx("image", { iconName: "mi-storage-symbolic", class: "disk-icon" }),
    /* @__PURE__ */ jsx(
      "label",
      {
        label: diskUsage(transformLabel),
        tooltipMarkup: diskUsage(transformTooltip)
      }
    )
  ] });
}

// bar/modules/Time.tsx
function Time2({ class: className }) {
  const [showAlt, setShowAlt] = createState(false);
  const [isPopoverOpen, setIsPopoverOpen] = createState(false);
  let popover = null;
  const command = "date +'%A | %B | %-d | %Y | %I | %M | %p'";
  const timeData = createPoll("", 1e3, command);
  function transformLabel(timeData2) {
    const [, , , , hours, minutes, ampm] = timeData2.split(" | ");
    return `${hours}:${minutes} ${ampm}`;
  }
  function transformAltLabel(timeData2) {
    const [day, month, monthDay, year] = timeData2.split(" | ");
    return `${year}, ${monthDay} ${month}, ${day}`;
  }
  function leftClickHandler() {
    setShowAlt((prev) => !prev);
  }
  function rightClickHandler() {
    if (popover) {
      if (isPopoverOpen.get()) {
        setIsPopoverOpen(false);
        popover.popdown();
        popover.set_css_classes(
          popover.cssClasses.filter(
            (className2) => className2 !== "open"
          )
        );
      } else {
        setIsPopoverOpen(true);
        popover.popup();
        popover.set_css_classes([...popover.cssClasses, "open"]);
      }
    }
  }
  return /* @__PURE__ */ jsxs(
    "box",
    {
      class: className,
      cursor: Gdk.Cursor.new_from_name("pointer", null),
      children: [
        /* @__PURE__ */ jsx(
          Gtk.GestureClick,
          {
            button: Gdk.BUTTON_PRIMARY,
            onPressed: leftClickHandler
          }
        ),
        /* @__PURE__ */ jsx(
          Gtk.GestureClick,
          {
            button: Gdk.BUTTON_SECONDARY,
            onPressed: rightClickHandler
          }
        ),
        /* @__PURE__ */ jsx("image", { iconName: "mi-schedule-symbolic", class: "time-icon clock" }),
        /* @__PURE__ */ jsx("label", { label: timeData(transformLabel) }),
        /* @__PURE__ */ jsx(With, { value: showAlt, children: (showAlt2) => showAlt2 && /* @__PURE__ */ jsxs("box", { children: [
          /* @__PURE__ */ jsx(
            "image",
            {
              iconName: "mi-calendar-month-symbolic",
              class: "time-icon calendar"
            }
          ),
          /* @__PURE__ */ jsx("label", { label: timeData(transformAltLabel) })
        ] }) }),
        /* @__PURE__ */ jsx(
          "popover",
          {
            $: (self) => {
              popover = self;
            },
            onClosed: (self) => {
              setIsPopoverOpen(false);
              self.set_css_classes(
                self.cssClasses.filter(
                  (className2) => className2 !== "open"
                )
              );
            },
            children: /* @__PURE__ */ jsx(Gtk.Calendar, { class: "calendar" })
          }
        )
      ]
    }
  );
}

// bar/modules/Tray.tsx
import AstalTray from "gi://AstalTray";
function Tray({ class: className }) {
  const tray = AstalTray.get_default();
  const trayItems = createBinding(tray, "items");
  let popover = null;
  const [isPopoverOpen, setIsPopoverOpen] = createState(false);
  function handleLeftClick() {
    if (popover) {
      if (isPopoverOpen.get()) {
        setIsPopoverOpen(false);
        popover.popdown();
        popover.set_css_classes(
          popover.cssClasses.filter(
            (className2) => className2 !== "open"
          )
        );
      } else {
        popover.set_state_flags(
          Gtk.StateFlags.FOCUS_WITHIN | Gtk.StateFlags.DIR_LTR,
          true
        );
        setIsPopoverOpen(true);
        popover.popup();
        popover.set_css_classes([...popover.cssClasses, "open"]);
      }
    }
  }
  return /* @__PURE__ */ jsxs(
    "box",
    {
      class: className,
      cursor: Gdk.Cursor.new_from_name("pointer", null),
      tooltipMarkup: "Tray Menu",
      children: [
        /* @__PURE__ */ jsx(
          Gtk.GestureClick,
          {
            button: Gdk.BUTTON_PRIMARY,
            onPressed: handleLeftClick
          }
        ),
        /* @__PURE__ */ jsx(
          "image",
          {
            iconName: isPopoverOpen(
              (isOpen) => isOpen ? "mi-stat-1-symbolic" : "mi-stat-minus-1-symbolic"
            )
          }
        ),
        /* @__PURE__ */ jsx(
          "popover",
          {
            class: "tray-popover",
            $: (self) => {
              popover = self;
            },
            onClosed: (self) => {
              setIsPopoverOpen(false);
              self.set_css_classes(
                self.cssClasses.filter(
                  (className2) => className2 !== "open"
                )
              );
            },
            children: /* @__PURE__ */ jsx("box", { spacing: 12, children: /* @__PURE__ */ jsx(For, { each: trayItems, children: (trayItem) => {
              let popovermenu = null;
              const [isPopoverMenuOpen, setIsPopoverMenuOpen] = createState(false);
              if (!trayItem.gicon && !trayItem.title)
                return /* @__PURE__ */ jsx("box", { visible: false });
              return /* @__PURE__ */ jsxs(
                "box",
                {
                  class: "tray-item",
                  cursor: Gdk.Cursor.new_from_name(
                    "pointer",
                    null
                  ),
                  children: [
                    /* @__PURE__ */ jsx(
                      "image",
                      {
                        class: "icon",
                        gicon: trayItem.gicon,
                        tooltipMarkup: trayItem.tooltipMarkup || trayItem.title,
                        pixelSize: 18
                      }
                    ),
                    /* @__PURE__ */ jsx(
                      Gtk.GestureClick,
                      {
                        button: Gdk.BUTTON_PRIMARY,
                        onPressed: () => {
                          trayItem.about_to_show();
                        },
                        onReleased: (_, x, y) => {
                          trayItem.activate(x, y);
                        }
                      }
                    ),
                    /* @__PURE__ */ jsx(
                      Gtk.GestureClick,
                      {
                        button: Gdk.BUTTON_SECONDARY,
                        onPressed: () => {
                          trayItem.about_to_show();
                        },
                        onReleased: () => {
                          if (popovermenu) {
                            if (isPopoverMenuOpen.get()) {
                              setIsPopoverMenuOpen(false);
                              popovermenu.popdown();
                              popovermenu.set_css_classes(
                                popovermenu.cssClasses.filter(
                                  (className2) => className2 !== "open"
                                )
                              );
                            } else {
                              setIsPopoverMenuOpen(true);
                              popovermenu.popup();
                              popovermenu.set_css_classes(
                                [
                                  ...popovermenu.cssClasses,
                                  "open"
                                ]
                              );
                            }
                          }
                        }
                      }
                    ),
                    /* @__PURE__ */ jsx(
                      Gtk.GestureClick,
                      {
                        button: Gdk.BUTTON_MIDDLE,
                        onPressed: () => {
                          trayItem.about_to_show();
                        },
                        onReleased: (_, x, y) => {
                          trayItem.secondary_activate(x, y);
                        }
                      }
                    ),
                    /* @__PURE__ */ jsx(
                      Gtk.PopoverMenu,
                      {
                        class: "tray-popover-menu",
                        menuModel: trayItem.menuModel,
                        onClosed: (self) => {
                          setIsPopoverMenuOpen(false);
                          self.set_css_classes(
                            self.cssClasses.filter(
                              (className2) => className2 !== "open"
                            )
                          );
                        },
                        $: (self) => {
                          popovermenu = self;
                          self.insert_action_group(
                            "dbusmenu",
                            trayItem.actionGroup
                          );
                          trayItem.connect(
                            "notify::action-group",
                            (item) => {
                              self.insert_action_group(
                                "dbusmenu",
                                item.actionGroup
                              );
                            }
                          );
                          trayItem.connect(
                            "notify::menu-model",
                            (item) => {
                              self.set_menu_model(
                                item.menuModel
                              );
                            }
                          );
                        }
                      }
                    )
                  ]
                }
              );
            } }) })
          }
        )
      ]
    }
  );
}

// bar/modules/Cpu.tsx
function Cpu({ class: className }) {
  function transformLabel(usage) {
    return `${usage.total.percentage.toFixed(2)}%`;
  }
  function transformTooltip(usage) {
    return Object.entries(usage).sort(([a], [b]) => {
      if (a === "total") return -1;
      if (b === "total") return 1;
      return Number(a) - Number(b);
    }).map(([coreNumber, coreInfo]) => {
      return `${coreNumber === "total" ? "Total" : `Core ${coreNumber}`}: ${coreInfo.percentage.toFixed(2)}%${coreNumber === "total" ? "\n" : ""}`;
    }).join("\n");
  }
  return /* @__PURE__ */ jsxs("box", { class: className, children: [
    /* @__PURE__ */ jsx("image", { iconName: "mi-memory-symbolic", class: "cpu-icon" }),
    /* @__PURE__ */ jsx(
      "label",
      {
        label: cpuUsage(transformLabel),
        tooltipMarkup: cpuUsage(transformTooltip)
      }
    )
  ] });
}

// ../../../../../nix/store/ybmnrn9psssjab9md9mpvd7v8ybvjzcy-ags-js-lib-3.0.0/share/ags/js/src/gtk4/app.ts
import GLib6 from "gi://GLib?version=2.0";
import Gtk4 from "gi://Gtk?version=4.0";
import Astal4 from "gi://Astal?version=4.0";

// ../../../../../nix/store/ybmnrn9psssjab9md9mpvd7v8ybvjzcy-ags-js-lib-3.0.0/share/ags/js/src/overrides.ts
function snakeify2(str) {
  return str.replace(/([a-z])([A-Z])/g, "$1_$2").replaceAll("-", "_").toLowerCase();
}
async function suppress(mod2, patch2) {
  return mod2.then((m) => patch2(m.default)).catch(() => void 0);
}
function patch(proto, prop) {
  Object.defineProperty(proto, prop, {
    get() {
      return this[`get_${snakeify2(prop)}`]();
    }
  });
}
await suppress(import("gi://AstalApps"), ({ Apps: Apps2, Application }) => {
  patch(Apps2.prototype, "list");
  patch(Application.prototype, "keywords");
  patch(Application.prototype, "categories");
});
await suppress(import("gi://AstalBattery"), ({ UPower }) => {
  patch(UPower.prototype, "devices");
});
await suppress(import("gi://AstalBluetooth"), ({ Adapter, Bluetooth, Device }) => {
  patch(Adapter.prototype, "uuids");
  patch(Bluetooth.prototype, "adapters");
  patch(Bluetooth.prototype, "devices");
  patch(Device.prototype, "uuids");
});
await suppress(import("gi://AstalHyprland"), ({ Hyprland, Monitor, Workspace }) => {
  patch(Hyprland.prototype, "binds");
  patch(Hyprland.prototype, "monitors");
  patch(Hyprland.prototype, "workspaces");
  patch(Hyprland.prototype, "clients");
  patch(Monitor.prototype, "availableModes");
  patch(Monitor.prototype, "available_modes");
  patch(Workspace.prototype, "clients");
});
await suppress(import("gi://AstalMpris"), ({ Mpris: Mpris2, Player }) => {
  patch(Mpris2.prototype, "players");
  patch(Player.prototype, "supported_uri_schemes");
  patch(Player.prototype, "supportedUriSchemes");
  patch(Player.prototype, "supported_mime_types");
  patch(Player.prototype, "supportedMimeTypes");
  patch(Player.prototype, "comments");
});
await suppress(import("gi://AstalNetwork"), ({ Wifi }) => {
  patch(Wifi.prototype, "access_points");
  patch(Wifi.prototype, "accessPoints");
});
await suppress(import("gi://AstalNotifd"), ({ Notifd: Notifd6, Notification: Notification2 }) => {
  patch(Notifd6.prototype, "notifications");
  patch(Notification2.prototype, "actions");
});
await suppress(import("gi://AstalPowerProfiles"), ({ PowerProfiles }) => {
  patch(PowerProfiles.prototype, "actions");
});
await suppress(import("gi://AstalWp"), ({ Wp: Wp4, Audio, Video }) => {
  patch(Wp4.prototype, "endpoints");
  patch(Wp4.prototype, "devices");
  patch(Audio.prototype, "streams");
  patch(Audio.prototype, "recorders");
  patch(Audio.prototype, "microphones");
  patch(Audio.prototype, "speakers");
  patch(Audio.prototype, "devices");
  patch(Video.prototype, "streams");
  patch(Video.prototype, "recorders");
  patch(Video.prototype, "sinks");
  patch(Video.prototype, "sources");
  patch(Video.prototype, "devices");
});
await suppress(import("gi://AstalTray"), ({ Tray: Tray2 }) => {
  patch(Tray2.prototype, "items");
});

// ../../../../../nix/store/ybmnrn9psssjab9md9mpvd7v8ybvjzcy-ags-js-lib-3.0.0/share/ags/js/src/_app.ts
import { setConsoleLogDomain } from "console";
import { exit, programArgs } from "system";
import IO from "gi://AstalIO";
import GObject5 from "gi://GObject";
function mkApp(App2) {
  return new class AstalJS extends App2 {
    static {
      GObject5.registerClass({ GTypeName: "AstalJS" }, this);
    }
    eval(body) {
      return new Promise((res, rej) => {
        try {
          const fn = Function(`return (async function() {
                        ${body.includes(";") ? body : `return ${body};`}
                    })`);
          fn()().then(res).catch(rej);
        } catch (error) {
          rej(error);
        }
      });
    }
    vfunc_shutdown() {
      super.vfunc_shutdown();
      this.disposeRoot?.();
    }
    vfunc_request(msg, conn) {
      if (typeof this.requestHandler === "function") {
        this.requestHandler(msg, (response) => {
          IO.write_sock(conn, String(response), (_, res) => IO.write_sock_finish(res));
        });
      } else {
        super.vfunc_request(msg, conn);
      }
    }
    apply_css(style, reset = false) {
      super.apply_css(style, reset);
    }
    quit(code) {
      super.quit();
      exit(code ?? 0);
    }
    start({ requestHandler, css, hold, main, client, icons, ...cfg } = {}) {
      const app = this;
      client ??= () => {
        print(`Astal instance "${app.instanceName}" already running`);
        exit(1);
      };
      Object.assign(this, cfg);
      setConsoleLogDomain(app.instanceName);
      this.requestHandler = requestHandler;
      app.connect("activate", () => {
        createRoot((dispose) => {
          this.disposeRoot = dispose;
          main?.(...programArgs);
        });
      });
      try {
        app.acquire_socket();
      } catch {
        return client((msg) => IO.send_request(app.instanceName, msg), ...programArgs);
      }
      if (css) this.apply_css(css, false);
      if (icons) app.add_icons(icons);
      hold ??= true;
      if (hold) app.hold();
      app.runAsync([]);
    }
  }();
}

// ../../../../../nix/store/ybmnrn9psssjab9md9mpvd7v8ybvjzcy-ags-js-lib-3.0.0/share/ags/js/src/gtk4/app.ts
Gtk4.init();
GLib6.unsetenv("LD_PRELOAD");
await import("gi://Adw?version=1").then(({ default: Adw4 }) => Adw4.init()).catch(() => void 0);
var app_default = mkApp(Astal4.Application);

// bar/Bar.tsx
var [barHeight, setBarHeight] = createState(0);
function Bar({ gdkmonitor }) {
  const { TOP, LEFT, RIGHT } = Astal.WindowAnchor;
  return /* @__PURE__ */ jsx(
    "window",
    {
      visible: true,
      name: "bar",
      class: "bar",
      gdkmonitor,
      exclusivity: Astal.Exclusivity.EXCLUSIVE,
      anchor: TOP | LEFT | RIGHT,
      application: app_default,
      $: (self) => {
        timeout(5e3, () => {
          setBarHeight(self.get_allocated_height());
        });
      },
      children: /* @__PURE__ */ jsxs("centerbox", { cssName: "centerbox", children: [
        /* @__PURE__ */ jsxs("box", { $type: "start", hexpand: true, children: [
          /* @__PURE__ */ jsxs("box", { class: "module-group", children: [
            /* @__PURE__ */ jsx(Cpu, { class: "cpu-module" }),
            /* @__PURE__ */ jsx(Disk, { class: "disk-module" }),
            /* @__PURE__ */ jsx(Memory, {})
          ] }),
          /* @__PURE__ */ jsx("box", { class: "module-group", children: /* @__PURE__ */ jsx(Battery, { class: "battery-module" }) }),
          /* @__PURE__ */ jsx("box", { class: "module-group last", children: /* @__PURE__ */ jsx(Time2, { class: "time" }) })
        ] }),
        /* @__PURE__ */ jsx("box", { $type: "center", children: /* @__PURE__ */ jsx(
          Media,
          {
            coverClass: "image-cover-art",
            mediaClass: "module-group",
            lyricsClass: "module-group last"
          }
        ) }),
        /* @__PURE__ */ jsxs("box", { $type: "end", children: [
          /* @__PURE__ */ jsx("box", { class: "module-group", children: /* @__PURE__ */ jsx(Speaker, {}) }),
          /* @__PURE__ */ jsx("box", { class: "module-group", children: /* @__PURE__ */ jsx(Microphone, {}) }),
          /* @__PURE__ */ jsx("box", { class: "module-group", children: /* @__PURE__ */ jsx(Network2, {}) }),
          /* @__PURE__ */ jsxs("box", { class: "module-group", children: [
            /* @__PURE__ */ jsx(Notifications, { class: "notification-module" }),
            /* @__PURE__ */ jsx(Tray, {})
          ] }),
          /* @__PURE__ */ jsx("box", { class: "module-group end", children: /* @__PURE__ */ jsx(Power, {}) })
        ] })
      ] })
    }
  );
}

// util/timer.ts
import GLib7 from "gi://GLib";
var Timer = class {
  constructor(timeout2) {
    this.subscriptions = /* @__PURE__ */ new Set();
    this.isPaused = false;
    this.timeout = timeout2;
    this.timeLeft = timeout2;
    this.lastTickTime = GLib7.get_monotonic_time();
    this.interval = interval(20, () => this.tick());
  }
  notify() {
    for (const sub of this.subscriptions) {
      sub();
    }
  }
  unsubscribe(callback) {
    this.subscriptions.delete(callback);
    if (this.subscriptions.size === 0 && this.isPaused && this.interval != null) {
      console.warn("Timer was disconnected while paused");
      this.isPaused = false;
    }
  }
  subscribe(callback) {
    this.subscriptions.add(callback);
    return () => this.unsubscribe(callback);
  }
  tick() {
    const now = GLib7.get_monotonic_time();
    if (this.isPaused) {
      this.lastTickTime = now;
      return;
    }
    const delta = (now - this.lastTickTime) / 1e3;
    this.timeLeft -= delta;
    if (this.timeLeft <= 0) {
      this.timeLeft = 0;
      this.cancel();
    }
    this.notify();
    this.lastTickTime = now;
  }
  cancel() {
    this.interval?.cancel();
    this.interval = null;
  }
};
async function sleep2(time2) {
  return new Promise((resolve) => {
    timeout(time2, resolve);
  });
}

// launcher/Launcher.tsx
import Adw from "gi://Adw";
function Launcher({ gdkmonitor, mode, setMode }) {
  const [searchValue, setSearchValue] = createState(null);
  const [pressedKey, setPressedKey] = createState(null);
  const [closed, setClosed] = createState(false);
  let entry = null;
  mode.subscribe(() => {
    if (mode.get() !== "closed" && entry) entry.grab_focus();
  });
  const [enterPressed, setEnterPressed] = createState(false);
  const maxWidth = gdkmonitor.geometry.width * 0.5;
  const maxHeight = gdkmonitor.geometry.height * 0.5;
  function close() {
    setMode("closed");
    setSearchValue(null);
    if (entry) entry.set_text("");
  }
  function emptySearch() {
    setSearchValue(null);
    if (entry) entry.set_text("");
  }
  function handleKeyPress(_e, keyval, _keycode, modifier) {
    setPressedKey({
      keyval,
      modifier
    });
  }
  function handleInputChange() {
    if (!entry) return;
    const text = entry.get_text();
    setSearchValue(text.length > 0 ? text : null);
  }
  function handleInputEnter() {
    setEnterPressed(true);
    setEnterPressed(false);
  }
  return /* @__PURE__ */ jsxs(
    Gtk.Window,
    {
      class: "launcher",
      title: "AGS Launcher",
      display: gdkmonitor.display,
      resizable: false,
      onCloseRequest: () => {
        close();
        setClosed(true);
        setClosed(false);
      },
      $: (self) => {
        const revealer = self.child;
        const transitionDuration = revealer.get_transition_duration();
        mode.subscribe(async () => {
          const classes = self.cssClasses;
          const visible = mode.get() !== "closed";
          if (!visible) {
            revealer.set_reveal_child(visible);
            self.set_css_classes(
              classes.filter((className) => className !== "open")
            );
            await sleep2(transitionDuration);
          }
          self.set_visible(visible);
          if (visible) {
            revealer.set_reveal_child(visible);
            self.set_css_classes([...classes, "open"]);
          }
        });
      },
      children: [
        /* @__PURE__ */ jsx(Gtk.EventControllerKey, { onKeyPressed: handleKeyPress }),
        /* @__PURE__ */ jsx(
          "revealer",
          {
            transitionDuration: config(
              (cfg) => cfg.animationsDuration?.launcher ?? defaultConfig.animationsDuration.launcher
            ),
            transitionType: config(
              (cfg) => Gtk.RevealerTransitionType[cfg.animationsType?.launcher ?? defaultConfig.animationsType.launcher]
            ),
            children: /* @__PURE__ */ jsx(
              Adw.Clamp,
              {
                orientation: Gtk.Orientation.VERTICAL,
                maximumSize: maxHeight,
                children: /* @__PURE__ */ jsx(Adw.Clamp, { maximumSize: maxWidth, children: /* @__PURE__ */ jsxs(
                  "box",
                  {
                    widthRequest: maxWidth,
                    heightRequest: maxHeight,
                    hexpand: true,
                    class: "launcher-container",
                    orientation: Gtk.Orientation.VERTICAL,
                    marginTop: barHeight,
                    children: [
                      /* @__PURE__ */ jsx(
                        "entry",
                        {
                          class: "search-entry",
                          onNotifyCursorPosition: handleInputChange,
                          onActivate: handleInputEnter,
                          $: (self) => {
                            entry = self;
                          }
                        }
                      ),
                      /* @__PURE__ */ jsx(Gtk.Separator, { visible: true }),
                      /* @__PURE__ */ jsx(
                        "scrolledwindow",
                        {
                          propagateNaturalHeight: true,
                          propagateNaturalWidth: true,
                          hscrollbarPolicy: Gtk.PolicyType.NEVER,
                          children: /* @__PURE__ */ jsxs("box", { orientation: Gtk.Orientation.VERTICAL, children: [
                            /* @__PURE__ */ jsx(
                              AppMode,
                              {
                                close,
                                searchValue,
                                enterPressed,
                                pressedKey,
                                entry,
                                visible: mode(
                                  (currentMode) => currentMode === "app"
                                ),
                                closed
                              }
                            ),
                            /* @__PURE__ */ jsx(
                              CalculatorMode,
                              {
                                close,
                                searchValue,
                                emptySearch,
                                enterPressed,
                                pressedKey,
                                visible: mode(
                                  (currentMode) => currentMode === "calculator"
                                ),
                                closed
                              }
                            )
                          ] })
                        }
                      )
                    ]
                  }
                ) })
              }
            )
          }
        )
      ]
    }
  );
}

// util/notif.ts
import Notifd2 from "gi://AstalNotifd";
function urgency(urgency2) {
  const { LOW, CRITICAL } = Notifd2.Urgency;
  switch (urgency2) {
    case LOW: {
      return "low";
    }
    case CRITICAL: {
      return "critical";
    }
    default: {
      return "normal";
    }
  }
}

// notifications/components/Notification.tsx
import Pango from "gi://Pango";
import Gtk5 from "gi://Gtk";
import Adw2 from "gi://Adw";
function Notification({
  notification,
  onHide,
  isNotificationCenter = false
}) {
  const notificationActions = notification.actions.filter(
    (action) => action.id !== "default"
  );
  const defaultAction = notification.actions.find(
    (action) => action.id === "default"
  );
  const expireTimeout = notification.expireTimeout === -1 ? config.get().timeouts?.defaultNotificationExpire ?? defaultConfig.timeouts.defaultNotificationExpire : notification.expireTimeout;
  const timer = new Timer(expireTimeout);
  const [progressBarFraction, setProgressBarFraction] = createState(1);
  const [isHidden, setIsHidden] = createState(false);
  timer.subscribe(async () => {
    setProgressBarFraction(1 - timer.timeLeft / timer.timeout);
    if (timer.timeLeft <= 0) {
      setIsHidden(true);
      await sleep2(
        (config.get().animationsDuration?.notification ?? defaultConfig.animationsDuration.notification) - (config.get().animationsDuration?.notification ?? defaultConfig.animationsDuration.notification) * 0.6
      );
      onHide(notification);
    }
  });
  if (isNotificationCenter) {
    timer.cancel();
  }
  function handleLeftClick() {
    if (!defaultAction) return;
    notification.invoke(defaultAction.id);
    if (!isNotificationCenter) timer.cancel();
  }
  function handleRightClick() {
    onHide(notification);
    if (!isNotificationCenter) timer.cancel();
  }
  function handleMiddleClick() {
    notification.dismiss();
    if (!isNotificationCenter) timer.cancel();
  }
  function handleHoverEnter() {
    timer.isPaused = true;
  }
  function handleHoverLeave() {
    timer.isPaused = false;
  }
  function getLeftClickComponent(main) {
    return /* @__PURE__ */ jsx(
      Gtk5.GestureClick,
      {
        button: Gdk.BUTTON_PRIMARY,
        onPressed: handleLeftClick,
        propagationPhase: main ? Gtk5.PropagationPhase.TARGET : void 0
      }
    );
  }
  return /* @__PURE__ */ jsx(
    "revealer",
    {
      transitionDuration: config(
        (cfg) => cfg.animationsDuration?.notification ?? defaultConfig.animationsDuration.notification
      ),
      transitionType: isNotificationCenter ? Gtk5.RevealerTransitionType.NONE : Gtk5.RevealerTransitionType.SLIDE_LEFT,
      $: async (self) => {
        if (isNotificationCenter) self.set_reveal_child(true);
        else {
          await sleep2(100);
          self.set_reveal_child(!isHidden.get());
        }
        const unsubscribe = isHidden.subscribe(() => {
          const hidden = isHidden.get();
          if (hidden) {
            self.set_reveal_child(false);
            unsubscribe();
          }
        });
      },
      children: /* @__PURE__ */ jsx(Adw2.Clamp, { maximumSize: 530, children: /* @__PURE__ */ jsxs(
        "box",
        {
          cursor: defaultAction ? Gdk.Cursor.new_from_name("pointer", null) : void 0,
          widthRequest: 530,
          class: `notification ${urgency(notification.urgency)} ${isNotificationCenter ? "center" : ""}`,
          orientation: Gtk5.Orientation.VERTICAL,
          children: [
            !isNotificationCenter && /* @__PURE__ */ jsx(
              Gtk5.EventControllerMotion,
              {
                onEnter: handleHoverEnter,
                onLeave: handleHoverLeave
              }
            ),
            getLeftClickComponent(true),
            /* @__PURE__ */ jsx(
              Gtk5.GestureClick,
              {
                button: Gdk.BUTTON_SECONDARY,
                onPressed: handleRightClick
              }
            ),
            /* @__PURE__ */ jsx(
              Gtk5.GestureClick,
              {
                button: Gdk.BUTTON_MIDDLE,
                onPressed: handleMiddleClick
              }
            ),
            /* @__PURE__ */ jsxs("box", { class: "header", children: [
              getLeftClickComponent(),
              (notification.appIcon || isIcon(notification.desktopEntry)) && /* @__PURE__ */ jsx(
                "image",
                {
                  class: "app-icon",
                  visible: Boolean(
                    notification.appIcon || notification.desktopEntry
                  ),
                  iconName: notification.appIcon || notification.desktopEntry
                }
              ),
              /* @__PURE__ */ jsx(
                "label",
                {
                  class: "app-name",
                  halign: Gtk5.Align.START,
                  ellipsize: Pango.EllipsizeMode.END,
                  label: notification.appName || "Unknown"
                }
              ),
              /* @__PURE__ */ jsx(
                "label",
                {
                  class: "time",
                  hexpand: true,
                  halign: Gtk5.Align.END,
                  label: time(notification.time)
                }
              )
            ] }),
            /* @__PURE__ */ jsx(Gtk5.Separator, { visible: true }),
            /* @__PURE__ */ jsxs("box", { class: "content", children: [
              getLeftClickComponent(),
              notification.image && fileExists(notification.image) && /* @__PURE__ */ jsx(
                "image",
                {
                  valign: Gtk5.Align.START,
                  class: "image",
                  file: notification.image
                }
              ),
              notification.image && isIcon(notification.image) && /* @__PURE__ */ jsx("box", { valign: Gtk5.Align.START, class: "icon-image", children: /* @__PURE__ */ jsx(
                "image",
                {
                  iconName: notification.image,
                  halign: Gtk5.Align.CENTER,
                  valign: Gtk5.Align.CENTER
                }
              ) }),
              /* @__PURE__ */ jsxs("box", { orientation: Gtk5.Orientation.VERTICAL, children: [
                /* @__PURE__ */ jsx(
                  "label",
                  {
                    class: "summary",
                    halign: Gtk5.Align.START,
                    xalign: 0,
                    label: parseMarkdown(
                      escapeMarkup(notification.summary)
                    ),
                    useMarkup: true,
                    ellipsize: Pango.EllipsizeMode.END,
                    wrapMode: Pango.WrapMode.CHAR
                  }
                ),
                notification.body && /* @__PURE__ */ jsx(
                  "label",
                  {
                    class: "body",
                    wrap: true,
                    useMarkup: true,
                    halign: Gtk5.Align.START,
                    wrapMode: Pango.WrapMode.CHAR,
                    xalign: 0,
                    label: parseMarkdown(
                      escapeMarkup(notification.body)
                    )
                  }
                )
              ] })
            ] }),
            notificationActions.length > 0 && /* @__PURE__ */ jsx("box", { class: "actions", children: notificationActions.map(({ label, id }) => /* @__PURE__ */ jsx(
              "button",
              {
                name: "actionButton",
                hexpand: true,
                cursor: Gdk.Cursor.new_from_name(
                  "pointer",
                  null
                ),
                onClicked: () => notification.invoke(id),
                children: /* @__PURE__ */ jsx(
                  "label",
                  {
                    label,
                    halign: Gtk5.Align.CENTER,
                    hexpand: true
                  }
                )
              }
            )) }),
            /* @__PURE__ */ jsx("box", { children: /* @__PURE__ */ jsx(
              Gtk5.ProgressBar,
              {
                visible: !isNotificationCenter,
                class: "progress-bar",
                hexpand: true,
                fraction: progressBarFraction,
                widthRequest: 491,
                halign: Gtk5.Align.CENTER
              }
            ) })
          ]
        }
      ) })
    }
  );
}

// notifications/NotificationCenter.tsx
import Notifd3 from "gi://AstalNotifd";
function NotificationCenter({
  gdkmonitor,
  visible: isVisible,
  setVisible
}) {
  const notifd2 = Notifd3.get_default();
  const notificationCategories = createBinding(
    notifd2,
    "notifications"
  )(transformNotifications);
  const doNotDisturb = createBinding(notifd2, "dont_disturb");
  function transformNotifications(notifs) {
    const notificationList = [];
    for (const notif of notifs) {
      const icon = notif.appIcon || isIcon(notif.desktopEntry) ? notif.appIcon || notif.desktopEntry : null;
      const title = notif.appName || "Unknown";
      const time2 = notif.time;
      const index = notificationList.findIndex((n) => n.title === title);
      if (index >= 0) {
        if (time2 > notificationList[index].latestTimestamp) {
          notificationList[index].latestTimestamp = time2;
        }
        notificationList[index].notifications.push(notif);
      } else {
        notificationList.push({
          icon,
          title,
          latestTimestamp: notif.time,
          notifications: [notif]
        });
      }
    }
    const sortedCategories = notificationList.sort(
      (a, b) => b.latestTimestamp - a.latestTimestamp
    );
    const sortedNotifCategories = sortedCategories.map((category) => ({
      ...category,
      notifications: category.notifications.sort(
        (a, b) => b.time - a.time
      )
    }));
    return sortedNotifCategories;
  }
  function handleExternalClick() {
    setVisible(false);
  }
  function handleEscKey(_e, keyval, _, _mod) {
    if (keyval === Gdk.KEY_Escape) setVisible(false);
  }
  function handleDndSwitch(_switch, state) {
    notifd2.set_dont_disturb(state);
  }
  return /* @__PURE__ */ jsxs(
    Gtk.Window,
    {
      class: "notification-center",
      widthRequest: gdkmonitor.geometry.width,
      heightRequest: gdkmonitor.geometry.height,
      resizable: false,
      valign: Gtk.Align.END,
      title: "AGS Notification Center",
      display: gdkmonitor.display,
      onCloseRequest: () => {
        setVisible(false);
      },
      $: (self) => {
        const revealer = self.child;
        const transitionDuration = revealer.get_transition_duration();
        isVisible.subscribe(async () => {
          const classes = self.cssClasses;
          const visible = isVisible.get();
          if (!visible) {
            revealer.set_reveal_child(visible);
            self.set_css_classes(
              classes.filter((className) => className !== "open")
            );
            await sleep2(transitionDuration);
          }
          self.set_visible(visible);
          if (visible) {
            revealer.set_reveal_child(visible);
            self.set_css_classes([...classes, "open"]);
          }
        });
      },
      children: [
        /* @__PURE__ */ jsx(Gtk.EventControllerKey, { onKeyPressed: handleEscKey }),
        /* @__PURE__ */ jsxs(
          "revealer",
          {
            transitionDuration: config(
              (cfg) => cfg.animationsDuration?.notificationCenter ?? defaultConfig.animationsDuration.notificationCenter
            ),
            transitionType: config(
              (cfg) => Gtk.RevealerTransitionType[cfg.animationsType?.notificationCenter ?? defaultConfig.animationsType.notificationCenter]
            ),
            children: [
              /* @__PURE__ */ jsx(
                Gtk.GestureClick,
                {
                  button: Gdk.BUTTON_PRIMARY,
                  onPressed: handleExternalClick,
                  propagationPhase: Gtk.PropagationPhase.TARGET
                }
              ),
              /* @__PURE__ */ jsx(
                Gtk.GestureClick,
                {
                  button: Gdk.BUTTON_SECONDARY,
                  onPressed: handleExternalClick,
                  propagationPhase: Gtk.PropagationPhase.TARGET
                }
              ),
              /* @__PURE__ */ jsx(
                Gtk.GestureClick,
                {
                  button: Gdk.BUTTON_MIDDLE,
                  onPressed: handleExternalClick,
                  propagationPhase: Gtk.PropagationPhase.TARGET
                }
              ),
              /* @__PURE__ */ jsxs(
                "box",
                {
                  marginTop: barHeight,
                  orientation: Gtk.Orientation.VERTICAL,
                  widthRequest: 540,
                  class: "notification-container",
                  halign: Gtk.Align.END,
                  children: [
                    /* @__PURE__ */ jsxs("box", { class: "header", orientation: Gtk.Orientation.VERTICAL, children: [
                      /* @__PURE__ */ jsxs(
                        "box",
                        {
                          class: "title-container",
                          orientation: Gtk.Orientation.HORIZONTAL,
                          children: [
                            /* @__PURE__ */ jsx("label", { label: "Notifications", class: "title" }),
                            /* @__PURE__ */ jsx("box", { hexpand: true }),
                            /* @__PURE__ */ jsx(
                              "button",
                              {
                                label: "Clear All",
                                class: "dismiss-all",
                                cursor: Gdk.Cursor.new_from_name(
                                  "pointer",
                                  null
                                ),
                                onClicked: () => {
                                  for (const category of notificationCategories.get()) {
                                    for (const notif of category.notifications) {
                                      notif.dismiss();
                                    }
                                  }
                                }
                              }
                            )
                          ]
                        }
                      ),
                      /* @__PURE__ */ jsxs(
                        "box",
                        {
                          class: "dnd-container",
                          orientation: Gtk.Orientation.HORIZONTAL,
                          children: [
                            /* @__PURE__ */ jsx("label", { label: "Do not Disturb", class: "dnd-title" }),
                            /* @__PURE__ */ jsx("box", { hexpand: true }),
                            /* @__PURE__ */ jsx(
                              "switch",
                              {
                                class: "dnd-toggle",
                                onStateSet: handleDndSwitch,
                                state: doNotDisturb,
                                active: doNotDisturb,
                                cursor: Gdk.Cursor.new_from_name(
                                  "pointer",
                                  null
                                )
                              }
                            )
                          ]
                        }
                      )
                    ] }),
                    /* @__PURE__ */ jsx(Gtk.Separator, { class: "header-separator", visible: true }),
                    /* @__PURE__ */ jsx(
                      "scrolledwindow",
                      {
                        propagateNaturalHeight: true,
                        propagateNaturalWidth: true,
                        hscrollbarPolicy: Gtk.PolicyType.NEVER,
                        children: /* @__PURE__ */ jsx("box", { orientation: Gtk.Orientation.VERTICAL, children: /* @__PURE__ */ jsx(For, { each: notificationCategories, children: (notificationCategory, index) => /* @__PURE__ */ jsxs(
                          "box",
                          {
                            class: "category",
                            orientation: Gtk.Orientation.VERTICAL,
                            children: [
                              /* @__PURE__ */ jsxs(
                                "box",
                                {
                                  class: "category-header",
                                  orientation: Gtk.Orientation.HORIZONTAL,
                                  children: [
                                    notificationCategory.icon && /* @__PURE__ */ jsx(
                                      "image",
                                      {
                                        class: "category-icon",
                                        visible: Boolean(
                                          notificationCategory.icon
                                        ),
                                        iconName: notificationCategory.icon,
                                        pixelSize: 32
                                      }
                                    ),
                                    /* @__PURE__ */ jsx(
                                      "label",
                                      {
                                        class: "category-title",
                                        label: notificationCategory.title
                                      }
                                    ),
                                    /* @__PURE__ */ jsx("box", { hexpand: true }),
                                    /* @__PURE__ */ jsx(
                                      "button",
                                      {
                                        class: "dismiss-category",
                                        label: "X",
                                        cursor: Gdk.Cursor.new_from_name(
                                          "pointer",
                                          null
                                        ),
                                        onClicked: () => {
                                          for (const notif of notificationCategory.notifications) {
                                            notif.dismiss();
                                          }
                                        }
                                      }
                                    )
                                  ]
                                }
                              ),
                              notificationCategory.notifications.map(
                                (notif) => /* @__PURE__ */ jsx(
                                  Notification,
                                  {
                                    notification: notif,
                                    onHide: (notif2) => notif2.dismiss(),
                                    isNotificationCenter: true
                                  }
                                )
                              ),
                              index.get() !== notificationCategories.get().length - 1 && /* @__PURE__ */ jsx(
                                Gtk.Separator,
                                {
                                  class: "category-separator",
                                  visible: true
                                }
                              )
                            ]
                          }
                        ) }) })
                      }
                    )
                  ]
                }
              )
            ]
          }
        )
      ]
    }
  );
}

// notifications/NotificationPopup.tsx
import Notifd4 from "gi://AstalNotifd";
import giCairo from "gi://cairo";
function NotificationPopups({ gdkmonitor, hidden }) {
  const notifd2 = Notifd4.get_default();
  notifd2.set_ignore_timeout(true);
  const maxHeight = gdkmonitor.geometry.height * 0.5;
  const [notifications, setNotifications] = createState(
    []
  );
  const doNotDisturb = createBinding(notifd2, "dont_disturb");
  const notifiedHandler = notifd2.connect("notified", (_, id, replaced) => {
    const notification = notifd2.get_notification(id);
    if (replaced) {
      setNotifications((notifs) => {
        if (notifs.find((notif) => notif.id === id))
          return notifs.map(
            (notif) => notif.id === id ? notification : notif
          );
        return [notification, ...notifs];
      });
    } else {
      setNotifications((notifs) => [notification, ...notifs]);
    }
  });
  const resolvedHandler = notifd2.connect("resolved", (_, id) => {
    setNotifications((notifs) => notifs.filter((notif) => notif.id !== id));
  });
  onCleanup(() => {
    notifd2.disconnect(notifiedHandler);
    notifd2.disconnect(resolvedHandler);
  });
  function handleHideNotification(notification) {
    if (notification.transient) return notification.dismiss();
    setNotifications(
      (notifications2) => notifications2.filter((notif) => notif.id !== notification.id)
    );
  }
  let notificationContainer;
  let window;
  notifications.subscribe(() => {
    timeout(400, () => {
      if (!window || !notificationContainer) return;
      const [_success, bounds] = notificationContainer.compute_bounds(window);
      const height = bounds.get_height();
      const width = bounds.get_width();
      const x = bounds.get_x();
      const y = bounds.get_y();
      const surface = window.get_surface();
      const region = new giCairo.Region();
      region.unionRectangle(
        new giCairo.Rectangle({
          x,
          y,
          height,
          width
        })
      );
      surface?.set_input_region(region);
    });
  });
  const windowVisibility = createComputed(
    [hidden, notifications, doNotDisturb],
    (hidden2, notifications2, doNotDisturb2) => {
      return !hidden2 && !doNotDisturb2 && notifications2.length > 0;
    }
  );
  return /* @__PURE__ */ jsx(
    "window",
    {
      class: "notification-popups",
      gdkmonitor,
      visible: windowVisibility,
      anchor: Astal.WindowAnchor.TOP | Astal.WindowAnchor.RIGHT,
      defaultHeight: 1,
      $: (self) => {
        window = self;
      },
      children: /* @__PURE__ */ jsx(
        "scrolledwindow",
        {
          propagateNaturalHeight: true,
          propagateNaturalWidth: true,
          hscrollbarPolicy: Gtk.PolicyType.NEVER,
          maxContentHeight: maxHeight,
          heightRequest: maxHeight,
          children: /* @__PURE__ */ jsx(
            "box",
            {
              orientation: Gtk.Orientation.VERTICAL,
              $: (self) => {
                notificationContainer = self;
              },
              vexpand: false,
              valign: Gtk.Align.START,
              children: /* @__PURE__ */ jsx(For, { each: notifications, children: (notification) => /* @__PURE__ */ jsx(
                Notification,
                {
                  notification,
                  onHide: handleHideNotification
                }
              ) })
            }
          )
        }
      )
    }
  );
}

// sessionMenu/SessionMenu.tsx
import Pango2 from "gi://Pango";
import Adw3 from "gi://Adw";
function SessionMenu({
  gdkmonitor,
  visible: isVisible,
  setVisible
}) {
  function handleExternalClick() {
    setVisible(false);
  }
  function handleEscKey(_e, keyval, _, _mod) {
    if (keyval === Gdk.KEY_Escape) setVisible(false);
  }
  function transformConfigHeight(cfg) {
    return (cfg.sessionMenu?.buttonHeight ?? defaultConfig.sessionMenu.buttonHeight) * 2 + (cfg.sessionMenu?.buttonGap ?? defaultConfig.sessionMenu.buttonGap);
  }
  function transformConfigWidth(cfg) {
    return (cfg.sessionMenu?.buttonWidth ?? defaultConfig.sessionMenu.buttonWidth) * 4 + (cfg.sessionMenu?.buttonGap ?? defaultConfig.sessionMenu.buttonGap) * 3;
  }
  return /* @__PURE__ */ jsxs(
    Gtk.Window,
    {
      widthRequest: gdkmonitor.geometry.width,
      heightRequest: gdkmonitor.geometry.height,
      resizable: false,
      class: "session-menu",
      title: "AGS Session Menu",
      display: gdkmonitor.display,
      onCloseRequest: () => {
        setVisible(false);
      },
      $: (self) => {
        const revealer = self.child;
        const transitionDuration = revealer.get_transition_duration();
        isVisible.subscribe(async () => {
          const classes = self.cssClasses;
          const visible = isVisible.get();
          if (!visible) {
            revealer.set_reveal_child(visible);
            self.set_css_classes(
              classes.filter((className) => className !== "open")
            );
            await sleep2(transitionDuration);
          }
          self.set_visible(visible);
          if (visible) {
            revealer.set_reveal_child(visible);
            self.set_css_classes([...classes, "open"]);
          }
        });
      },
      children: [
        /* @__PURE__ */ jsx(Gtk.EventControllerKey, { onKeyPressed: handleEscKey }),
        /* @__PURE__ */ jsxs(
          "revealer",
          {
            transitionDuration: config(
              (cfg) => cfg.animationsDuration?.sessionMenu ?? defaultConfig.animationsDuration.sessionMenu
            ),
            transitionType: config(
              (cfg) => Gtk.RevealerTransitionType[cfg.animationsType?.sessionMenu ?? defaultConfig.animationsType.sessionMenu]
            ),
            children: [
              /* @__PURE__ */ jsx(
                Gtk.GestureClick,
                {
                  button: Gdk.BUTTON_PRIMARY,
                  onPressed: handleExternalClick,
                  propagationPhase: Gtk.PropagationPhase.TARGET
                }
              ),
              /* @__PURE__ */ jsx(
                Adw3.Clamp,
                {
                  orientation: Gtk.Orientation.VERTICAL,
                  maximumSize: config(transformConfigHeight),
                  marginTop: barHeight,
                  children: /* @__PURE__ */ jsx(
                    Adw3.Clamp,
                    {
                      maximumSize: config(transformConfigWidth),
                      hexpand: true,
                      vexpand: true,
                      children: /* @__PURE__ */ jsxs(
                        "box",
                        {
                          orientation: Gtk.Orientation.VERTICAL,
                          spacing: config(
                            (cfg) => cfg.sessionMenu?.buttonGap ?? defaultConfig.sessionMenu.buttonGap
                          ),
                          children: [
                            /* @__PURE__ */ jsxs(
                              "box",
                              {
                                spacing: config(
                                  (cfg) => cfg.sessionMenu?.buttonGap ?? defaultConfig.sessionMenu.buttonGap
                                ),
                                children: [
                                  /* @__PURE__ */ jsx(
                                    "button",
                                    {
                                      cursor: Gdk.Cursor.new_from_name(
                                        "pointer",
                                        null
                                      ),
                                      widthRequest: config(
                                        (cfg) => cfg.sessionMenu?.buttonWidth ?? defaultConfig.sessionMenu.buttonWidth
                                      ),
                                      heightRequest: config(
                                        (cfg) => cfg.sessionMenu?.buttonHeight ?? defaultConfig.sessionMenu.buttonHeight
                                      ),
                                      onClicked: () => {
                                        execAsync("loginctl lock-session");
                                        setVisible(false);
                                      },
                                      children: /* @__PURE__ */ jsxs(
                                        "box",
                                        {
                                          orientation: Gtk.Orientation.VERTICAL,
                                          valign: Gtk.Align.CENTER,
                                          children: [
                                            /* @__PURE__ */ jsx(
                                              "image",
                                              {
                                                pixelSize: 60,
                                                iconName: "mi-lock-symbolic"
                                              }
                                            ),
                                            /* @__PURE__ */ jsx(
                                              "label",
                                              {
                                                wrapMode: Pango2.WrapMode.WORD,
                                                justify: Gtk.Justification.CENTER,
                                                label: "Lock"
                                              }
                                            )
                                          ]
                                        }
                                      )
                                    }
                                  ),
                                  /* @__PURE__ */ jsx(
                                    "button",
                                    {
                                      cursor: Gdk.Cursor.new_from_name(
                                        "pointer",
                                        null
                                      ),
                                      widthRequest: config(
                                        (cfg) => cfg.sessionMenu?.buttonWidth ?? defaultConfig.sessionMenu.buttonWidth
                                      ),
                                      heightRequest: config(
                                        (cfg) => cfg.sessionMenu?.buttonHeight ?? defaultConfig.sessionMenu.buttonHeight
                                      ),
                                      onClicked: () => {
                                        execAsync("systemctl suspend");
                                        setVisible(false);
                                      },
                                      children: /* @__PURE__ */ jsxs(
                                        "box",
                                        {
                                          orientation: Gtk.Orientation.VERTICAL,
                                          valign: Gtk.Align.CENTER,
                                          children: [
                                            /* @__PURE__ */ jsx(
                                              "image",
                                              {
                                                pixelSize: 60,
                                                iconName: "mi-dark-mode-symbolic"
                                              }
                                            ),
                                            /* @__PURE__ */ jsx(
                                              "label",
                                              {
                                                wrapMode: Pango2.WrapMode.WORD,
                                                justify: Gtk.Justification.CENTER,
                                                label: "Sleep"
                                              }
                                            )
                                          ]
                                        }
                                      )
                                    }
                                  ),
                                  /* @__PURE__ */ jsx(
                                    "button",
                                    {
                                      cursor: Gdk.Cursor.new_from_name(
                                        "pointer",
                                        null
                                      ),
                                      widthRequest: config(
                                        (cfg) => cfg.sessionMenu?.buttonWidth ?? defaultConfig.sessionMenu.buttonWidth
                                      ),
                                      heightRequest: config(
                                        (cfg) => cfg.sessionMenu?.buttonHeight ?? defaultConfig.sessionMenu.buttonHeight
                                      ),
                                      onClicked: () => {
                                        execAsync("pkill Hyprland");
                                      },
                                      children: /* @__PURE__ */ jsxs(
                                        "box",
                                        {
                                          orientation: Gtk.Orientation.VERTICAL,
                                          valign: Gtk.Align.CENTER,
                                          children: [
                                            /* @__PURE__ */ jsx(
                                              "image",
                                              {
                                                pixelSize: 60,
                                                iconName: "mi-logout-symbolic"
                                              }
                                            ),
                                            /* @__PURE__ */ jsx(
                                              "label",
                                              {
                                                wrapMode: Pango2.WrapMode.WORD,
                                                justify: Gtk.Justification.CENTER,
                                                label: "Logout"
                                              }
                                            )
                                          ]
                                        }
                                      )
                                    }
                                  ),
                                  /* @__PURE__ */ jsx(
                                    "button",
                                    {
                                      cursor: Gdk.Cursor.new_from_name(
                                        "pointer",
                                        null
                                      ),
                                      widthRequest: config(
                                        (cfg) => cfg.sessionMenu?.buttonWidth ?? defaultConfig.sessionMenu.buttonWidth
                                      ),
                                      heightRequest: config(
                                        (cfg) => cfg.sessionMenu?.buttonHeight ?? defaultConfig.sessionMenu.buttonHeight
                                      ),
                                      onClicked: () => {
                                        execAsync("kitty btop");
                                      },
                                      children: /* @__PURE__ */ jsxs(
                                        "box",
                                        {
                                          orientation: Gtk.Orientation.VERTICAL,
                                          valign: Gtk.Align.CENTER,
                                          children: [
                                            /* @__PURE__ */ jsx(
                                              "image",
                                              {
                                                pixelSize: 60,
                                                iconName: "mi-browse-activity-symbolic"
                                              }
                                            ),
                                            /* @__PURE__ */ jsx(
                                              "label",
                                              {
                                                wrapMode: Pango2.WrapMode.WORD,
                                                justify: Gtk.Justification.CENTER,
                                                label: "Task Manager"
                                              }
                                            )
                                          ]
                                        }
                                      )
                                    }
                                  )
                                ]
                              }
                            ),
                            /* @__PURE__ */ jsxs(
                              "box",
                              {
                                spacing: config(
                                  (cfg) => cfg.sessionMenu?.buttonGap ?? defaultConfig.sessionMenu.buttonGap
                                ),
                                children: [
                                  /* @__PURE__ */ jsx(
                                    "button",
                                    {
                                      cursor: Gdk.Cursor.new_from_name(
                                        "pointer",
                                        null
                                      ),
                                      widthRequest: config(
                                        (cfg) => cfg.sessionMenu?.buttonWidth ?? defaultConfig.sessionMenu.buttonWidth
                                      ),
                                      heightRequest: config(
                                        (cfg) => cfg.sessionMenu?.buttonHeight ?? defaultConfig.sessionMenu.buttonHeight
                                      ),
                                      onClicked: () => {
                                        execAsync("systemctl hibernate");
                                      },
                                      children: /* @__PURE__ */ jsxs(
                                        "box",
                                        {
                                          orientation: Gtk.Orientation.VERTICAL,
                                          valign: Gtk.Align.CENTER,
                                          children: [
                                            /* @__PURE__ */ jsx(
                                              "image",
                                              {
                                                pixelSize: 60,
                                                iconName: "mi-downloading-symbolic"
                                              }
                                            ),
                                            /* @__PURE__ */ jsx(
                                              "label",
                                              {
                                                wrapMode: Pango2.WrapMode.WORD,
                                                justify: Gtk.Justification.CENTER,
                                                label: "Hibernate"
                                              }
                                            )
                                          ]
                                        }
                                      )
                                    }
                                  ),
                                  /* @__PURE__ */ jsx(
                                    "button",
                                    {
                                      cursor: Gdk.Cursor.new_from_name(
                                        "pointer",
                                        null
                                      ),
                                      widthRequest: config(
                                        (cfg) => cfg.sessionMenu?.buttonWidth ?? defaultConfig.sessionMenu.buttonWidth
                                      ),
                                      heightRequest: config(
                                        (cfg) => cfg.sessionMenu?.buttonHeight ?? defaultConfig.sessionMenu.buttonHeight
                                      ),
                                      onClicked: () => {
                                        execAsync("systemctl poweroff");
                                      },
                                      children: /* @__PURE__ */ jsxs(
                                        "box",
                                        {
                                          orientation: Gtk.Orientation.VERTICAL,
                                          valign: Gtk.Align.CENTER,
                                          children: [
                                            /* @__PURE__ */ jsx(
                                              "image",
                                              {
                                                pixelSize: 60,
                                                iconName: "mi-power-settings-new-symbolic"
                                              }
                                            ),
                                            /* @__PURE__ */ jsx(
                                              "label",
                                              {
                                                wrapMode: Pango2.WrapMode.WORD,
                                                justify: Gtk.Justification.CENTER,
                                                label: "Shutdown"
                                              }
                                            )
                                          ]
                                        }
                                      )
                                    }
                                  ),
                                  /* @__PURE__ */ jsx(
                                    "button",
                                    {
                                      cursor: Gdk.Cursor.new_from_name(
                                        "pointer",
                                        null
                                      ),
                                      widthRequest: config(
                                        (cfg) => cfg.sessionMenu?.buttonWidth ?? defaultConfig.sessionMenu.buttonWidth
                                      ),
                                      heightRequest: config(
                                        (cfg) => cfg.sessionMenu?.buttonHeight ?? defaultConfig.sessionMenu.buttonHeight
                                      ),
                                      onClicked: () => {
                                        execAsync("reboot");
                                      },
                                      children: /* @__PURE__ */ jsxs(
                                        "box",
                                        {
                                          orientation: Gtk.Orientation.VERTICAL,
                                          valign: Gtk.Align.CENTER,
                                          children: [
                                            /* @__PURE__ */ jsx(
                                              "image",
                                              {
                                                pixelSize: 60,
                                                iconName: "mi-restart-alt-symbolic"
                                              }
                                            ),
                                            /* @__PURE__ */ jsx(
                                              "label",
                                              {
                                                wrapMode: Pango2.WrapMode.WORD,
                                                justify: Gtk.Justification.CENTER,
                                                label: "Reboot"
                                              }
                                            )
                                          ]
                                        }
                                      )
                                    }
                                  ),
                                  /* @__PURE__ */ jsx(
                                    "button",
                                    {
                                      cursor: Gdk.Cursor.new_from_name(
                                        "pointer",
                                        null
                                      ),
                                      widthRequest: config(
                                        (cfg) => cfg.sessionMenu?.buttonWidth ?? defaultConfig.sessionMenu.buttonWidth
                                      ),
                                      heightRequest: config(
                                        (cfg) => cfg.sessionMenu?.buttonHeight ?? defaultConfig.sessionMenu.buttonHeight
                                      ),
                                      onClicked: () => {
                                        execAsync(
                                          "systemctl reboot --firmware-setup"
                                        );
                                      },
                                      children: /* @__PURE__ */ jsxs(
                                        "box",
                                        {
                                          orientation: Gtk.Orientation.VERTICAL,
                                          valign: Gtk.Align.CENTER,
                                          children: [
                                            /* @__PURE__ */ jsx(
                                              "image",
                                              {
                                                pixelSize: 60,
                                                iconName: "mi-settings-applications-symbolic"
                                              }
                                            ),
                                            /* @__PURE__ */ jsx(
                                              "label",
                                              {
                                                wrap: true,
                                                wrapMode: Pango2.WrapMode.WORD,
                                                justify: Gtk.Justification.CENTER,
                                                label: "UEFI"
                                              }
                                            )
                                          ]
                                        }
                                      )
                                    }
                                  )
                                ]
                              }
                            )
                          ]
                        }
                      )
                    }
                  )
                }
              )
            ]
          }
        )
      ]
    }
  );
}

// ../../../../../nix/store/ybmnrn9psssjab9md9mpvd7v8ybvjzcy-ags-js-lib-3.0.0/share/ags/js/gnim/src/gobject.ts
import GObject6 from "gi://GObject";
import GLib8 from "gi://GLib";
var priv = Symbol("gobject private");
var { defineProperty, fromEntries, entries } = Object;
var { Object: GObj, registerClass } = GObject6;
var SignalFlags = GObject6.SignalFlags;
var AccumulatorType = GObject6.AccumulatorType;
var ParamSpec = GObject6.ParamSpec;
var ParamFlags = GObject6.ParamFlags;
var MAXINT = 2 ** 31 - 1;
var MININT = -(2 ** 31);
var MAXUINT = 2 ** 32 - 1;
var MAXFLOAT = 34028235e31;
var MINFLOAT = -34028235e31;
var MININT64 = Number.MIN_SAFE_INTEGER;
var MAXINT64 = Number.MAX_SAFE_INTEGER;
function pspecFromGType(type, name, flags) {
  switch (type) {
    case GObject6.TYPE_BOOLEAN:
      return ParamSpec.boolean(name, "", "", flags, false);
    case GObject6.TYPE_STRING:
      return ParamSpec.string(name, "", "", flags, "");
    case GObject6.TYPE_INT:
      return ParamSpec.int(name, "", "", flags, MININT, MAXINT, 0);
    case GObject6.TYPE_UINT:
      return ParamSpec.uint(name, "", "", flags, 0, MAXUINT, 0);
    case GObject6.TYPE_INT64:
      return ParamSpec.int64(name, "", "", flags, MININT64, MAXINT64, 0);
    case GObject6.TYPE_UINT64:
      return ParamSpec.uint64(name, "", "", flags, 0, Number.MAX_SAFE_INTEGER, 0);
    case GObject6.TYPE_FLOAT:
      return ParamSpec.float(name, "", "", flags, MINFLOAT, MAXFLOAT, 0);
    case GObject6.TYPE_DOUBLE:
      return ParamSpec.double(name, "", "", flags, Number.MIN_VALUE, Number.MIN_VALUE, 0);
    case GObject6.TYPE_JSOBJECT:
      return ParamSpec.jsobject(name, "", "", flags);
    case GObject6.TYPE_VARIANT:
      return ParamSpec.object(name, "", "", flags, GLib8.Variant);
    case GObject6.TYPE_ENUM:
    case GObject6.TYPE_INTERFACE:
    case GObject6.TYPE_BOXED:
    case GObject6.TYPE_POINTER:
    case GObject6.TYPE_PARAM:
    case GObject6.type_from_name("GType"):
      throw Error(`cannot guess ParamSpec from GType "${type}"`);
    case GObject6.TYPE_OBJECT:
    default:
      return ParamSpec.object(name, "", "", flags, type);
  }
}
function pspec(name, flags, declaration) {
  if (declaration instanceof ParamSpec) return declaration;
  if (declaration === Object || declaration === Function || declaration === Array) {
    return ParamSpec.jsobject(name, "", "", flags);
  }
  if (declaration === String) {
    return ParamSpec.string(name, "", "", flags, "");
  }
  if (declaration === Number) {
    return ParamSpec.double(name, "", "", flags, -Number.MAX_VALUE, Number.MAX_VALUE, 0);
  }
  if (declaration === Boolean) {
    return ParamSpec.boolean(name, "", "", flags, false);
  }
  if ("$gtype" in declaration) {
    return pspecFromGType(declaration.$gtype, name, flags);
  }
  if (typeof declaration === "function") {
    return declaration(name, flags);
  }
  throw Error("invalid PropertyTypeDeclaration");
}
function register(options = {}) {
  return function(cls, ctx) {
    const t = options.Template;
    if (typeof t === "string" && !t.startsWith("resource://") && !t.startsWith("file://")) {
      options.Template = new TextEncoder().encode(t);
    }
    const meta = ctx.metadata;
    const props = fromEntries(
      entries(meta.properties ?? {}).map(([fieldName, { flags, type }]) => {
        const key = kebabify(fieldName);
        const spec = pspec(key, flags, type);
        return [key, spec];
      })
    );
    const signals = fromEntries(
      entries(meta.signals ?? {}).map(([signalName, { default: def, method, ...signal }]) => {
        if (def) {
          defineProperty(cls.prototype, `on_${signalName.replaceAll("-", "_")}`, {
            enumerable: false,
            configurable: false,
            value: method
          });
        }
        return [signalName, signal];
      })
    );
    delete meta.properties;
    delete meta.signals;
    registerClass({ ...options, Properties: props, Signals: signals }, cls);
  };
}
Function.$gtype = Object.$gtype;
Array.$gtype = Object.$gtype;

// app.tsx
import Notifd5 from "gi://AstalNotifd";

// sass:/home/stef/code/widgets/desktop-shell/style.scss
var style_default = "* {\n  font-family: Lexend, FiraCodeNerdFont, MapleMono, JetBrainsMono NFM, Font Awesome, sans-serif;\n  font-size: 14px;\n  color: #cad3f5;\n}\n\ntooltip {\n  background: #1e2030;\n  border-radius: 15px;\n}\n\ntooltip label {\n  color: #cad3f5;\n}\n\nbutton {\n  border-radius: 8px;\n  background-image: unset;\n  background-color: #1e2030;\n  outline-color: #494d64;\n  transition: background-color 0.3s ease-in-out;\n}\n\nbutton:hover {\n  background-color: alpha(#1e2030,0.6);\n}\n\ncheck {\n  background-color: #363a4f;\n  background-image: unset;\n  border-radius: 6px;\n  margin-right: 6px;\n  border-color: #1e2030;\n}\n\ncheck:hover {\n  background-color: alpha(#363a4f,0.6);\n}\n\ncheck:checked {\n  background-color: #5b6078;\n  color: #cad3f5;\n}\n\ncheck:checked:hover {\n  background-color: alpha(#5b6078,0.6);\n}\n\npopover {\n  opacity: 0;\n  transition-property: opacity;\n  transition-duration: 0.3s;\n  transition-timing-function: ease-in-out;\n}\npopover arrow,\npopover contents {\n  background-color: #1e2030;\n}\npopover button {\n  background-color: #24273a;\n}\npopover button:hover {\n  background-color: alpha(#24273a,0.6);\n}\npopover.open {\n  opacity: 1;\n}\n\nscrolledwindow scrollbar {\n  background-color: alpha(#000000,0.2);\n  border-radius: 20px;\n}\nscrolledwindow scrollbar trough {\n  margin: 1px;\n  background-color: alpha(#363a4f,0.1);\n}\nscrolledwindow scrollbar trough slider {\n  background-color: alpha(#8087a2,0.6);\n}\nscrolledwindow scrollbar trough:hover {\n  background-color: alpha(#363a4f,0.2);\n}\nscrolledwindow scrollbar trough:hover slider {\n  background-color: alpha(#8087a2,0.3);\n}\nscrolledwindow scrollbar trough:hover slider:hover {\n  background-color: alpha(#8087a2,0.4);\n}\nscrolledwindow scrollbar trough:hover slider:active {\n  background-color: #363a4f;\n}\n\n.notification {\n  border-radius: 13px;\n  background-color: #24273a;\n  margin: 0.5rem 1rem 0.5rem 1rem;\n  box-shadow: 2px 3px 8px 0 alpha(black,0.4);\n  border: 1pt solid alpha(#24273a,0.03);\n}\n.notification.center {\n  margin-left: 0;\n  margin-right: 0;\n}\n.notification.critical {\n  border: 1pt solid alpha(#ed8796,0.4);\n}\n.notification.critical .header .app-name {\n  color: alpha(#ed8796,0.8);\n}\n.notification.critical .header .app-icon {\n  color: alpha(#ed8796,0.6);\n}\n.notification .header {\n  padding: 0.5rem;\n  color: alpha(#a5adcb,0.5);\n}\n.notification .header .app-icon {\n  margin: 0 0.4rem;\n}\n.notification .header .app-name {\n  margin-right: 0.3rem;\n  font-weight: bold;\n}\n.notification .header .app-name:first-child {\n  margin-left: 0.4rem;\n}\n.notification .header .time {\n  margin: 0 0.4rem;\n}\n.notification separator {\n  margin: 0 0.4rem;\n  background-color: alpha(#6e738d,0.1);\n}\n.notification .content {\n  margin: 1rem;\n  margin-top: 0.5rem;\n}\n.notification .content .summary {\n  font-size: 1.2em;\n  color: #cad3f5;\n}\n.notification .content .body {\n  color: alpha(#cad3f5,0.8);\n}\n.notification .content .image {\n  border: 1px solid alpha(#6e738d,0.02);\n  margin-right: 0.5rem;\n  border-radius: 9px;\n  min-width: 100px;\n  min-height: 100px;\n  background-size: cover;\n  background-position: center;\n}\n.notification .actions {\n  margin: 1rem;\n  margin-top: 0;\n}\n.notification .actions button {\n  margin: 0 0.3rem;\n}\n.notification .actions button:first-child {\n  margin-left: 0;\n}\n.notification .actions button:last-child {\n  margin-right: 0;\n}\n.notification .progress-bar progress {\n  border-color: #6e738d;\n  background-color: #6e738d;\n}\n.notification .progress-bar trough {\n  border-color: #181926;\n  background-color: #181926;\n}\n.notification .progress-bar progress,\n.notification .progress-bar trough {\n  min-height: 2px;\n}\n\nwindow.bar {\n  background: #24273a;\n  color: #cad3f5;\n  font-weight: bold;\n}\nwindow.bar > centerbox {\n  border-radius: 10px;\n}\nwindow.bar .module-group {\n  margin: 6px;\n  border-radius: 8px;\n  padding: 8px;\n  background-color: #1e2030;\n  margin-right: 2px;\n}\nwindow.bar .module-group.last {\n  margin-right: 0;\n}\nwindow.bar .module-group.end {\n  margin-right: 6px;\n}\nwindow.bar .module-group .cpu-module,\nwindow.bar .module-group .disk-module {\n  margin-right: 12px;\n}\nwindow.bar .notification-module {\n  margin-right: 0;\n}\nwindow.bar .image-cover-art {\n  border-radius: 8px;\n  min-width: 35px;\n  min-height: 35px;\n  background-size: cover;\n  background-position: center;\n}\nwindow.bar .time .calendar {\n  border-width: 0;\n}\nwindow.bar .time .calendar header button {\n  background-color: unset;\n}\nwindow.bar .time .calendar header button:hover {\n  background-color: alpha(#181926,0.6);\n  background-image: unset;\n}\nwindow.bar .time .calendar grid .day-number {\n  border-radius: 20px;\n  outline-color: #181926;\n}\nwindow.bar .time .calendar grid .day-number.other-month {\n  color: #5b6078;\n}\nwindow.bar .time .calendar grid .day-number:selected {\n  background-color: #181926;\n}\nwindow.bar .time .calendar grid .day-number.today {\n  background-color: #363a4f;\n}\nwindow.bar .time .calendar grid .day-number:hover {\n  background-color: alpha(#181926,0.5);\n  color: #cad3f5;\n}\nwindow.bar .tray-popover .tray-item .tray-popover-menu modelbutton {\n  background-color: unset;\n  margin-top: 3px;\n  margin-bottom: 3px;\n}\nwindow.bar .tray-popover .tray-item .tray-popover-menu modelbutton:first-child {\n  margin-top: 0;\n}\nwindow.bar .tray-popover .tray-item .tray-popover-menu modelbutton:last-child {\n  margin-bottom: 0;\n}\nwindow.bar .tray-popover .tray-item .tray-popover-menu modelbutton.title {\n  font-weight: bold;\n  margin-bottom: 6px;\n}\nwindow.bar .tray-popover .tray-item .tray-popover-menu modelbutton:hover {\n  background-color: alpha(#24273a,0.8);\n}\nwindow.bar .tray-popover .tray-item .tray-popover-menu separator {\n  margin-top: 6px;\n  margin-bottom: 6px;\n  background-color: alpha(#6e738d,0.5);\n}\nwindow.bar .battery-icon,\nwindow.bar .cpu-icon,\nwindow.bar .disk-icon,\nwindow.bar .media-icon,\nwindow.bar .lyrics-icon,\nwindow.bar .microphone-icon,\nwindow.bar .microphone-bluetooth-icon,\nwindow.bar .network-icon,\nwindow.bar .speaker-icon,\nwindow.bar .speaker-bluetooth-icon,\nwindow.bar .ram-icon,\nwindow.bar .time-icon.clock {\n  margin-right: 6px;\n}\nwindow.bar .time-icon.calendar {\n  margin-right: 6px;\n  margin-left: 6px;\n}\nwindow.bar .notification-icon {\n  margin-right: 12px;\n}\nwindow.bar .notification-icon .icon {\n  margin-right: -8px;\n}\nwindow.bar .notification-icon .unread {\n  color: #ed8796;\n  margin-bottom: 6px;\n}\nwindow.bar .notification-icon.unread {\n  margin-right: 6px;\n}\n\nwindow.notification-popups {\n  all: unset;\n}\n\nwindow.notification-center {\n  background-color: alpha(#000000,0);\n  transition: background-color 0.5s ease-in-out;\n}\nwindow.notification-center.open {\n  background-color: alpha(#000000,0.2);\n}\nwindow.notification-center .notification-container {\n  background-color: alpha(#181926,0.95);\n  border-radius: 15px;\n  padding: 1rem;\n  margin: 1rem;\n  box-shadow: 2px 3px 8px 0 alpha(black,0.4);\n}\nwindow.notification-center .notification-container .header .title-container .dismiss-all {\n  background-color: #24273a;\n}\nwindow.notification-center .notification-container .header .title-container .dismiss-all:hover {\n  background-color: alpha(#24273a,0.6);\n}\nwindow.notification-center .notification-container .header .title-container .title {\n  font-size: 30px;\n  font-weight: bold;\n}\nwindow.notification-center .notification-container .header .dnd-container {\n  margin-top: 10px;\n  margin-bottom: 10px;\n}\nwindow.notification-center .notification-container .header .dnd-container .dnd-title {\n  font-size: 20px;\n  font-weight: bold;\n}\nwindow.notification-center .notification-container .header .dnd-container .dnd-toggle {\n  background-color: #24273a;\n}\nwindow.notification-center .notification-container .header .dnd-container .dnd-toggle:checked {\n  background-color: #6e738d;\n}\nwindow.notification-center .notification-container .header .dnd-container .dnd-toggle:checked slider {\n  background-color: #494d64;\n}\nwindow.notification-center .notification-container .header .dnd-container .dnd-toggle slider {\n  background-image: unset;\n  background-color: #6e738d;\n}\nwindow.notification-center .notification-container .header-separator {\n  background-color: alpha(#6e738d,0.5);\n  margin-bottom: 6px;\n}\nwindow.notification-center .notification-container .category {\n  margin-top: 6px;\n  margin-bottom: 6px;\n}\nwindow.notification-center .notification-container .category:first-child {\n  margin-top: 0;\n}\nwindow.notification-center .notification-container .category:last-child {\n  margin-bottom: 0;\n}\nwindow.notification-center .notification-container .category .category-icon {\n  margin-right: 3px;\n}\nwindow.notification-center .notification-container .category .category-title {\n  font-size: 22px;\n  font-weight: bold;\n}\nwindow.notification-center .notification-container .category .category-separator {\n  background-color: alpha(#6e738d,0.5);\n  margin-top: 6px;\n}\nwindow.notification-center .notification-container .category .dismiss-category {\n  background-image: unset;\n  background-color: #24273a;\n}\nwindow.notification-center .notification-container .notification {\n  margin-bottom: 1rem;\n}\nwindow.notification-center .notification-container .notification:last-child {\n  margin-bottom: 0;\n}\n\nwindow.launcher .launcher-container {\n  background-color: alpha(#181926,0.95);\n  border-radius: 15px;\n  padding: 1rem;\n  box-shadow: 2px 3px 8px 0 alpha(black,0.4);\n}\nwindow.launcher .launcher-container .search-entry {\n  background-color: #1e2030;\n  border-radius: 8px;\n  padding: 4px 8px;\n  color: #cad3f5;\n  font-size: 20px;\n  margin-bottom: 12px;\n}\nwindow.launcher .launcher-container .search-entry:focus {\n  background-color: alpha(#1e2030,0.8);\n}\nwindow.launcher .launcher-container .apps-container .app-container {\n  padding: 6px;\n  margin-top: 3px;\n  margin-bottom: 3px;\n  background-color: #1e2030;\n  border-radius: 8px;\n  border: 0 solid #363a4f;\n  transition: border-width 0.2s ease-in-out;\n  transition: background-color 0.2s ease-in-out;\n}\nwindow.launcher .launcher-container .apps-container .app-container:hover {\n  border-width: 1px;\n  background-color: alpha(#1e2030,0.6);\n}\nwindow.launcher .launcher-container .apps-container .app-container.focus {\n  border-width: 3px;\n}\nwindow.launcher .launcher-container .apps-container .app-container:first-child {\n  margin-top: 6px;\n}\nwindow.launcher .launcher-container .apps-container .app-container:last-child {\n  margin-bottom: 0;\n}\nwindow.launcher .launcher-container .apps-container .app-container .app-icon {\n  margin-right: 12px;\n}\nwindow.launcher .launcher-container .calculator-container .calculator-result {\n  font-size: 20px;\n  font-weight: bold;\n}\nwindow.launcher .launcher-container .calculator-container .calculator-separator {\n  margin-top: 6px;\n}\n\nwindow.osd {\n  background-color: transparent;\n}\nwindow.osd .osd-container {\n  background-color: #24273a;\n  border-radius: 30px;\n  padding: 5px 10px;\n}\nwindow.osd .osd-container .icon {\n  margin-right: 5px;\n}\nwindow.osd .osd-container .progress {\n  margin-right: 5px;\n}\nwindow.osd .osd-container .progress.overfilled progress {\n  border-color: #ed8796;\n  background-color: #ed8796;\n}\nwindow.osd .osd-container .progress progress {\n  border-color: #6e738d;\n  background-color: #6e738d;\n}\nwindow.osd .osd-container .progress progress,\nwindow.osd .osd-container .progress trough {\n  min-height: 10px;\n  border-radius: 30px;\n}\n\nwindow.session-menu {\n  background-color: alpha(#000000,0);\n  transition: background-color 0.3s ease-in-out;\n}\nwindow.session-menu.open {\n  background-color: alpha(#000000,0.6);\n}\nwindow.session-menu button {\n  border-radius: 20px;\n}\nwindow.session-menu label {\n  margin-top: 10px;\n}\nwindow.session-menu tooltip label {\n  margin-top: 0;\n}";

// app.tsx
import GLib10 from "gi://GLib";

// osd/OSD.tsx
import giCairo2 from "gi://cairo";
import Wp3 from "gi://AstalWp";
import GLib9 from "gi://GLib";
function OSD({ gdkmonitor, hidden }) {
  const wp = Wp3.get_default();
  const maxWidth = gdkmonitor.geometry.width * 0.125;
  const maxHeight = gdkmonitor.geometry.height * 0.04;
  const marginTop = gdkmonitor.geometry.height * 0.6;
  const defaultSpeaker = wp?.audio.defaultSpeaker;
  const defaultMicrophone = wp?.audio.defaultMicrophone;
  const [isVisible, setIsVisible] = createState(false);
  const visibleState = createComputed(
    [isVisible, hidden],
    transformVisibleState
  );
  let lastTimeout;
  let isStartup = true;
  timeout(300, () => {
    isStartup = false;
  });
  const [osdState, setOsdState] = createState({
    type: "speaker",
    percentage: defaultSpeaker?.volume || 0,
    mute: defaultSpeaker?.mute || true,
    icon: defaultSpeaker?.icon || "audio-volume-muted-symbolic"
  });
  defaultSpeaker?.connect("notify::volume", updateSpeakerState);
  defaultSpeaker?.connect("notify::mute", updateSpeakerState);
  defaultMicrophone?.connect("notify::volume", updateMicrophoneState);
  defaultMicrophone?.connect("notify::mute", updateMicrophoneState);
  const dir = GLib9.Dir.open(
    config.get().paths?.backlightBaseDir ?? defaultConfig.paths.backlightBaseDir,
    0
  );
  const backlightDirName = dir.read_name();
  if (backlightDirName) {
    const backlightCurrentPath = `${config.get().paths?.backlightBaseDir ?? defaultConfig.paths.backlightBaseDir}/${backlightDirName}/brightness`;
    const backlightMaxPath = `${config.get().paths?.backlightBaseDir ?? defaultConfig.paths.backlightBaseDir}/${backlightDirName}/max_brightness`;
    monitorFile(backlightCurrentPath, async () => {
      const [currentString, maxString] = await Promise.all([
        readFileAsync(backlightCurrentPath),
        readFileAsync(backlightMaxPath)
      ]);
      if (isStartup) return;
      setOsdState({
        type: "brightness",
        percentage: parseInt(currentString) / parseInt(maxString),
        mute: false,
        icon: "display-brightness-symbolic"
      });
      setIsVisible(true);
      if (lastTimeout) lastTimeout.cancel();
      lastTimeout = timeout(
        config.get().timeouts?.osd ?? defaultConfig.timeouts.osd,
        () => {
          setIsVisible(false);
        }
      );
    });
  }
  function transformVisibleState(isVisible2, hidden2) {
    return isVisible2 && !hidden2;
  }
  function updateSpeakerState(speaker) {
    if (isStartup) return;
    let icon = speaker.volumeIcon;
    if (speaker.volume === 0) icon = "audio-volume-muted-symbolic";
    else if (Math.round(speaker.volume * 100) === 100)
      icon = "audio-volume-high-symbolic";
    setOsdState({
      type: "speaker",
      percentage: speaker.volume,
      mute: speaker.mute,
      icon
    });
    setIsVisible(true);
    if (lastTimeout) lastTimeout.cancel();
    lastTimeout = timeout(
      config.get().timeouts?.osd ?? defaultConfig.timeouts.osd,
      () => {
        setIsVisible(false);
      }
    );
  }
  function updateMicrophoneState(microphone) {
    if (isStartup) return;
    let icon = microphone.volumeIcon;
    if (microphone.volume === 0)
      icon = "microphone-sensitivity-muted-symbolic";
    setOsdState({
      type: "microphone",
      percentage: microphone.volume,
      mute: microphone.mute,
      icon
    });
    setIsVisible(true);
    if (lastTimeout) lastTimeout.cancel();
    lastTimeout = timeout(
      config.get().timeouts?.osd ?? defaultConfig.timeouts.osd,
      () => {
        setIsVisible(false);
      }
    );
  }
  return /* @__PURE__ */ jsx(
    "window",
    {
      gdkmonitor,
      class: "osd",
      title: "AGS OSD",
      css: `margin-top: ${marginTop}px;`,
      $: (self) => {
        self.get_surface()?.set_input_region(new giCairo2.Region());
        self.connect("map", () => {
          self.get_surface()?.set_input_region(new giCairo2.Region());
        });
        const revealer = self.child;
        const transitionDuration = revealer.get_transition_duration();
        visibleState.subscribe(async () => {
          const visible = visibleState.get();
          if (!visible) {
            revealer.set_reveal_child(visible);
            await sleep2(transitionDuration);
          }
          self.set_visible(visible);
          if (visible) {
            revealer.set_reveal_child(visible);
          }
        });
      },
      children: /* @__PURE__ */ jsx(
        "revealer",
        {
          transitionDuration: config(
            (cfg) => cfg.animationsDuration?.osd ?? defaultConfig.animationsDuration.osd
          ),
          transitionType: config(
            (cfg) => Gtk.RevealerTransitionType[cfg.animationsType?.osd ?? defaultConfig.animationsType.osd]
          ),
          children: /* @__PURE__ */ jsxs(
            "box",
            {
              heightRequest: maxHeight,
              widthRequest: maxWidth,
              class: "osd-container",
              children: [
                /* @__PURE__ */ jsx(
                  "image",
                  {
                    iconName: osdState((state) => state.icon),
                    class: "icon"
                  }
                ),
                /* @__PURE__ */ jsx(
                  Gtk.ProgressBar,
                  {
                    hexpand: true,
                    valign: Gtk.Align.CENTER,
                    class: osdState(
                      (state) => Math.round(state.percentage * 100) > 100 ? "progress overfilled" : "progress"
                    ),
                    fraction: osdState((state) => state.percentage)
                  }
                ),
                /* @__PURE__ */ jsx(
                  "label",
                  {
                    label: osdState(
                      (state) => `${Math.round(state.percentage * 100)}%`
                    )
                  }
                )
              ]
            }
          )
        }
      )
    }
  );
}

// app.tsx
var _WindowTracker_decorators, _init, _a2;
_WindowTracker_decorators = [register({ Implements: [Gtk.Buildable] })];
var WindowTracker = class extends (_a2 = GObject6.Object) {
  vfunc_add_child(_, child) {
    onCleanup(() => child.destroy());
  }
};
_init = __decoratorStart(_a2);
WindowTracker = __decorateElement(_init, 0, "WindowTracker", _WindowTracker_decorators, WindowTracker);
__runInitializers(_init, 1, WindowTracker);
var [isNotificationCenterVisible, setIsNotificationCenterVisible] = createState(false);
var [isSessionMenuVisible, setIsSessionMenuVisible] = createState(false);
var [appLauncherMode, setAppLauncherMode] = createState("closed");
var isNotificationPopupHidden = createComputed([isNotificationCenterVisible, isSessionMenuVisible], transformIsNotificationPopupHidden);
var notifd = Notifd5.get_default();
isNotificationCenterVisible.subscribe(() => {
  if (isNotificationCenterVisible.get()) {
    if (isSessionMenuVisible.get())
      return setIsNotificationCenterVisible(false);
    setAppLauncherMode("closed");
  }
});
isSessionMenuVisible.subscribe(() => {
  if (isSessionMenuVisible.get()) {
    setIsNotificationCenterVisible(false);
    setAppLauncherMode("closed");
  }
});
appLauncherMode.subscribe(() => {
  if (appLauncherMode.get() !== "closed") {
    if (isSessionMenuVisible.get()) return setAppLauncherMode("closed");
    setIsNotificationCenterVisible(false);
  }
});
function transformIsNotificationPopupHidden(isNotificationCenterVisible2, isSessionMenuVisible2) {
  return isNotificationCenterVisible2 || isSessionMenuVisible2;
}
var instanceName = "/home/stef/code/widgets/desktop-shell".includes("desktop-shell") ? "desktop-shell-dev" : "desktop-shell";
app_default.start({
  css: style_default,
  gtkTheme: "Adwaita-dark",
  instanceName,
  icons: `${"/home/stef/code/widgets/desktop-shell"}/icons`,
  main() {
    const monitors = createBinding(app_default, "monitors");
    return /* @__PURE__ */ jsx(For, { each: monitors, children: (monitor) => /* @__PURE__ */ jsxs(WindowTracker, { children: [
      /* @__PURE__ */ jsx(Bar, { gdkmonitor: monitor }),
      /* @__PURE__ */ jsx(
        NotificationPopups,
        {
          gdkmonitor: monitor,
          hidden: isNotificationPopupHidden
        }
      ),
      /* @__PURE__ */ jsx(
        NotificationCenter,
        {
          gdkmonitor: monitor,
          visible: isNotificationCenterVisible,
          setVisible: setIsNotificationCenterVisible
        }
      ),
      /* @__PURE__ */ jsx(
        Launcher,
        {
          gdkmonitor: monitor,
          mode: appLauncherMode,
          setMode: setAppLauncherMode
        }
      ),
      /* @__PURE__ */ jsx(
        OSD,
        {
          gdkmonitor: monitor,
          hidden: isSessionMenuVisible
        }
      ),
      /* @__PURE__ */ jsx(
        SessionMenu,
        {
          gdkmonitor: monitor,
          visible: isSessionMenuVisible,
          setVisible: setIsSessionMenuVisible
        }
      )
    ] }) });
  },
  requestHandler(request, res) {
    const [, argv] = GLib10.shell_parse_argv(request);
    if (!argv) return res("argv parse error");
    switch (argv[0]) {
      case "clear-notif": {
        notifd.get_notifications().forEach((notif) => notif.dismiss());
        return res("ok");
      }
      case "toggle-notif": {
        if (isSessionMenuVisible.get())
          return res("session menu is currently open");
        setIsNotificationCenterVisible((prev) => !prev);
        setAppLauncherMode("closed");
        return res("ok");
      }
      case "toggle-session-menu": {
        setIsSessionMenuVisible((prev) => !prev);
        setIsNotificationCenterVisible(false);
        setAppLauncherMode("closed");
        return res("ok");
      }
      case "toggle-launcher-app": {
        if (isSessionMenuVisible.get())
          return res("session menu is currently open");
        setAppLauncherMode("app");
        setIsNotificationCenterVisible(false);
        return res("ok");
      }
      case "toggle-launcher-calculator": {
        if (isSessionMenuVisible.get())
          return res("session menu is currently open");
        setAppLauncherMode("calculator");
        setIsNotificationCenterVisible(false);
        return res("ok");
      }
      /* 
      	DISABLED because exec("cliphist list") seems to error because it returns
      	raw binary image data instead of [[ binary data .. ]] like it would in a TTY
      */
      // case "toggle-launcher-clipboard": {
      // 	setAppLauncherMode("clipboard");
      // 	setIsNotificationCenterVisible(false);
      // 	return res("ok");
      // }
      default: {
        return res("unknown command");
      }
    }
  }
});
export {
  appLauncherMode,
  isNotificationCenterVisible,
  isSessionMenuVisible,
  setAppLauncherMode,
  setIsNotificationCenterVisible,
  setIsSessionMenuVisible
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vLi4vLi4vLi4vbml4L3N0b3JlL3libW5ybjlwc3NzamFiOW1kOW1wdmQ3djh5YnZqemN5LWFncy1qcy1saWItMy4wLjAvc2hhcmUvYWdzL2pzL2duaW0vc3JjL2pzeC9qc3gudHMiLCAiLi4vLi4vLi4vLi4vLi4vbml4L3N0b3JlL3libW5ybjlwc3NzamFiOW1kOW1wdmQ3djh5YnZqemN5LWFncy1qcy1saWItMy4wLjAvc2hhcmUvYWdzL2pzL2duaW0vc3JjL2pzeC9zdGF0ZS50cyIsICIuLi8uLi8uLi8uLi8uLi9uaXgvc3RvcmUveWJtbnJuOXBzc3NqYWI5bWQ5bXB2ZDd2OHlidmp6Y3ktYWdzLWpzLWxpYi0zLjAuMC9zaGFyZS9hZ3MvanMvZ25pbS9zcmMvdXRpbC50cyIsICIuLi8uLi8uLi8uLi8uLi9uaXgvc3RvcmUveWJtbnJuOXBzc3NqYWI5bWQ5bXB2ZDd2OHlidmp6Y3ktYWdzLWpzLWxpYi0zLjAuMC9zaGFyZS9hZ3MvanMvZ25pbS9zcmMvanN4L2Vudi50cyIsICIuLi8uLi8uLi8uLi8uLi9uaXgvc3RvcmUveWJtbnJuOXBzc3NqYWI5bWQ5bXB2ZDd2OHlidmp6Y3ktYWdzLWpzLWxpYi0zLjAuMC9zaGFyZS9hZ3MvanMvZ25pbS9zcmMvanN4L3Njb3BlLnRzIiwgIi4uLy4uLy4uLy4uLy4uL25peC9zdG9yZS95Ym1ucm45cHNzc2phYjltZDltcHZkN3Y4eWJ2anpjeS1hZ3MtanMtbGliLTMuMC4wL3NoYXJlL2Fncy9qcy9nbmltL3NyYy9qc3gvRnJhZ21lbnQudHMiLCAiLi4vLi4vLi4vLi4vLi4vbml4L3N0b3JlL3libW5ybjlwc3NzamFiOW1kOW1wdmQ3djh5YnZqemN5LWFncy1qcy1saWItMy4wLjAvc2hhcmUvYWdzL2pzL2duaW0vc3JjL2dub21lL3NpZ25hbFRyYWNrZXIudHMiLCAiLi4vLi4vLi4vLi4vLi4vbml4L3N0b3JlL3libW5ybjlwc3NzamFiOW1kOW1wdmQ3djh5YnZqemN5LWFncy1qcy1saWItMy4wLjAvc2hhcmUvYWdzL2pzL2duaW0vc3JjL2pzeC9Gb3IudHMiLCAiLi4vLi4vLi4vLi4vLi4vbml4L3N0b3JlL3libW5ybjlwc3NzamFiOW1kOW1wdmQ3djh5YnZqemN5LWFncy1qcy1saWItMy4wLjAvc2hhcmUvYWdzL2pzL2duaW0vc3JjL2pzeC9XaXRoLnRzIiwgIi4uLy4uLy4uLy4uLy4uL25peC9zdG9yZS95Ym1ucm45cHNzc2phYjltZDltcHZkN3Y4eWJ2anpjeS1hZ3MtanMtbGliLTMuMC4wL3NoYXJlL2Fncy9qcy9zcmMvcHJvY2Vzcy50cyIsICIuLi8uLi8uLi8uLi8uLi9uaXgvc3RvcmUveWJtbnJuOXBzc3NqYWI5bWQ5bXB2ZDd2OHlidmp6Y3ktYWdzLWpzLWxpYi0zLjAuMC9zaGFyZS9hZ3MvanMvc3JjL2d0azQvaW5kZXgudHMiLCAiLi4vLi4vLi4vLi4vLi4vbml4L3N0b3JlL3libW5ybjlwc3NzamFiOW1kOW1wdmQ3djh5YnZqemN5LWFncy1qcy1saWItMy4wLjAvc2hhcmUvYWdzL2pzL3NyYy9ndGs0L2pzeC1ydW50aW1lLnRzIiwgIi4uLy4uLy4uLy4uLy4uL25peC9zdG9yZS95Ym1ucm45cHNzc2phYjltZDltcHZkN3Y4eWJ2anpjeS1hZ3MtanMtbGliLTMuMC4wL3NoYXJlL2Fncy9qcy9nbmltL3NyYy9ndGs0L2pzeC1ydW50aW1lLnRzIiwgImxhdW5jaGVyL21vZGVzL2NhbGN1bGF0b3IvQ2FsY3VsYXRvci50c3giLCAiY29uc3RhbnRzL2NvbmZpZy50cyIsICIuLi8uLi8uLi8uLi8uLi9uaXgvc3RvcmUveWJtbnJuOXBzc3NqYWI5bWQ5bXB2ZDd2OHlidmp6Y3ktYWdzLWpzLWxpYi0zLjAuMC9zaGFyZS9hZ3MvanMvc3JjL2ZpbGUudHMiLCAidXRpbC9maWxlLnRzIiwgInV0aWwvY29uZmlnLnRzIiwgInV0aWwvaWNvbnMudHMiLCAibGF1bmNoZXIvbW9kZXMvYXBwL2NvbXBvbmVudHMvQXBwLnRzeCIsICJsYXVuY2hlci9tb2Rlcy9hcHAvQXBwLnRzeCIsICJiYXIvbW9kdWxlcy9Ob3RpZmljYXRpb25zLnRzeCIsICJiYXIvbW9kdWxlcy9NaWNyb3Bob25lLnRzeCIsICJ1dGlsL2Zvcm1hdFRpbWUudHMiLCAiYmFyL21vZHVsZXMvQmF0dGVyeS50c3giLCAiYmFyL21vZHVsZXMvU3BlYWtlci50c3giLCAidXRpbC9zeXN0ZW1TdGF0cy50cyIsICIuLi8uLi8uLi8uLi8uLi9uaXgvc3RvcmUveWJtbnJuOXBzc3NqYWI5bWQ5bXB2ZDd2OHlidmp6Y3ktYWdzLWpzLWxpYi0zLjAuMC9zaGFyZS9hZ3MvanMvc3JjL3RpbWUudHMiLCAiYmFyL21vZHVsZXMvTmV0d29yay50c3giLCAiYmFyL21vZHVsZXMvTWVtb3J5LnRzeCIsICJiYXIvbW9kdWxlcy9Qb3dlci50c3giLCAiY29uc3RhbnRzL2NvbG9ycy50cyIsICJ1dGlsL3RleHQudHMiLCAiYmFyL21vZHVsZXMvTWVkaWEudHN4IiwgInV0aWwvZmV0Y2gudHMiLCAidXRpbC9seXJpY3MudHMiLCAiYmFyL21vZHVsZXMvRGlzay50c3giLCAiYmFyL21vZHVsZXMvVGltZS50c3giLCAiYmFyL21vZHVsZXMvVHJheS50c3giLCAiYmFyL21vZHVsZXMvQ3B1LnRzeCIsICIuLi8uLi8uLi8uLi8uLi9uaXgvc3RvcmUveWJtbnJuOXBzc3NqYWI5bWQ5bXB2ZDd2OHlidmp6Y3ktYWdzLWpzLWxpYi0zLjAuMC9zaGFyZS9hZ3MvanMvc3JjL2d0azQvYXBwLnRzIiwgIi4uLy4uLy4uLy4uLy4uL25peC9zdG9yZS95Ym1ucm45cHNzc2phYjltZDltcHZkN3Y4eWJ2anpjeS1hZ3MtanMtbGliLTMuMC4wL3NoYXJlL2Fncy9qcy9zcmMvb3ZlcnJpZGVzLnRzIiwgIi4uLy4uLy4uLy4uLy4uL25peC9zdG9yZS95Ym1ucm45cHNzc2phYjltZDltcHZkN3Y4eWJ2anpjeS1hZ3MtanMtbGliLTMuMC4wL3NoYXJlL2Fncy9qcy9zcmMvX2FwcC50cyIsICJiYXIvQmFyLnRzeCIsICJ1dGlsL3RpbWVyLnRzIiwgImxhdW5jaGVyL0xhdW5jaGVyLnRzeCIsICJ1dGlsL25vdGlmLnRzIiwgIm5vdGlmaWNhdGlvbnMvY29tcG9uZW50cy9Ob3RpZmljYXRpb24udHN4IiwgIm5vdGlmaWNhdGlvbnMvTm90aWZpY2F0aW9uQ2VudGVyLnRzeCIsICJub3RpZmljYXRpb25zL05vdGlmaWNhdGlvblBvcHVwLnRzeCIsICJzZXNzaW9uTWVudS9TZXNzaW9uTWVudS50c3giLCAiLi4vLi4vLi4vLi4vLi4vbml4L3N0b3JlL3libW5ybjlwc3NzamFiOW1kOW1wdmQ3djh5YnZqemN5LWFncy1qcy1saWItMy4wLjAvc2hhcmUvYWdzL2pzL2duaW0vc3JjL2dvYmplY3QudHMiLCAiYXBwLnRzeCIsICJzYXNzOi9ob21lL3N0ZWYvY29kZS93aWRnZXRzL2Rlc2t0b3Atc2hlbGwvc3R5bGUuc2NzcyIsICJvc2QvT1NELnRzeCJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IEdPYmplY3QgZnJvbSBcImdpOi8vR09iamVjdFwiXG5pbXBvcnQgeyBGcmFnbWVudCB9IGZyb20gXCIuL0ZyYWdtZW50LmpzXCJcbmltcG9ydCB7IEFjY2Vzc29yIH0gZnJvbSBcIi4vc3RhdGUuanNcIlxuaW1wb3J0IHsgQ0MsIEZDLCBlbnYgfSBmcm9tIFwiLi9lbnYuanNcIlxuaW1wb3J0IHsga2ViYWJpZnksIFBhc2NhbGlmeSwgc2V0IH0gZnJvbSBcIi4uL3V0aWwuanNcIlxuaW1wb3J0IHsgb25DbGVhbnVwIH0gZnJvbSBcIi4vc2NvcGUuanNcIlxuXG4vKipcbiAqIFJlcHJlc2VudHMgYWxsIG9mIHRoZSB0aGluZ3MgdGhhdCBjYW4gYmUgcGFzc2VkIGFzIGEgY2hpbGQgdG8gY2xhc3MgY29tcG9uZW50cy5cbiAqL1xuZXhwb3J0IHR5cGUgTm9kZSA9XG4gICAgfCBBcnJheTxHT2JqZWN0Lk9iamVjdD5cbiAgICB8IEdPYmplY3QuT2JqZWN0XG4gICAgfCBudW1iZXJcbiAgICB8IHN0cmluZ1xuICAgIHwgYm9vbGVhblxuICAgIHwgbnVsbFxuICAgIHwgdW5kZWZpbmVkXG5cbmV4cG9ydCBjb25zdCBndGtUeXBlID0gU3ltYm9sKFwiZ3RrIGJ1aWxkZXIgdHlwZVwiKVxuXG4vKipcbiAqIEdldCB0aGUgdHlwZSBvZiB0aGUgb2JqZWN0IHNwZWNpZmllZCB0aHJvdWdoIHRoZSBgJHR5cGVgIHByb3BlcnR5XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRUeXBlKG9iamVjdDogR09iamVjdC5PYmplY3QpIHtcbiAgICByZXR1cm4gZ3RrVHlwZSBpbiBvYmplY3QgPyAob2JqZWN0W2d0a1R5cGVdIGFzIHN0cmluZykgOiBudWxsXG59XG5cbi8qKlxuICogRnVuY3Rpb24gQ29tcG9uZW50IFByb3BlcnRpZXNcbiAqL1xuZXhwb3J0IHR5cGUgRkNQcm9wczxTZWxmLCBQcm9wcz4gPSBQcm9wcyAmIHtcbiAgICAvKipcbiAgICAgKiBHdGsuQnVpbGRlciB0eXBlXG4gICAgICogaXRzIGNvbnN1bWVkIGludGVybmFsbHkgYW5kIG5vdCBhY3R1YWxseSBwYXNzZWQgYXMgYSBwYXJhbWV0ZXJzXG4gICAgICovXG4gICAgJHR5cGU/OiBzdHJpbmdcbiAgICAvKipcbiAgICAgKiBzZXR1cCBmdW5jdGlvblxuICAgICAqIGl0cyBjb25zdW1lZCBpbnRlcm5hbGx5IGFuZCBub3QgYWN0dWFsbHkgcGFzc2VkIGFzIGEgcGFyYW1ldGVyc1xuICAgICAqL1xuICAgICQ/KHNlbGY6IFNlbGYpOiB2b2lkXG59XG5cbi8qKlxuICogQ2xhc3MgQ29tcG9uZW50IFByb3BlcnRpZXNcbiAqL1xuZXhwb3J0IHR5cGUgQ0NQcm9wczxTZWxmIGV4dGVuZHMgR09iamVjdC5PYmplY3QsIFByb3BzPiA9IHtcbiAgICAvKipcbiAgICAgKiBAaW50ZXJuYWwgY2hpbGRyZW4gZWxlbWVudHNcbiAgICAgKiBpdHMgY29uc3VtZWQgaW50ZXJuYWxseSBhbmQgbm90IGFjdHVhbGx5IHBhc3NlZCB0byBjbGFzcyBjb21wb25lbnQgY29uc3RydWN0b3JzXG4gICAgICovXG4gICAgY2hpbGRyZW4/OiBBcnJheTxOb2RlPiB8IE5vZGVcbiAgICAvKipcbiAgICAgKiBHdGsuQnVpbGRlciB0eXBlXG4gICAgICogaXRzIGNvbnN1bWVkIGludGVybmFsbHkgYW5kIG5vdCBhY3R1YWxseSBwYXNzZWQgdG8gY2xhc3MgY29tcG9uZW50IGNvbnN0cnVjdG9yc1xuICAgICAqL1xuICAgICR0eXBlPzogc3RyaW5nXG4gICAgLyoqXG4gICAgICogZnVuY3Rpb24gdG8gdXNlIGFzIGEgY29uc3RydWN0b3IsXG4gICAgICogaXRzIGNvbnN1bWVkIGludGVybmFsbHkgYW5kIG5vdCBhY3R1YWxseSBwYXNzZWQgdG8gY2xhc3MgY29tcG9uZW50IGNvbnN0cnVjdG9yc1xuICAgICAqL1xuICAgICRjb25zdHJ1Y3Rvcj8ocHJvcHM6IFBhcnRpYWw8UHJvcHM+KTogU2VsZlxuICAgIC8qKlxuICAgICAqIHNldHVwIGZ1bmN0aW9uLFxuICAgICAqIGl0cyBjb25zdW1lZCBpbnRlcm5hbGx5IGFuZCBub3QgYWN0dWFsbHkgcGFzc2VkIHRvIGNsYXNzIGNvbXBvbmVudCBjb25zdHJ1Y3RvcnNcbiAgICAgKi9cbiAgICAkPyhzZWxmOiBTZWxmKTogdm9pZFxuICAgIC8qKlxuICAgICAqIENTUyBjbGFzcyBuYW1lc1xuICAgICAqL1xuICAgIGNsYXNzPzogc3RyaW5nIHwgQWNjZXNzb3I8c3RyaW5nPlxuICAgIC8qKlxuICAgICAqIGlubGluZSBDU1NcbiAgICAgKi9cbiAgICBjc3M/OiBzdHJpbmcgfCBBY2Nlc3NvcjxzdHJpbmc+XG59ICYge1xuICAgIFtLIGluIGtleW9mIFByb3BzXTogQWNjZXNzb3I8Tm9uTnVsbGFibGU8UHJvcHNbS10+PiB8IFByb3BzW0tdXG59ICYge1xuICAgIFtTIGluIGtleW9mIFNlbGZbXCIkc2lnbmFsc1wiXSBhcyBTIGV4dGVuZHMgYG5vdGlmeTo6JHtpbmZlciBQfWBcbiAgICAgICAgPyBgb25Ob3RpZnkke1Bhc2NhbGlmeTxQPn1gXG4gICAgICAgIDogUyBleHRlbmRzIHN0cmluZ1xuICAgICAgICAgID8gYG9uJHtQYXNjYWxpZnk8Uz59YFxuICAgICAgICAgIDogbmV2ZXJdPzogR09iamVjdC5TaWduYWxDYWxsYmFjazxTZWxmLCBTZWxmW1wiJHNpZ25hbHNcIl1bU10+XG59XG5cbi8vIHByZXR0aWVyLWlnbm9yZVxudHlwZSBKc3hQcm9wczxDLCBQcm9wcz4gPVxuICAgIEMgZXh0ZW5kcyB0eXBlb2YgRnJhZ21lbnQgPyAoUHJvcHMgJiB7fSlcbiAgICAvLyBpbnRyaW5zaWNFbGVtZW50cyBhbHdheXMgcmVzb2x2ZSBhcyBGQ1xuICAgIC8vIHNvIHdlIGNhbid0IG5hcnJvdyBpdCBkb3duLCBhbmQgaW4gc29tZSBjYXNlc1xuICAgIC8vIHRoZSBzZXR1cCBmdW5jdGlvbiBpcyB0eXBlZCBhcyBhIHVuaW9uIG9mIE9iamVjdCBhbmQgYWN0dWFsIHR5cGVcbiAgICAvLyBhcyBhIGZpeCB1c2VycyBjYW4gYW5kIHNob3VsZCB1c2UgRkNQcm9wc1xuICAgIDogQyBleHRlbmRzIEZDID8gUHJvcHMgJiBPbWl0PEZDUHJvcHM8UmV0dXJuVHlwZTxDPiwgUHJvcHM+LCBcIiRcIj5cbiAgICA6IEMgZXh0ZW5kcyBDQyA/IENDUHJvcHM8SW5zdGFuY2VUeXBlPEM+LCBQcm9wcz5cbiAgICA6IG5ldmVyXG5cbmZ1bmN0aW9uIGlzR09iamVjdEN0b3IoY3RvcjogYW55KTogY3RvciBpcyBDQyB7XG4gICAgcmV0dXJuIGN0b3IucHJvdG90eXBlIGluc3RhbmNlb2YgR09iamVjdC5PYmplY3Rcbn1cblxuZnVuY3Rpb24gaXNGdW5jdGlvbkN0b3IoY3RvcjogYW55KTogY3RvciBpcyBGQyB7XG4gICAgcmV0dXJuIHR5cGVvZiBjdG9yID09PSBcImZ1bmN0aW9uXCIgJiYgIWlzR09iamVjdEN0b3IoY3Rvcilcbn1cblxuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldFR5cGUob2JqZWN0OiBvYmplY3QsIHR5cGU6IHN0cmluZykge1xuICAgIGlmIChndGtUeXBlIGluIG9iamVjdCAmJiBvYmplY3RbZ3RrVHlwZV0gIT09IFwiXCIpIHtcbiAgICAgICAgY29uc29sZS53YXJuKGB0eXBlIG92ZXJyaWRlbiBmcm9tICR7b2JqZWN0W2d0a1R5cGVdfSB0byAke3R5cGV9IG9uICR7b2JqZWN0fWApXG4gICAgfVxuXG4gICAgT2JqZWN0LmFzc2lnbihvYmplY3QsIHsgW2d0a1R5cGVdOiB0eXBlIH0pXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBqc3g8VCBleHRlbmRzIChwcm9wczogYW55KSA9PiBHT2JqZWN0Lk9iamVjdD4oXG4gICAgY3RvcjogVCxcbiAgICBwcm9wczogSnN4UHJvcHM8VCwgUGFyYW1ldGVyczxUPlswXT4sXG4pOiBSZXR1cm5UeXBlPFQ+XG5cbmV4cG9ydCBmdW5jdGlvbiBqc3g8VCBleHRlbmRzIG5ldyAocHJvcHM6IGFueSkgPT4gR09iamVjdC5PYmplY3Q+KFxuICAgIGN0b3I6IFQsXG4gICAgcHJvcHM6IEpzeFByb3BzPFQsIENvbnN0cnVjdG9yUGFyYW1ldGVyczxUPlswXT4sXG4pOiBJbnN0YW5jZVR5cGU8VD5cblxuZXhwb3J0IGZ1bmN0aW9uIGpzeDxUIGV4dGVuZHMgR09iamVjdC5PYmplY3Q+KFxuICAgIGN0b3I6IGtleW9mICh0eXBlb2YgZW52KVtcImludHJpbnNpY0VsZW1lbnRzXCJdIHwgKG5ldyAocHJvcHM6IGFueSkgPT4gVCkgfCAoKHByb3BzOiBhbnkpID0+IFQpLFxuICAgIGlucHJvcHM6IGFueSxcbiAgICAvLyBrZXkgaXMgYSBzcGVjaWFsIHByb3AgaW4ganN4IHdoaWNoIGlzIHBhc3NlZCBhcyBhIHRoaXJkIGFyZ3VtZW50IGFuZCBub3QgaW4gcHJvcHNcbiAgICBrZXk/OiBzdHJpbmcsXG4pOiBUIHtcbiAgICBjb25zdCB7ICQsICR0eXBlLCAkY29uc3RydWN0b3IsIGNoaWxkcmVuID0gW10sIC4uLnJlc3QgfSA9IGlucHJvcHMgYXMgQ0NQcm9wczxULCBhbnk+XG4gICAgY29uc3QgcHJvcHMgPSByZXN0IGFzIFJlY29yZDxzdHJpbmcsIGFueT5cblxuICAgIGlmIChrZXkpIE9iamVjdC5hc3NpZ24ocHJvcHMsIHsga2V5IH0pXG4gICAgZW52LmluaXRQcm9wcyhwcm9wcylcblxuICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKHByb3BzKSkge1xuICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkgZGVsZXRlIHByb3BzW2tleV1cbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGN0b3IgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgaWYgKGN0b3IgaW4gZW52LmludHJpbnNpY0VsZW1lbnRzKSB7XG4gICAgICAgICAgICBjdG9yID0gZW52LmludHJpbnNpY0VsZW1lbnRzW2N0b3JdIGFzIEZDPFQ+IHwgQ0M8VD5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IEVycm9yKGB1bmtub3duIGludHJpbnNpYyBlbGVtZW50IFwiJHtjdG9yfVwiYClcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmIChpc0Z1bmN0aW9uQ3RvcihjdG9yKSkge1xuICAgICAgICBjb25zdCBvYmplY3QgPSBjdG9yKHsgY2hpbGRyZW4sIC4uLnByb3BzIH0pXG4gICAgICAgIGlmICgkdHlwZSkgc2V0VHlwZShvYmplY3QsICR0eXBlKVxuICAgICAgICAkPy4ob2JqZWN0KVxuICAgICAgICByZXR1cm4gb2JqZWN0XG4gICAgfVxuXG4gICAgLy8gY29sbGVjdCBjc3MgYW5kIGNsYXNzTmFtZVxuICAgIGNvbnN0IHsgY3NzLCBjbGFzczogY2xhc3NOYW1lIH0gPSBwcm9wc1xuICAgIGRlbGV0ZSBwcm9wcy5jc3NcbiAgICBkZWxldGUgcHJvcHMuY2xhc3NcblxuICAgIGNvbnN0IHNpZ25hbHM6IEFycmF5PFtzdHJpbmcsICguLi5wcm9wczogdW5rbm93bltdKSA9PiB1bmtub3duXT4gPSBbXVxuICAgIGNvbnN0IGJpbmRpbmdzOiBBcnJheTxbc3RyaW5nLCBBY2Nlc3Nvcjx1bmtub3duPl0+ID0gW11cblxuICAgIC8vIGNvbGxlY3Qgc2lnbmFscyBhbmQgYmluZGluZ3NcbiAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhwcm9wcykpIHtcbiAgICAgICAgaWYgKGtleS5zdGFydHNXaXRoKFwib25cIikpIHtcbiAgICAgICAgICAgIHNpZ25hbHMucHVzaChba2V5LnNsaWNlKDIpLCB2YWx1ZSBhcyAoKSA9PiB1bmtub3duXSlcbiAgICAgICAgICAgIGRlbGV0ZSBwcm9wc1trZXldXG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgQWNjZXNzb3IpIHtcbiAgICAgICAgICAgIGJpbmRpbmdzLnB1c2goW2tleSwgdmFsdWVdKVxuICAgICAgICAgICAgcHJvcHNba2V5XSA9IHZhbHVlLmdldCgpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBjb25zdHJ1Y3RcbiAgICBjb25zdCBvYmplY3QgPSAkY29uc3RydWN0b3IgPyAkY29uc3RydWN0b3IocHJvcHMpIDogbmV3IChjdG9yIGFzIENDPFQ+KShwcm9wcylcbiAgICBpZiAoJGNvbnN0cnVjdG9yKSBPYmplY3QuYXNzaWduKG9iamVjdCwgcHJvcHMpXG4gICAgaWYgKCR0eXBlKSBzZXRUeXBlKG9iamVjdCwgJHR5cGUpXG5cbiAgICBpZiAoY3NzKSBlbnYuc2V0Q3NzKG9iamVjdCwgY3NzKVxuICAgIGlmIChjbGFzc05hbWUpIGVudi5zZXRDbGFzcyhvYmplY3QsIGNsYXNzTmFtZSlcblxuICAgIC8vIGFkZCBjaGlsZHJlblxuICAgIGZvciAoY29uc3QgY2hpbGQgb2YgQXJyYXkuaXNBcnJheShjaGlsZHJlbikgPyBjaGlsZHJlbiA6IFtjaGlsZHJlbl0pIHtcbiAgICAgICAgaWYgKGNoaWxkID09PSB0cnVlKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oXCJUcnlpbmcgdG8gYWRkIGJvb2xlYW4gdmFsdWUgb2YgYHRydWVgIGFzIGEgY2hpbGQuXCIpXG4gICAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGQpKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGNoIG9mIGNoaWxkKSB7XG4gICAgICAgICAgICAgICAgZW52LmFkZENoaWxkKG9iamVjdCwgY2gsIC0xKVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGNoaWxkKSB7XG4gICAgICAgICAgICBlbnYuYWRkQ2hpbGQob2JqZWN0LCBjaGlsZCwgLTEpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBoYW5kbGUgc2lnbmFsc1xuICAgIGNvbnN0IGRpc3Bvc2VIYW5kbGVycyA9IHNpZ25hbHMubWFwKChbc2lnLCBoYW5kbGVyXSkgPT4ge1xuICAgICAgICBjb25zdCBuYW1lID0ga2ViYWJpZnkoc2lnKVxuICAgICAgICBjb25zdCBpZCA9IG5hbWUuc3RhcnRzV2l0aChcIm5vdGlmeS1cIilcbiAgICAgICAgICAgID8gb2JqZWN0LmNvbm5lY3QoYG5vdGlmeTo6JHtuYW1lLnNsaWNlKDcpfWAsIGhhbmRsZXIpXG4gICAgICAgICAgICA6IG9iamVjdC5jb25uZWN0KGtlYmFiaWZ5KHNpZyksIGhhbmRsZXIpXG5cbiAgICAgICAgcmV0dXJuICgpID0+IG9iamVjdC5kaXNjb25uZWN0KGlkKVxuICAgIH0pXG5cbiAgICAvLyBoYW5kbGUgYmluZGluZ3NcbiAgICBjb25zdCBkaXNwb3NlQmluZGluZ3MgPSBiaW5kaW5ncy5tYXAoKFtwcm9wLCBiaW5kaW5nXSkgPT4ge1xuICAgICAgICBjb25zdCBkaXNwb3NlID0gYmluZGluZy5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgICAgICAgc2V0KG9iamVjdCwgcHJvcCwgYmluZGluZy5nZXQoKSlcbiAgICAgICAgfSlcbiAgICAgICAgc2V0KG9iamVjdCwgcHJvcCwgYmluZGluZy5nZXQoKSlcbiAgICAgICAgcmV0dXJuIGRpc3Bvc2VcbiAgICB9KVxuXG4gICAgLy8gY2xlYW51cFxuICAgIGlmIChkaXNwb3NlQmluZGluZ3MubGVuZ3RoID4gMCB8fCBkaXNwb3NlSGFuZGxlcnMubGVuZ3RoID4gMCkge1xuICAgICAgICBvbkNsZWFudXAoKCkgPT4ge1xuICAgICAgICAgICAgZGlzcG9zZUhhbmRsZXJzLmZvckVhY2goKGNiKSA9PiBjYigpKVxuICAgICAgICAgICAgZGlzcG9zZUJpbmRpbmdzLmZvckVhY2goKGNiKSA9PiBjYigpKVxuICAgICAgICB9KVxuICAgIH1cblxuICAgICQ/LihvYmplY3QpXG4gICAgcmV0dXJuIG9iamVjdFxufVxuXG5leHBvcnQgY29uc3QganN4cyA9IGpzeFxuXG5kZWNsYXJlIGdsb2JhbCB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1uYW1lc3BhY2VcbiAgICBuYW1lc3BhY2UgSlNYIHtcbiAgICAgICAgdHlwZSBFbGVtZW50VHlwZSA9IGtleW9mIEludHJpbnNpY0VsZW1lbnRzIHwgRkMgfCBDQ1xuICAgICAgICB0eXBlIEVsZW1lbnQgPSBHT2JqZWN0Lk9iamVjdFxuICAgICAgICB0eXBlIEVsZW1lbnRDbGFzcyA9IEdPYmplY3QuT2JqZWN0XG5cbiAgICAgICAgdHlwZSBMaWJyYXJ5TWFuYWdlZEF0dHJpYnV0ZXM8QywgUHJvcHM+ID0gSnN4UHJvcHM8QywgUHJvcHM+ICYge1xuICAgICAgICAgICAgLy8gRklYTUU6IHdoeSBkb2VzIGFuIGludHJpbnNpYyBlbGVtZW50IGFsd2F5cyByZXNvbHZlIGFzIEZDP1xuICAgICAgICAgICAgLy8gX190eXBlPzogQyBleHRlbmRzIENDID8gXCJDQ1wiIDogQyBleHRlbmRzIEZDID8gXCJGQ1wiIDogbmV2ZXJcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZW1wdHktb2JqZWN0LXR5cGVcbiAgICAgICAgaW50ZXJmYWNlIEludHJpbnNpY0VsZW1lbnRzIHtcbiAgICAgICAgICAgIC8vIGNjOiBDQ1Byb3BzPEd0ay5Cb3gsIEd0ay5Cb3guQ29uc3RydWN0b3JQcm9wcywgR3RrLkJveC5TaWduYWxTaWduYXR1cmVzPlxuICAgICAgICAgICAgLy8gZmM6IEZDUHJvcHM8R3RrLldpZGdldCwgRm5Qcm9wcz5cbiAgICAgICAgfVxuXG4gICAgICAgIGludGVyZmFjZSBFbGVtZW50Q2hpbGRyZW5BdHRyaWJ1dGUge1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1lbXB0eS1vYmplY3QtdHlwZVxuICAgICAgICAgICAgY2hpbGRyZW46IHt9XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCAiaW1wb3J0IEdPYmplY3QgZnJvbSBcImdpOi8vR09iamVjdFwiXG5pbXBvcnQgR2lvIGZyb20gXCJnaTovL0dpb1wiXG5pbXBvcnQgR0xpYiBmcm9tIFwiZ2k6Ly9HTGliXCJcbmltcG9ydCB7IHR5cGUgUGFzY2FsaWZ5LCBjYW1lbGlmeSwga2ViYWJpZnkgfSBmcm9tIFwiLi4vdXRpbC5qc1wiXG5cbnR5cGUgU3Vic2NyaWJlQ2FsbGJhY2sgPSAoKSA9PiB2b2lkXG50eXBlIERpc3Bvc2VGdW5jdGlvbiA9ICgpID0+IHZvaWRcbnR5cGUgU3Vic2NyaWJlRnVuY3Rpb24gPSAoY2FsbGJhY2s6IFN1YnNjcmliZUNhbGxiYWNrKSA9PiBEaXNwb3NlRnVuY3Rpb25cblxuZXhwb3J0IHR5cGUgQWNjZXNzZWQ8VD4gPSBUIGV4dGVuZHMgQWNjZXNzb3I8aW5mZXIgVj4gPyBWIDogbmV2ZXJcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtZGVjbGFyYXRpb24tbWVyZ2luZ1xuZXhwb3J0IGNsYXNzIEFjY2Vzc29yPFQgPSB1bmtub3duPiBleHRlbmRzIEZ1bmN0aW9uIHtcbiAgICBzdGF0aWMgJGd0eXBlID0gR09iamVjdC5UWVBFX0pTT0JKRUNUIGFzIHVua25vd24gYXMgR09iamVjdC5HVHlwZTxBY2Nlc3Nvcj5cblxuICAgIC8qKiBAZXhwZXJpbWVudGFsICovXG4gICAgc3RhdGljIGV2YWx1YXRpbmc/OiBTZXQ8QWNjZXNzb3I8dW5rbm93bj4+XG5cbiAgICAjZ2V0OiAoKSA9PiBUXG4gICAgI3N1YnNjcmliZTogU3Vic2NyaWJlRnVuY3Rpb25cblxuICAgIGNvbnN0cnVjdG9yKGdldDogKCkgPT4gVCwgc3Vic2NyaWJlPzogU3Vic2NyaWJlRnVuY3Rpb24pIHtcbiAgICAgICAgc3VwZXIoXCJyZXR1cm4gYXJndW1lbnRzLmNhbGxlZS5fY2FsbC5hcHBseShhcmd1bWVudHMuY2FsbGVlLCBhcmd1bWVudHMpXCIpXG4gICAgICAgIHRoaXMuI3N1YnNjcmliZSA9IHN1YnNjcmliZSA/PyAoKCkgPT4gKCkgPT4gdm9pZCAwKVxuICAgICAgICB0aGlzLiNnZXQgPSBnZXRcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTdWJzY3JpYmUgZm9yIHZhbHVlIGNoYW5nZXMuXG4gICAgICogQHBhcmFtIGNhbGxiYWNrIFRoZSBmdW5jdGlvbiB0byBydW4gd2hlbiB0aGUgY3VycmVudCB2YWx1ZSBjaGFuZ2VzLlxuICAgICAqIEByZXR1cm5zIFVuc3Vic2NyaWJlIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIHN1YnNjcmliZShjYWxsYmFjazogU3Vic2NyaWJlQ2FsbGJhY2spOiBEaXNwb3NlRnVuY3Rpb24ge1xuICAgICAgICAvLyBUT0RPOiBhdXRvIHVuc3ViIHdoZW4gYSBzY29wZSBpcyBhdmFpbGFibGU/XG4gICAgICAgIHJldHVybiB0aGlzLiNzdWJzY3JpYmUoY2FsbGJhY2spXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybnMgVGhlIGN1cnJlbnQgdmFsdWUuXG4gICAgICovXG4gICAgZ2V0KCk6IFQge1xuICAgICAgICBBY2Nlc3Nvci5ldmFsdWF0aW5nPy5hZGQodGhpcylcbiAgICAgICAgcmV0dXJuIHRoaXMuI2dldCgpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IGBBY2Nlc3NvcmAgdGhhdCBhcHBsaWVzIGEgdHJhbnNmb3JtYXRpb24gb24gaXRzIHZhbHVlLlxuICAgICAqIEBwYXJhbSB0cmFuc2Zvcm0gVGhlIHRyYW5zZm9ybWF0aW9uIHRvIGFwcGx5LiBTaG91bGQgYmUgYSBwdXJlIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGFzPFIgPSBUPih0cmFuc2Zvcm06ICh2YWx1ZTogVCkgPT4gUik6IEFjY2Vzc29yPFI+IHtcbiAgICAgICAgcmV0dXJuIG5ldyBBY2Nlc3NvcigoKSA9PiB0cmFuc2Zvcm0odGhpcy4jZ2V0KCkpLCB0aGlzLiNzdWJzY3JpYmUpXG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIF9jYWxsPFIgPSBUPih0cmFuc2Zvcm06ICh2YWx1ZTogVCkgPT4gUik6IEFjY2Vzc29yPFI+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXModHJhbnNmb3JtKVxuICAgIH1cblxuICAgIHRvU3RyaW5nKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBgQWNjZXNzb3I8JHt0aGlzLmdldCgpfT5gXG4gICAgfVxuXG4gICAgW1N5bWJvbC50b1ByaW1pdGl2ZV0oKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihcIkFjY2Vzc29yIGltcGxpY2l0bHkgY29udmVydGVkIHRvIGEgcHJpbWl0aXZlIHZhbHVlLlwiKVxuICAgICAgICByZXR1cm4gdGhpcy50b1N0cmluZygpXG4gICAgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIEFjY2Vzc29yPFQ+IHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgYEFjY2Vzc29yYCB0aGF0IGFwcGxpZXMgYSB0cmFuc2Zvcm1hdGlvbiBvbiBpdHMgdmFsdWUuXG4gICAgICogQHBhcmFtIHRyYW5zZm9ybSBUaGUgdHJhbnNmb3JtYXRpb24gdG8gYXBwbHkuIFNob3VsZCBiZSBhIHB1cmUgZnVuY3Rpb24uXG4gICAgICovXG4gICAgPFIgPSBUPih0cmFuc2Zvcm06ICh2YWx1ZTogVCkgPT4gUik6IEFjY2Vzc29yPFI+XG59XG5cbmV4cG9ydCB0eXBlIFNldHRlcjxUPiA9IHtcbiAgICAodmFsdWU6IFQpOiB2b2lkXG4gICAgKHZhbHVlOiAocHJldjogVCkgPT4gVCk6IHZvaWRcbn1cblxuZXhwb3J0IHR5cGUgU3RhdGU8VD4gPSBbQWNjZXNzb3I8VD4sIFNldHRlcjxUPl1cblxuLyoqXG4gKiBDcmVhdGUgYSB3cml0YWJsZSBzaWduYWwuXG4gKlxuICogQHBhcmFtIGluaXQgVGhlIGludGlhbCB2YWx1ZSBvZiB0aGUgc2lnbmFsXG4gKiBAcmV0dXJucyBBbiBgQWNjZXNzb3JgIGFuZCBhIHNldHRlciBmdW5jdGlvblxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU3RhdGU8VD4oaW5pdDogVCk6IFN0YXRlPFQ+IHtcbiAgICBsZXQgY3VycmVudFZhbHVlID0gaW5pdFxuICAgIGNvbnN0IHN1YnNjcmliZXJzID0gbmV3IFNldDxTdWJzY3JpYmVDYWxsYmFjaz4oKVxuXG4gICAgY29uc3Qgc3Vic2NyaWJlOiBTdWJzY3JpYmVGdW5jdGlvbiA9IChjYWxsYmFjaykgPT4ge1xuICAgICAgICBzdWJzY3JpYmVycy5hZGQoY2FsbGJhY2spXG4gICAgICAgIHJldHVybiAoKSA9PiBzdWJzY3JpYmVycy5kZWxldGUoY2FsbGJhY2spXG4gICAgfVxuXG4gICAgY29uc3Qgc2V0ID0gKG5ld1ZhbHVlOiB1bmtub3duKSA9PiB7XG4gICAgICAgIGNvbnN0IHZhbHVlOiBUID0gdHlwZW9mIG5ld1ZhbHVlID09PSBcImZ1bmN0aW9uXCIgPyBuZXdWYWx1ZShjdXJyZW50VmFsdWUpIDogbmV3VmFsdWVcbiAgICAgICAgaWYgKGN1cnJlbnRWYWx1ZSAhPT0gdmFsdWUpIHtcbiAgICAgICAgICAgIGN1cnJlbnRWYWx1ZSA9IHZhbHVlXG4gICAgICAgICAgICBzdWJzY3JpYmVycy5mb3JFYWNoKChjYikgPT4gY2IoKSlcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBbbmV3IEFjY2Vzc29yKCgpID0+IGN1cnJlbnRWYWx1ZSwgc3Vic2NyaWJlKSwgc2V0IGFzIFNldHRlcjxUPl1cbn1cblxuLyoqXG4gKiBDcmVhdGUgYW4gYEFjY2Vzc29yYCB3aGljaCBpcyBjb21wdXRlZCBmcm9tIGEgbGlzdCBvZiBgQWNjZXNzb3Jgcy5cbiAqXG4gKiBgYGB0cyBFeGFtcGxlXG4gKiBsZXQgYTogQWNjZXNzb3I8bnVtYmVyPlxuICogbGV0IGI6IEFjY2Vzc29yPHN0cmluZz5cbiAqIGNvbnN0IGM6IEFjY2Vzc29yPFtudW1iZXIsIHN0cmluZ10+ID0gY3JlYXRlQ29tcHV0ZWQoW2EsIGJdKVxuICogY29uc3QgZDogQWNjZXNzb3I8c3RyaW5nPiA9IGNyZWF0ZUNvbXB1dGVkKFthLCBiXSwgKGE6IG51bWJlciwgYjogc3RyaW5nKSA9PiBgJHthfSAke2J9YClcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSBkZXBzIExpc3Qgb2YgYEFjY2Vzc29yc2AuXG4gKiBAcGFyYW0gdHJhbnNmb3JtIEFuIG9wdGlvbmFsIHRyYW5zZm9ybSBmdW5jdGlvbi5cbiAqIEByZXR1cm5zIFRoZSBjb21wdXRlZCBgQWNjZXNzb3JgLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQ29tcHV0ZWQ8XG4gICAgY29uc3QgRGVwcyBleHRlbmRzIEFycmF5PEFjY2Vzc29yPGFueT4+LFxuICAgIEFyZ3MgZXh0ZW5kcyB7IFtLIGluIGtleW9mIERlcHNdOiBBY2Nlc3NlZDxEZXBzW0tdPiB9LFxuICAgIFYgPSBBcmdzLFxuPihkZXBzOiBEZXBzLCB0cmFuc2Zvcm0/OiAoLi4uYXJnczogQXJncykgPT4gVik6IEFjY2Vzc29yPFY+IHtcbiAgICBsZXQgZGlzcG9zZTogQXJyYXk8RGlzcG9zZUZ1bmN0aW9uPlxuICAgIGNvbnN0IHN1YnNjcmliZXJzID0gbmV3IFNldDxTdWJzY3JpYmVDYWxsYmFjaz4oKVxuICAgIGNvbnN0IGNhY2hlID0gbmV3IEFycmF5PHVua25vd24+KGRlcHMubGVuZ3RoKVxuXG4gICAgY29uc3Qgc3Vic2NyaWJlOiBTdWJzY3JpYmVGdW5jdGlvbiA9IChjYWxsYmFjaykgPT4ge1xuICAgICAgICBpZiAoc3Vic2NyaWJlcnMuc2l6ZSA9PT0gMCkge1xuICAgICAgICAgICAgZGlzcG9zZSA9IGRlcHMubWFwKChkZXAsIGkpID0+XG4gICAgICAgICAgICAgICAgZGVwLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gZGVwLmdldCgpXG4gICAgICAgICAgICAgICAgICAgIGlmIChjYWNoZVtpXSAhPT0gdmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhY2hlW2ldID0gZGVwLmdldCgpXG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVycy5mb3JFYWNoKChjYikgPT4gY2IoKSlcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgKVxuICAgICAgICB9XG5cbiAgICAgICAgc3Vic2NyaWJlcnMuYWRkKGNhbGxiYWNrKVxuXG4gICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICBzdWJzY3JpYmVycy5kZWxldGUoY2FsbGJhY2spXG4gICAgICAgICAgICBpZiAoc3Vic2NyaWJlcnMuc2l6ZSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGRpc3Bvc2UubWFwKChjYikgPT4gY2IoKSlcbiAgICAgICAgICAgICAgICBkaXNwb3NlLmxlbmd0aCA9IDBcbiAgICAgICAgICAgICAgICBjYWNoZS5sZW5ndGggPSAwXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBnZXQgPSAoKTogViA9PiB7XG4gICAgICAgIGNvbnN0IGFyZ3MgPSBkZXBzLm1hcCgoZGVwLCBpKSA9PiB7XG4gICAgICAgICAgICBpZiAoIWNhY2hlW2ldKSB7XG4gICAgICAgICAgICAgICAgY2FjaGVbaV0gPSBkZXAuZ2V0KClcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlW2ldXG4gICAgICAgIH0pXG5cbiAgICAgICAgcmV0dXJuIHRyYW5zZm9ybSA/IHRyYW5zZm9ybSguLi4oYXJncyBhcyBBcmdzKSkgOiAoYXJncyBhcyBWKVxuICAgIH1cblxuICAgIHJldHVybiBuZXcgQWNjZXNzb3IoZ2V0LCBzdWJzY3JpYmUpXG59XG5cbi8qKlxuICogQ3JlYXRlIGFuIGBBY2Nlc3NvcmAgb24gYSBgR09iamVjdC5PYmplY3RgJ3MgYHByb3BlcnR5YC5cbiAqXG4gKiBAcGFyYW0gb2JqZWN0IFRoZSBgR09iamVjdC5PYmplY3RgIHRvIGNyZWF0ZSB0aGUgYEFjY2Vzc29yYCBvbi5cbiAqIEBwYXJhbSBwcm9wZXJ0eSBPbmUgb2YgaXRzIHJlZ2lzdGVyZWQgcHJvcGVydGllcy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUJpbmRpbmc8VCBleHRlbmRzIEdPYmplY3QuT2JqZWN0LCBQIGV4dGVuZHMga2V5b2YgVD4oXG4gICAgb2JqZWN0OiBULFxuICAgIHByb3BlcnR5OiBFeHRyYWN0PFAsIHN0cmluZz4sXG4pOiBBY2Nlc3NvcjxUW1BdPlxuXG4vLyBUT0RPOiBzdXBwb3J0IG5lc3RlZCBiaW5kaW5nc1xuLy8gZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUJpbmRpbmc8XG4vLyAgICAgVCBleHRlbmRzIEdPYmplY3QuT2JqZWN0LFxuLy8gICAgIFAxIGV4dGVuZHMga2V5b2YgVCxcbi8vICAgICBQMiBleHRlbmRzIGtleW9mIE5vbk51bGxhYmxlPFRbUDFdPixcbi8vID4oXG4vLyAgICAgb2JqZWN0OiBULFxuLy8gICAgIHByb3BlcnR5MTogRXh0cmFjdDxQMSwgc3RyaW5nPixcbi8vICAgICBwcm9wZXJ0eTI6IEV4dHJhY3Q8UDIsIHN0cmluZz4sXG4vLyApOiBBY2Nlc3NvcjxOb25OdWxsYWJsZTxUW1AxXT5bUDJdPlxuXG4vKipcbiAqIENyZWF0ZSBhbiBgQWNjZXNzb3JgIG9uIGEgYEdpby5TZXR0aW5nc2AncyBga2V5YC5cbiAqIFZhbHVlcyBhcmUgcmVjdXJzaXZlbHkgdW5wYWNrZWQuXG4gKlxuICogQHBhcmFtIG9iamVjdCBUaGUgYEdpby5TZXR0aW5nc2AgdG8gY3JlYXRlIHRoZSBgQWNjZXNzb3JgIG9uLlxuICogQHBhcmFtIGtleSBUaGUgc2V0dGluZ3Mga2V5XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVCaW5kaW5nPFQ+KHNldHRpbmdzOiBHaW8uU2V0dGluZ3MsIGtleTogc3RyaW5nKTogQWNjZXNzb3I8VD5cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUJpbmRpbmc8VD4ob2JqZWN0OiBHT2JqZWN0Lk9iamVjdCB8IEdpby5TZXR0aW5ncywga2V5OiBzdHJpbmcpOiBBY2Nlc3NvcjxUPiB7XG4gICAgY29uc3QgcHJvcCA9IGtlYmFiaWZ5KGtleSkgYXMga2V5b2YgdHlwZW9mIG9iamVjdFxuXG4gICAgY29uc3Qgc3Vic2NyaWJlOiBTdWJzY3JpYmVGdW5jdGlvbiA9IChjYWxsYmFjaykgPT4ge1xuICAgICAgICBjb25zdCBzaWcgPSBvYmplY3QgaW5zdGFuY2VvZiBHaW8uU2V0dGluZ3MgPyBcImNoYW5nZWRcIiA6IFwibm90aWZ5XCJcbiAgICAgICAgY29uc3QgaWQgPSBvYmplY3QuY29ubmVjdChgJHtzaWd9Ojoke3Byb3B9YCwgKCkgPT4gY2FsbGJhY2soKSlcbiAgICAgICAgcmV0dXJuICgpID0+IG9iamVjdC5kaXNjb25uZWN0KGlkKVxuICAgIH1cblxuICAgIGNvbnN0IGdldCA9ICgpOiBUID0+IHtcbiAgICAgICAgaWYgKG9iamVjdCBpbnN0YW5jZW9mIEdpby5TZXR0aW5ncykge1xuICAgICAgICAgICAgcmV0dXJuIG9iamVjdC5nZXRfdmFsdWUoa2V5KS5yZWN1cnNpdmVVbnBhY2soKSBhcyBUXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBnZXR0ZXIgPSBgZ2V0XyR7cHJvcC5yZXBsYWNlQWxsKFwiLVwiLCBcIl9cIil9YCBhcyBrZXlvZiB0eXBlb2Ygb2JqZWN0XG5cbiAgICAgICAgICAgIGlmIChnZXR0ZXIgaW4gb2JqZWN0ICYmIHR5cGVvZiBvYmplY3RbZ2V0dGVyXSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChvYmplY3RbZ2V0dGVyXSBhcyAoKSA9PiB1bmtub3duKSgpIGFzIFRcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHByb3AgaW4gb2JqZWN0KSByZXR1cm4gb2JqZWN0W3Byb3BdIGFzIFRcbiAgICAgICAgICAgIGlmIChrZXkgaW4gb2JqZWN0KSByZXR1cm4gb2JqZWN0W2tleSBhcyBrZXlvZiB0eXBlb2Ygb2JqZWN0XSBhcyBUXG5cbiAgICAgICAgICAgIHRocm93IEVycm9yKGBjYW5ub3QgZ2V0IHByb3BlcnR5ICR7a2V5fWApXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IEFjY2Vzc29yKGdldCwgc3Vic2NyaWJlKVxufVxuXG50eXBlIENvbm5lY3Rpb25IYW5kbGVyPFxuICAgIE8gZXh0ZW5kcyBHT2JqZWN0Lk9iamVjdCxcbiAgICBTIGV4dGVuZHMga2V5b2YgT1tcIiRzaWduYWxzXCJdLFxuICAgIFQsXG4+ID0gT1tcIiRzaWduYWxzXCJdW1NdIGV4dGVuZHMgKC4uLmFyZ3M6IGFueVtdKSA9PiBpbmZlciBSXG4gICAgPyB2b2lkIGV4dGVuZHMgUlxuICAgICAgICA/ICguLi5hcmdzOiBbLi4uUGFyYW1ldGVyczxPW1wiJHNpZ25hbHNcIl1bU10+LCBjdXJyZW50VmFsdWU6IFRdKSA9PiBUXG4gICAgICAgIDogbmV2ZXJcbiAgICA6IG5ldmVyXG5cbi8qKlxuICogQ3JlYXRlIGFuIGBBY2Nlc3NvcmAgd2hpY2ggc2V0cyB1cCBhIGxpc3Qgb2YgYEdPYmplY3QuT2JqZWN0YCBzaWduYWwgY29ubmVjdGlvbnMuXG4gKlxuICogYGBgdHMgRXhhbXBsZVxuICogY29uc3QgdmFsdWU6IEFjY2Vzc29yPHN0cmluZz4gPSBjcmVhdGVDb25uZWN0aW9uKFxuICogICBcImluaXRpYWwgdmFsdWVcIixcbiAqICAgW29iajEsIFwic2lnLW5hbWVcIiwgKC4uLmFyZ3MpID0+IFwic3RyXCJdLFxuICogICBbb2JqMiwgXCJzaWctbmFtZVwiLCAoLi4uYXJncykgPT4gXCJzdHJcIl1cbiAqIClcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSBpbml0IFRoZSBpbml0aWFsIHZhbHVlXG4gKiBAcGFyYW0gc2lnbmFscyBBIGxpc3Qgb2YgYEdPYmplY3QuT2JqZWN0YCwgc2lnbmFsIG5hbWUgYW5kIGNhbGxiYWNrIHBhaXJzIHRvIGNvbm5lY3QuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVDb25uZWN0aW9uPFxuICAgIFQsXG4gICAgTzEgZXh0ZW5kcyBHT2JqZWN0Lk9iamVjdCxcbiAgICBTMSBleHRlbmRzIGtleW9mIE8xW1wiJHNpZ25hbHNcIl0sXG4gICAgTzIgZXh0ZW5kcyBHT2JqZWN0Lk9iamVjdCxcbiAgICBTMiBleHRlbmRzIGtleW9mIE8yW1wiJHNpZ25hbHNcIl0sXG4gICAgTzMgZXh0ZW5kcyBHT2JqZWN0Lk9iamVjdCxcbiAgICBTMyBleHRlbmRzIGtleW9mIE8zW1wiJHNpZ25hbHNcIl0sXG4gICAgTzQgZXh0ZW5kcyBHT2JqZWN0Lk9iamVjdCxcbiAgICBTNCBleHRlbmRzIGtleW9mIE80W1wiJHNpZ25hbHNcIl0sXG4gICAgTzUgZXh0ZW5kcyBHT2JqZWN0Lk9iamVjdCxcbiAgICBTNSBleHRlbmRzIGtleW9mIE81W1wiJHNpZ25hbHNcIl0sXG4gICAgTzYgZXh0ZW5kcyBHT2JqZWN0Lk9iamVjdCxcbiAgICBTNiBleHRlbmRzIGtleW9mIE82W1wiJHNpZ25hbHNcIl0sXG4gICAgTzcgZXh0ZW5kcyBHT2JqZWN0Lk9iamVjdCxcbiAgICBTNyBleHRlbmRzIGtleW9mIE83W1wiJHNpZ25hbHNcIl0sXG4gICAgTzggZXh0ZW5kcyBHT2JqZWN0Lk9iamVjdCxcbiAgICBTOCBleHRlbmRzIGtleW9mIE84W1wiJHNpZ25hbHNcIl0sXG4gICAgTzkgZXh0ZW5kcyBHT2JqZWN0Lk9iamVjdCxcbiAgICBTOSBleHRlbmRzIGtleW9mIE85W1wiJHNpZ25hbHNcIl0sXG4+KFxuICAgIGluaXQ6IFQsXG4gICAgaDE6IFtPMSwgUzEsIENvbm5lY3Rpb25IYW5kbGVyPE8xLCBTMSwgVD5dLFxuICAgIGgyPzogW08yLCBTMiwgQ29ubmVjdGlvbkhhbmRsZXI8TzIsIFMyLCBUPl0sXG4gICAgaDM/OiBbTzMsIFMzLCBDb25uZWN0aW9uSGFuZGxlcjxPMywgUzMsIFQ+XSxcbiAgICBoND86IFtPNCwgUzQsIENvbm5lY3Rpb25IYW5kbGVyPE80LCBTNCwgVD5dLFxuICAgIGg1PzogW081LCBTNSwgQ29ubmVjdGlvbkhhbmRsZXI8TzUsIFM1LCBUPl0sXG4gICAgaDY/OiBbTzYsIFM2LCBDb25uZWN0aW9uSGFuZGxlcjxPNiwgUzYsIFQ+XSxcbiAgICBoNz86IFtPNywgUzcsIENvbm5lY3Rpb25IYW5kbGVyPE83LCBTNywgVD5dLFxuICAgIGg4PzogW084LCBTOCwgQ29ubmVjdGlvbkhhbmRsZXI8TzgsIFM4LCBUPl0sXG4gICAgaDk/OiBbTzksIFM5LCBDb25uZWN0aW9uSGFuZGxlcjxPOSwgUzksIFQ+XSxcbikge1xuICAgIGxldCB2YWx1ZSA9IGluaXRcbiAgICBsZXQgZGlzcG9zZTogQXJyYXk8RGlzcG9zZUZ1bmN0aW9uPlxuICAgIGNvbnN0IHN1YnNjcmliZXJzID0gbmV3IFNldDxTdWJzY3JpYmVDYWxsYmFjaz4oKVxuICAgIGNvbnN0IHNpZ25hbHMgPSBbaDEsIGgyLCBoMywgaDQsIGg1LCBoNiwgaDcsIGg4LCBoOV0uZmlsdGVyKChoKSA9PiBoICE9PSB1bmRlZmluZWQpXG5cbiAgICBjb25zdCBzdWJzY3JpYmU6IFN1YnNjcmliZUZ1bmN0aW9uID0gKGNhbGxiYWNrKSA9PiB7XG4gICAgICAgIGlmIChzdWJzY3JpYmVycy5zaXplID09PSAwKSB7XG4gICAgICAgICAgICBkaXNwb3NlID0gc2lnbmFscy5tYXAoKFtvYmplY3QsIHNpZ25hbCwgY2FsbGJhY2tdKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgaWQgPSBHT2JqZWN0Lk9iamVjdC5wcm90b3R5cGUuY29ubmVjdC5jYWxsKFxuICAgICAgICAgICAgICAgICAgICBvYmplY3QsXG4gICAgICAgICAgICAgICAgICAgIHNpZ25hbCBhcyBzdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgIChfLCAuLi5hcmdzKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXdWYWx1ZSA9IGNhbGxiYWNrKC4uLmFyZ3MsIHZhbHVlKVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlICE9PSBuZXdWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gbmV3VmFsdWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVycy5mb3JFYWNoKChjYikgPT4gY2IoKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICApXG5cbiAgICAgICAgICAgICAgICByZXR1cm4gKCkgPT4gR09iamVjdC5PYmplY3QucHJvdG90eXBlLmRpc2Nvbm5lY3QuY2FsbChvYmplY3QsIGlkKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuXG4gICAgICAgIHN1YnNjcmliZXJzLmFkZChjYWxsYmFjaylcblxuICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgc3Vic2NyaWJlcnMuZGVsZXRlKGNhbGxiYWNrKVxuICAgICAgICAgICAgaWYgKHN1YnNjcmliZXJzLnNpemUgPT09IDApIHtcbiAgICAgICAgICAgICAgICBkaXNwb3NlLm1hcCgoY2IpID0+IGNiKCkpXG4gICAgICAgICAgICAgICAgZGlzcG9zZS5sZW5ndGggPSAwXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IEFjY2Vzc29yKCgpID0+IHZhbHVlLCBzdWJzY3JpYmUpXG59XG5cbi8qKlxuICogQ3JlYXRlIGEgc2lnbmFsIGZyb20gYSBwcm92aWVyIGZ1bmN0aW9uLlxuICogVGhlIHByb3ZpZGVyIGlzIGNhbGxlZCB3aGVuIHRoZSBmaXJzdCBzdWJzY3JpYmVyIGFwcGVhcnMgYW5kIHRoZSByZXR1cm5lZCBkaXNwb3NlXG4gKiBmdW5jdGlvbiBmcm9tIHRoZSBwcm92aWRlciB3aWxsIGJlIGNhbGxlZCB3aGVuIHRoZSBudW1iZXIgb2Ygc3Vic2NyaWJlcnMgZHJvcCB0byB6ZXJvLlxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogYGBgdHNcbiAqIGNvbnN0IHZhbHVlID0gY3JlYXRlRXh0ZXJuYWwoMCwgKHNldCkgPT4ge1xuICogICBjb25zdCBpbnRlcnZhbCA9IHNldEludGVydmFsKCgpID0+IHNldCgodikgPT4gdiArIDEpKVxuICogICByZXR1cm4gKCkgPT4gY2xlYXJJbnRlcnZhbChpbnRlcnZhbClcbiAqIH0pXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0gaW5pdCBUaGUgaW5pdGlhbCB2YWx1ZVxuICogQHBhcmFtIHByb2R1Y2VyIFRoZSBwcm9kdWNlciBmdW5jdGlvbiB3aGljaCBzaG91bGQgcmV0dXJuIGEgY2xlYW51cCBmdW5jdGlvblxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRXh0ZXJuYWw8VD4oXG4gICAgaW5pdDogVCxcbiAgICBwcm9kdWNlcjogKHNldDogU2V0dGVyPFQ+KSA9PiBEaXNwb3NlRnVuY3Rpb24sXG4pOiBBY2Nlc3NvcjxUPiB7XG4gICAgbGV0IGN1cnJlbnRWYWx1ZSA9IGluaXRcbiAgICBsZXQgZGlzcG9zZTogRGlzcG9zZUZ1bmN0aW9uXG4gICAgY29uc3Qgc3Vic2NyaWJlcnMgPSBuZXcgU2V0PFN1YnNjcmliZUNhbGxiYWNrPigpXG5cbiAgICBjb25zdCBzdWJzY3JpYmU6IFN1YnNjcmliZUZ1bmN0aW9uID0gKGNhbGxiYWNrKSA9PiB7XG4gICAgICAgIGlmIChzdWJzY3JpYmVycy5zaXplID09PSAwKSB7XG4gICAgICAgICAgICBkaXNwb3NlID0gcHJvZHVjZXIoKHY6IHVua25vd24pID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBuZXdWYWx1ZTogVCA9IHR5cGVvZiB2ID09PSBcImZ1bmN0aW9uXCIgPyB2KGN1cnJlbnRWYWx1ZSkgOiB2XG4gICAgICAgICAgICAgICAgaWYgKG5ld1ZhbHVlICE9PSBjdXJyZW50VmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFZhbHVlID0gbmV3VmFsdWVcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlcnMuZm9yRWFjaCgoY2IpID0+IGNiKCkpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuXG4gICAgICAgIHN1YnNjcmliZXJzLmFkZChjYWxsYmFjaylcblxuICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgc3Vic2NyaWJlcnMuZGVsZXRlKGNhbGxiYWNrKVxuICAgICAgICAgICAgaWYgKHN1YnNjcmliZXJzLnNpemUgPT09IDApIHtcbiAgICAgICAgICAgICAgICBkaXNwb3NlKClcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBuZXcgQWNjZXNzb3IoKCkgPT4gY3VycmVudFZhbHVlLCBzdWJzY3JpYmUpXG59XG5cbnR5cGUgRGVlcEluZmVyPFQgZXh0ZW5kcyBzdHJpbmc+ID0gUmV0dXJuVHlwZTxHTGliLlZhcmlhbnQ8VD5bXCJkZWVwVW5wYWNrXCJdPlxudHlwZSBSZWN1cnNpdmVJbmZlcjxUIGV4dGVuZHMgc3RyaW5nPiA9IFJldHVyblR5cGU8R0xpYi5WYXJpYW50PFQ+W1wicmVjdXJzaXZlVW5wYWNrXCJdPlxuXG4vKiogQGV4cGVyaW1lbnRhbCAqL1xudHlwZSBTZXR0aW5nczxUIGV4dGVuZHMgUmVjb3JkPHN0cmluZywgc3RyaW5nPj4gPSB7XG4gICAgW0sgaW4ga2V5b2YgVCBhcyBVbmNhcGl0YWxpemU8UGFzY2FsaWZ5PEs+Pl06IEFjY2Vzc29yPFJlY3Vyc2l2ZUluZmVyPFRbS10+PlxufSAmIHtcbiAgICBbSyBpbiBrZXlvZiBUIGFzIGBzZXQke1Bhc2NhbGlmeTxLPn1gXTogU2V0dGVyPERlZXBJbmZlcjxUW0tdPj5cbn1cblxuLyoqXG4gKiBAZXhwZXJpbWVudGFsXG4gKlxuICogV3JhcCBhIHtAbGluayBHaW8uU2V0dGluZ3N9IGludG8gYSBjb2xsZWN0aW9uIG9mIHNldHRlcnMgYW5kIGFjY2Vzc29ycy5cbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqIGBgYHRzXG4gKiBjb25zdCBzID0gY3JlYXRlU2V0dGluZ3Moc2V0dGluZ3MsIHtcbiAqICAgXCJjb21wbGV4LWtleVwiOiBcImF7c2F7c3N9fVwiLFxuICogICBcInNpbXBsZS1rZXlcIjogXCJzXCIsXG4gKiB9KVxuICpcbiAqIHMuY29tcGxleEtleS5zdWJzY3JpYmUoKCkgPT4ge1xuICogICBwcmludChzLmNvbXBsZXhLZXkuZ2V0KCkpXG4gKiB9KVxuICpcbiAqIHMuc2V0Q29tcGxleEtleSgocHJldikgPT4gKHtcbiAqICAgLi4ucHJldixcbiAqICAga2V5OiB7IG5lc3RlZDogXCJcIiB9LFxuICogfSkpXG4gKiBgYGBcbiAqL1xuLy8gVE9ETzogY29tZSB1cCB3aXRoIGFuIEFQSVxuLy8gLSB0byBtYW51YWxseSBhbm5vdGF0ZSBWYXJpYW50IHR5cGVkIHNldHRlcnMvZ2V0dGVyc1xuLy8gLSB0byBzZXQgcmVjdXJzaXZlIHZzIGRlZXAgdW5wYWNrIHBlciBrZXlcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTZXR0aW5nczxjb25zdCBUIGV4dGVuZHMgUmVjb3JkPHN0cmluZywgc3RyaW5nPj4oXG4gICAgc2V0dGluZ3M6IEdpby5TZXR0aW5ncyxcbiAgICBrZXlzOiBULFxuKTogU2V0dGluZ3M8VD4ge1xuICAgIHJldHVybiBPYmplY3QuZnJvbUVudHJpZXMoXG4gICAgICAgIE9iamVjdC5lbnRyaWVzKGtleXMpLmZsYXRNYXAoKFtrZXksIHR5cGVdKSA9PiBbXG4gICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgY2FtZWxpZnkoa2V5KSxcbiAgICAgICAgICAgICAgICBuZXcgQWNjZXNzb3IoXG4gICAgICAgICAgICAgICAgICAgICgpID0+IHNldHRpbmdzLmdldF92YWx1ZShrZXkpLnJlY3Vyc2l2ZVVucGFjaygpLFxuICAgICAgICAgICAgICAgICAgICAoY2FsbGJhY2spID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGlkID0gc2V0dGluZ3MuY29ubmVjdChgY2hhbmdlZDo6JHtrZXl9YCwgY2FsbGJhY2spXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKCkgPT4gc2V0dGluZ3MuZGlzY29ubmVjdChpZClcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICBgc2V0JHtrZXlbMF0udG9VcHBlckNhc2UoKSArIGNhbWVsaWZ5KGtleSkuc2xpY2UoMSl9YCxcbiAgICAgICAgICAgICAgICAodjogdW5rbm93bikgPT4ge1xuICAgICAgICAgICAgICAgICAgICBzZXR0aW5ncy5zZXRfdmFsdWUoXG4gICAgICAgICAgICAgICAgICAgICAgICBrZXksXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXcgR0xpYi5WYXJpYW50KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIHYgPT09IFwiZnVuY3Rpb25cIiA/IHYoc2V0dGluZ3MuZ2V0X3ZhbHVlKGtleSkuZGVlcFVucGFjaygpKSA6IHYsXG4gICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgIF0pLFxuICAgIClcbn1cbiIsICJpbXBvcnQgdHlwZSBHT2JqZWN0IGZyb20gXCJnaTovL0dPYmplY3RcIlxuXG5leHBvcnQgZnVuY3Rpb24ga2ViYWJpZnkoc3RyOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gc3RyXG4gICAgICAgIC5yZXBsYWNlKC8oW2Etel0pKFtBLVpdKS9nLCBcIiQxLSQyXCIpXG4gICAgICAgIC5yZXBsYWNlQWxsKFwiX1wiLCBcIi1cIilcbiAgICAgICAgLnRvTG93ZXJDYXNlKClcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNuYWtlaWZ5KHN0cjogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHN0clxuICAgICAgICAucmVwbGFjZSgvKFthLXpdKShbQS1aXSkvZywgXCIkMS0kMlwiKVxuICAgICAgICAucmVwbGFjZUFsbChcIi1cIiwgXCJfXCIpXG4gICAgICAgIC50b0xvd2VyQ2FzZSgpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjYW1lbGlmeShzdHI6IHN0cmluZykge1xuICAgIHJldHVybiBzdHIucmVwbGFjZSgvWy1fXSguKS9nLCAoXywgY2hhcikgPT4gY2hhci50b1VwcGVyQ2FzZSgpKVxufVxuXG5leHBvcnQgdHlwZSBQYXNjYWxpZnk8Uz4gPSBTIGV4dGVuZHMgYCR7aW5mZXIgSGVhZH0ke1wiLVwiIHwgXCJfXCJ9JHtpbmZlciBUYWlsfWBcbiAgICA/IGAke0NhcGl0YWxpemU8SGVhZD59JHtQYXNjYWxpZnk8VGFpbD59YFxuICAgIDogUyBleHRlbmRzIHN0cmluZ1xuICAgICAgPyBDYXBpdGFsaXplPFM+XG4gICAgICA6IG5ldmVyXG5cbmV4cG9ydCB0eXBlIFhtbE5vZGUgPSB7XG4gICAgbmFtZTogc3RyaW5nXG4gICAgYXR0cmlidXRlcz86IFJlY29yZDxzdHJpbmcsIHN0cmluZz5cbiAgICBjaGlsZHJlbj86IEFycmF5PFhtbE5vZGU+XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB4bWwoeyBuYW1lLCBhdHRyaWJ1dGVzLCBjaGlsZHJlbiB9OiBYbWxOb2RlKSB7XG4gICAgbGV0IGJ1aWxkZXIgPSBgPCR7bmFtZX1gXG5cbiAgICBjb25zdCBhdHRycyA9IE9iamVjdC5lbnRyaWVzKGF0dHJpYnV0ZXMgPz8gW10pXG5cbiAgICBpZiAoYXR0cnMubGVuZ3RoID4gMCkge1xuICAgICAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBhdHRycykge1xuICAgICAgICAgICAgYnVpbGRlciArPSBgICR7a2V5fT1cIiR7dmFsdWV9XCJgXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoY2hpbGRyZW4gJiYgY2hpbGRyZW4ubGVuZ3RoID4gMCkge1xuICAgICAgICBidWlsZGVyICs9IFwiPlwiXG4gICAgICAgIGZvciAoY29uc3Qgbm9kZSBvZiBjaGlsZHJlbikge1xuICAgICAgICAgICAgYnVpbGRlciArPSB4bWwobm9kZSlcbiAgICAgICAgfVxuICAgICAgICBidWlsZGVyICs9IGA8LyR7bmFtZX0+YFxuICAgIH0gZWxzZSB7XG4gICAgICAgIGJ1aWxkZXIgKz0gXCIgLz5cIlxuICAgIH1cblxuICAgIHJldHVybiBidWlsZGVyXG59XG5cbi8vIEJpbmRpbmdzIHdvcmsgb3ZlciBwcm9wZXJ0aWVzIGluIGtlYmFiLWNhc2UgYmVjYXVzZSB0aGF0cyB0aGUgY29udmVudGlvbiBvZiBnb2JqZWN0XG4vLyBob3dldmVyIGluIGpzIGl0cyBlaXRoZXIgc25ha2VfY2FzZSBvciBjYW1lbENhc2Vcbi8vIGFsc28gb24gREJ1cyBpbnRlcmZhY2VzIGl0cyBQYXNjYWxDYXNlIGJ5IGNvbnZlbnRpb25cbi8vIHNvIGFzIGEgd29ya2Fyb3VuZCB3ZSB1c2UgZ2V0X3Byb3BlcnR5X25hbWUgYW5kIG9ubHkgdXNlIHRoZSBwcm9wZXJ0eSBmaWVsZCBhcyBhIGZhbGxiYWNrXG5leHBvcnQgZnVuY3Rpb24gZGVmaW5lUHJvcGVydHlHZXR0ZXI8VCBleHRlbmRzIG9iamVjdD4ob2JqZWN0OiBULCBwcm9wOiBFeHRyYWN0PGtleW9mIFQsIHN0cmluZz4pIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqZWN0LCBgZ2V0XyR7a2ViYWJpZnkocHJvcCkucmVwbGFjZUFsbChcIi1cIiwgXCJfXCIpfWAsIHtcbiAgICAgICAgY29uZmlndXJhYmxlOiBmYWxzZSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6ICgpID0+IG9iamVjdFtwcm9wXSxcbiAgICB9KVxufVxuXG4vLyBhdHRlbXB0IHNldHRpbmcgYSBwcm9wZXJ0eSBvZiBHT2JqZWN0Lk9iamVjdFxuZXhwb3J0IGZ1bmN0aW9uIHNldChvYmo6IEdPYmplY3QuT2JqZWN0LCBwcm9wOiBzdHJpbmcsIHZhbHVlOiBhbnkpIHtcbiAgICBjb25zdCBrZXkgPSBzbmFrZWlmeShwcm9wKVxuICAgIGNvbnN0IGdldHRlciA9IGBnZXRfJHtrZXl9YCBhcyBrZXlvZiB0eXBlb2Ygb2JqXG4gICAgY29uc3Qgc2V0dGVyID0gYHNldF8ke2tleX1gIGFzIGtleW9mIHR5cGVvZiBvYmpcblxuICAgIGxldCBjdXJyZW50OiB1bmtub3duXG5cbiAgICBpZiAoZ2V0dGVyIGluIG9iaiAmJiB0eXBlb2Ygb2JqW2dldHRlcl0gPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICBjdXJyZW50ID0gKG9ialtnZXR0ZXJdIGFzICgpID0+IHVua25vd24pKClcbiAgICB9IGVsc2Uge1xuICAgICAgICBjdXJyZW50ID0gb2JqW3Byb3AgYXMga2V5b2YgdHlwZW9mIG9ial1cbiAgICB9XG5cbiAgICBpZiAoY3VycmVudCAhPT0gdmFsdWUpIHtcbiAgICAgICAgaWYgKHNldHRlciBpbiBvYmogJiYgdHlwZW9mIG9ialtzZXR0ZXJdID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIDsob2JqW3NldHRlcl0gYXMgKHY6IGFueSkgPT4gdm9pZCkodmFsdWUpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKG9iaiwgeyBbcHJvcF06IHZhbHVlIH0pXG4gICAgICAgIH1cbiAgICB9XG59XG4iLCAiaW1wb3J0IHR5cGUgR09iamVjdCBmcm9tIFwiZ2k6Ly9HT2JqZWN0XCJcbmltcG9ydCB7IHR5cGUgQWNjZXNzb3IgfSBmcm9tIFwiLi9zdGF0ZS5qc1wiXG5cbnR5cGUgR09iaiA9IEdPYmplY3QuT2JqZWN0XG5leHBvcnQgdHlwZSBDQzxUIGV4dGVuZHMgR09iaiA9IEdPYmo+ID0geyBuZXcgKHByb3BzOiBhbnkpOiBUIH1cbmV4cG9ydCB0eXBlIEZDPFQgZXh0ZW5kcyBHT2JqID0gR09iaj4gPSAocHJvcHM6IGFueSkgPT4gVFxuXG50eXBlIENzc1NldHRlciA9IChvYmplY3Q6IEdPYmosIGNzczogc3RyaW5nIHwgQWNjZXNzb3I8c3RyaW5nPikgPT4gdm9pZFxudHlwZSBDaGlsZEZuID0gKHBhcmVudDogR09iaiwgY2hpbGQ6IEdPYmogfCBudW1iZXIgfCBzdHJpbmcsIGluZGV4PzogbnVtYmVyKSA9PiB2b2lkXG5cbmV4cG9ydCBmdW5jdGlvbiBjb25maWd1ZShjb25mOiBQYXJ0aWFsPEpzeEVudj4pIHtcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihlbnYsIGNvbmYpXG59XG5cbnR5cGUgSnN4RW52ID0ge1xuICAgIGludHJpbnNpY0VsZW1lbnRzOiBSZWNvcmQ8c3RyaW5nLCBDQyB8IEZDPlxuICAgIGFkZENoaWxkOiBDaGlsZEZuXG4gICAgc2V0Q3NzOiBDc3NTZXR0ZXJcbiAgICBzZXRDbGFzczogQ3NzU2V0dGVyXG4gICAgaW5pdFByb3BzOiAocHJvcHM6IGFueSkgPT4gdm9pZFxuICAgIGRlZmF1bHRDbGVhbnVwOiAob2JqZWN0OiBHT2JqKSA9PiB2b2lkXG59XG5cbmZ1bmN0aW9uIG1pc3NpbmdJbXBsKCkge1xuICAgIHRocm93IEVycm9yKFwibWlzc2luZyBpbXBsXCIpXG59XG5cbmV4cG9ydCBjb25zdCBlbnY6IEpzeEVudiA9IHtcbiAgICBpbnRyaW5zaWNFbGVtZW50czoge30sXG4gICAgYWRkQ2hpbGQ6IG1pc3NpbmdJbXBsLFxuICAgIHNldENzczogbWlzc2luZ0ltcGwsXG4gICAgc2V0Q2xhc3M6IG1pc3NpbmdJbXBsLFxuICAgIGluaXRQcm9wczogKCkgPT4gdm9pZCAwLFxuICAgIGRlZmF1bHRDbGVhbnVwOiAoKSA9PiB2b2lkIDAsXG59XG4iLCAiZXhwb3J0IGNsYXNzIFNjb3BlIHtcbiAgICBzdGF0aWMgY3VycmVudD86IFNjb3BlIHwgbnVsbFxuXG4gICAgcGFyZW50PzogU2NvcGUgfCBudWxsXG4gICAgY29udGV4dHMgPSBuZXcgTWFwPENvbnRleHQsIHVua25vd24+KClcblxuICAgIHByaXZhdGUgY2xlYW51cHMgPSBuZXcgU2V0PCgpID0+IHZvaWQ+KClcbiAgICBwcml2YXRlIG1vdW50cyA9IG5ldyBTZXQ8KCkgPT4gdm9pZD4oKVxuICAgIHByaXZhdGUgbW91bnRlZCA9IGZhbHNlXG5cbiAgICBjb25zdHJ1Y3RvcihwYXJlbnQ/OiBTY29wZSB8IG51bGwpIHtcbiAgICAgICAgdGhpcy5wYXJlbnQgPSBwYXJlbnRcbiAgICB9XG5cbiAgICBvbkNsZWFudXAoY2FsbGJhY2s6ICgpID0+IHZvaWQpIHtcbiAgICAgICAgdGhpcy5jbGVhbnVwcz8uYWRkKGNhbGxiYWNrKVxuICAgIH1cblxuICAgIG9uTW91bnQoY2FsbGJhY2s6ICgpID0+IHZvaWQpIHtcbiAgICAgICAgaWYgKHRoaXMucGFyZW50ICYmICF0aGlzLnBhcmVudC5tb3VudGVkKSB7XG4gICAgICAgICAgICB0aGlzLnBhcmVudC5vbk1vdW50KGNhbGxiYWNrKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5tb3VudHMuYWRkKGNhbGxiYWNrKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcnVuPFQ+KGZuOiAoKSA9PiBUKSB7XG4gICAgICAgIGNvbnN0IHByZXYgPSBTY29wZS5jdXJyZW50XG4gICAgICAgIFNjb3BlLmN1cnJlbnQgPSB0aGlzXG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBmbigpXG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICB0aGlzLm1vdW50cy5mb3JFYWNoKChjYikgPT4gY2IoKSlcbiAgICAgICAgICAgIHRoaXMubW91bnRzLmNsZWFyKClcbiAgICAgICAgICAgIHRoaXMubW91bnRlZCA9IHRydWVcbiAgICAgICAgICAgIFNjb3BlLmN1cnJlbnQgPSBwcmV2XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBkaXNwb3NlKCkge1xuICAgICAgICB0aGlzLmNsZWFudXBzLmZvckVhY2goKGNiKSA9PiBjYigpKVxuICAgICAgICB0aGlzLmNsZWFudXBzLmNsZWFyKClcbiAgICAgICAgdGhpcy5jb250ZXh0cy5jbGVhcigpXG4gICAgICAgIGRlbGV0ZSB0aGlzLnBhcmVudFxuICAgIH1cbn1cblxuZXhwb3J0IHR5cGUgQ29udGV4dDxUID0gYW55PiA9IHtcbiAgICB1c2UoKTogVFxuICAgIHByb3ZpZGU8Uj4odmFsdWU6IFQsIGZuOiAoKSA9PiBSKTogUlxuICAgIChwcm9wczogeyB2YWx1ZTogVDsgY2hpbGRyZW46ICgpID0+IEpTWC5FbGVtZW50IH0pOiBKU1guRWxlbWVudFxufVxuXG4vKipcbiAqIEV4YW1wbGUgVXNhZ2U6XG4gKiBgYGB0c3hcbiAqIGNvbnN0IE15Q29udGV4dCA9IGNyZWF0ZUNvbnRleHQoXCJmYWxsYmFjay12YWx1ZVwiKVxuICpcbiAqIGZ1bmN0aW9uIENvbnN1bWVyQ29tcG9uZW50KCkge1xuICogICBjb25zdCB2YWx1ZSA9IE15Q29udGV4dC51c2UoKVxuICpcbiAqICAgcmV0dXJuIDxHdGsuTGFiZWwgbGFiZWw9e3ZhbHVlfSAvPlxuICogfVxuICpcbiAqIGZ1bmN0aW9uIFByb3ZpZGVyQ29tcG9uZW50KCkge1xuICogICByZXR1cm4gKFxuICogICAgIDxHdGsuQm94PlxuICogICAgICAgPE15Q29udGV4dCB2YWx1ZT1cIm15LXZhbHVlXCI+XG4gKiAgICAgICAgIHsoKSA9PiA8Q29uc3VtZXJDb21wb25lbnQgLz59XG4gKiAgICAgICA8L015Q29udGV4dD5cbiAqICAgICA8L0d0ay5Cb3g+XG4gKiAgIClcbiAqIH1cbiAqIGBgYFxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQ29udGV4dDxUPihkZWZhdWx0VmFsdWU6IFQpOiBDb250ZXh0PFQ+IHtcbiAgICBsZXQgY3R4OiBDb250ZXh0PFQ+XG5cbiAgICBmdW5jdGlvbiBwcm92aWRlPFI+KHZhbHVlOiBULCBmbjogKCkgPT4gUik6IFIge1xuICAgICAgICBjb25zdCBzY29wZSA9IGdldFNjb3BlKClcbiAgICAgICAgc2NvcGUuY29udGV4dHMuc2V0KGN0eCwgdmFsdWUpXG4gICAgICAgIHJldHVybiBzY29wZS5ydW4oZm4pXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdXNlKCk6IFQge1xuICAgICAgICBsZXQgc2NvcGUgPSBTY29wZS5jdXJyZW50XG4gICAgICAgIHdoaWxlIChzY29wZSkge1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBzY29wZS5jb250ZXh0cy5nZXQoY3R4KVxuICAgICAgICAgICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHJldHVybiB2YWx1ZSBhcyBUXG4gICAgICAgICAgICBzY29wZSA9IHNjb3BlLnBhcmVudFxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkZWZhdWx0VmFsdWVcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb250ZXh0KHsgdmFsdWUsIGNoaWxkcmVuIH06IHsgdmFsdWU6IFQ7IGNoaWxkcmVuOiAoKSA9PiBKU1guRWxlbWVudCB9KSB7XG4gICAgICAgIHJldHVybiBwcm92aWRlKHZhbHVlLCBjaGlsZHJlbilcbiAgICB9XG5cbiAgICByZXR1cm4gKGN0eCA9IE9iamVjdC5hc3NpZ24oY29udGV4dCwge1xuICAgICAgICBwcm92aWRlLFxuICAgICAgICB1c2UsXG4gICAgfSkpXG59XG5cbi8qKlxuICogR2V0cyB0aGUgc2NvcGUgdGhhdCBvd25zIHRoZSBjdXJyZW50bHkgcnVubmluZyBjb2RlLlxuICpcbiAqIEV4YW1wbGU6XG4gKiBgYGB0c1xuICogY29uc3Qgc2NvcGUgPSBnZXRTY29wZSgpXG4gKiBzZXRUaW1lb3V0KCgpID0+IHtcbiAqICAgLy8gVGhpcyBjYWxsYmFjayBnZXRzIHJ1biB3aXRob3V0IGFuIG93bmVyIHNjb3BlLlxuICogICAvLyBSZXN0b3JlIG93bmVyIHZpYSBzY29wZS5ydW46XG4gKiAgIHNjb3BlLnJ1bigoKSA9PiB7XG4gKiAgICAgY29uc3QgZm9vID0gRm9vQ29udGV4dC51c2UoKVxuICogICAgIG9uQ2xlYW51cCgoKSA9PiB7XG4gKiAgICAgICBwcmludChcInNvbWUgY2xlYW51cFwiKVxuICogICAgIH0pXG4gKiAgIH0pXG4gKiB9LCAxMDAwKVxuICogYGBgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRTY29wZSgpOiBTY29wZSB7XG4gICAgY29uc3Qgc2NvcGUgPSBTY29wZS5jdXJyZW50XG4gICAgaWYgKCFzY29wZSkge1xuICAgICAgICB0aHJvdyBFcnJvcihcImNhbm5vdCBnZXQgc2NvcGU6IG91dCBvZiB0cmFja2luZyBjb250ZXh0XCIpXG4gICAgfVxuXG4gICAgcmV0dXJuIHNjb3BlXG59XG5cbi8qKlxuICogQXR0YWNoIGEgY2xlYW51cCBjYWxsYmFjayB0byB0aGUgY3VycmVudCB7QGxpbmsgU2NvcGV9LlxuICovXG5leHBvcnQgZnVuY3Rpb24gb25DbGVhbnVwKGNsZWFudXA6ICgpID0+IHZvaWQpIHtcbiAgICBpZiAoIVNjb3BlLmN1cnJlbnQpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihFcnJvcihcIm91dCBvZiB0cmFja2luZyBjb250ZXh0OiB3aWxsIG5vdCBiZSBhYmxlIHRvIGNsZWFudXBcIikpXG4gICAgfVxuXG4gICAgU2NvcGUuY3VycmVudD8ub25DbGVhbnVwKGNsZWFudXApXG59XG5cbi8qKlxuICogQXR0YWNoIGEgY2FsbGJhY2sgdG8gcnVuIHdoZW4gdGhlIGN1cnJlbnRseSBydW5uaW5nIHtAbGluayBTY29wZX0gcmV0dXJucy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG9uTW91bnQoY2xlYW51cDogKCkgPT4gdm9pZCkge1xuICAgIGlmICghU2NvcGUuY3VycmVudCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKEVycm9yKFwiY2Fubm90IGF0dGFjaCBvbk1vdW50OiBvdXQgb2YgdHJhY2tpbmcgY29udGV4dFwiKSlcbiAgICB9XG5cbiAgICBTY29wZS5jdXJyZW50Py5vbk1vdW50KGNsZWFudXApXG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIHJvb3Qge0BsaW5rIFNjb3BlfSB0aGF0IHdoZW4gZGlzcG9zZWQgd2lsbCByZW1vdmVcbiAqIGFueSBjaGlsZCBzaWduYWwgaGFuZGxlciBvciBzdGF0ZSBzdWJzY3JpYmVyLlxuICpcbiAqIEV4YW1wbGU6XG4gKiBgYGB0c3hcbiAqIGNyZWF0ZVJvb3QoKGRpc3Bvc2UpID0+IHtcbiAqICAgbGV0IHJvb3Q6IEd0ay5XaW5kb3dcbiAqXG4gKiAgIGNvbnN0IFtzdGF0ZV0gPSBjcmVhdGVTdGF0ZShcInZhbHVlXCIpXG4gKlxuICogICBjb25zdCByZW1vdmUgPSAoKSA9PiB7XG4gKiAgICAgcm9vdC5kZXN0cm95KClcbiAqICAgICBkaXNwb3NlKClcbiAqICAgfVxuICpcbiAqICAgcmV0dXJuIChcbiAqICAgICA8R3RrLldpbmRvdyAkPXsoc2VsZikgPT4gKHJvb3QgPSBzZWxmKX0+XG4gKiAgICAgICA8R3RrLkJveD5cbiAqICAgICAgICAgPEd0ay5MYWJlbCBsYWJlbD17c3RhdGV9IC8+XG4gKiAgICAgICAgIDxHdGsuQnV0dG9uICRjbGlja2VkPXtyZW1vdmV9IC8+XG4gKiAgICAgICA8L0d0ay5Cb3g+XG4gKiAgICAgPC9HdGsuV2luZG93PlxuICogICApXG4gKiB9KVxuICogYGBgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVSb290PFQ+KGZuOiAoZGlzcG9zZTogKCkgPT4gdm9pZCkgPT4gVCkge1xuICAgIGNvbnN0IHNjb3BlID0gbmV3IFNjb3BlKG51bGwpXG4gICAgcmV0dXJuIHNjb3BlLnJ1bigoKSA9PiBmbigoKSA9PiBzY29wZS5kaXNwb3NlKCkpKVxufVxuIiwgImltcG9ydCBHT2JqZWN0IGZyb20gXCJnaTovL0dPYmplY3RcIlxuaW1wb3J0IHsgcmVnaXN0ZXJEZXN0cm95YWJsZVR5cGUgfSBmcm9tIFwiLi4vZ25vbWUvc2lnbmFsVHJhY2tlci5qc1wiXG5cbi8vIFRPRE86IEZyYWdtZW50IHNob3VsZCBpbXBsZW1lbnQgR2lvLkxpc3RNb2RlbFxuXG5leHBvcnQgY2xhc3MgRnJhZ21lbnQ8VCA9IGFueT4gZXh0ZW5kcyBHT2JqZWN0Lk9iamVjdCB7XG4gICAgc3RhdGljIFtHT2JqZWN0LnNpZ25hbHNdID0ge1xuICAgICAgICBcImRlc3Ryb3lcIjoge30sXG5cbiAgICAgICAgXCJjaGlsZC1hZGRlZFwiOiB7XG4gICAgICAgICAgICBwYXJhbV90eXBlczogW0dPYmplY3QuVFlQRV9PQkpFQ1QsIEdPYmplY3QuVFlQRV9VSU5UXSxcbiAgICAgICAgfSxcbiAgICAgICAgXCJjaGlsZC1yZW1vdmVkXCI6IHtcbiAgICAgICAgICAgIHBhcmFtX3R5cGVzOiBbR09iamVjdC5UWVBFX09CSkVDVCwgR09iamVjdC5UWVBFX1VJTlRdLFxuICAgICAgICB9LFxuICAgIH1cblxuICAgIHN0YXRpYyBbR09iamVjdC5wcm9wZXJ0aWVzXSA9IHtcbiAgICAgICAgY2hpbGRyZW46IEdPYmplY3QuUGFyYW1TcGVjLmpzb2JqZWN0KFwiY2hpbGRyZW5cIiwgXCJcIiwgXCJcIiwgR09iamVjdC5QYXJhbUZsYWdzLlJFQURBQkxFKSxcbiAgICB9XG5cbiAgICBzdGF0aWMge1xuICAgICAgICBHT2JqZWN0LnJlZ2lzdGVyQ2xhc3ModGhpcylcbiAgICAgICAgcmVnaXN0ZXJEZXN0cm95YWJsZVR5cGUodGhpcylcbiAgICB9XG5cbiAgICBzdGF0aWMgbmV3PFQ+KGNoaWxkcmVuOiBBcnJheTxUPiA9IFtdKSB7XG4gICAgICAgIHJldHVybiBuZXcgRnJhZ21lbnQoeyBjaGlsZHJlbiB9KVxuICAgIH1cblxuICAgIHByaXZhdGUgY29ubmVjdGlvbklkcyA9IG5ldyBTZXQ8bnVtYmVyPigpXG4gICAgcHJpdmF0ZSBfY2hpbGRyZW46IEFycmF5PFQ+XG5cbiAgICBnZXQgY2hpbGRyZW4oKSB7XG4gICAgICAgIHJldHVybiBbLi4udGhpcy5fY2hpbGRyZW5dXG4gICAgfVxuXG4gICAgYWRkQ2hpbGQoY2hpbGQ6IFQsIGluZGV4OiBudW1iZXIgPSAtMSk6IHZvaWQge1xuICAgICAgICBpZiAoY2hpbGQgaW5zdGFuY2VvZiBGcmFnbWVudCkge1xuICAgICAgICAgICAgdGhyb3cgRXJyb3IoYG5lc3RpbmcgRnJhZ21lbnRzIGFyZSBub3QgeWV0IHN1cHBvcnRlZGApXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaW5kZXggPiAwKSB7XG4gICAgICAgICAgICB0aGlzLl9jaGlsZHJlbiA9IFtcbiAgICAgICAgICAgICAgICAuLi50aGlzLl9jaGlsZHJlbi5zbGljZSgwLCBpbmRleCksXG4gICAgICAgICAgICAgICAgY2hpbGQsXG4gICAgICAgICAgICAgICAgLi4udGhpcy5fY2hpbGRyZW4uc2xpY2UoaW5kZXgpLFxuICAgICAgICAgICAgXVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fY2hpbGRyZW4ucHVzaChjaGlsZClcbiAgICAgICAgICAgIGluZGV4ID0gdGhpcy5fY2hpbGRyZW4ubGVuZ3RoIC0gMVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5lbWl0KFwiY2hpbGQtYWRkZWRcIiwgY2hpbGQsIGluZGV4KVxuICAgICAgICB0aGlzLm5vdGlmeShcImNoaWxkcmVuXCIpXG4gICAgfVxuXG4gICAgaGFzQ2hpbGQoY2hpbGQ6IFQpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NoaWxkcmVuLmZpbmRJbmRleCgoY2gpID0+IGNoID09PSBjaGlsZCkgPiAtMVxuICAgIH1cblxuICAgIHJlbW92ZUNoaWxkKGNoaWxkOiBUKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy5fY2hpbGRyZW4uZmluZEluZGV4KChpKSA9PiBpID09PSBjaGlsZClcbiAgICAgICAgdGhpcy5fY2hpbGRyZW4uc3BsaWNlKGluZGV4LCAxKVxuXG4gICAgICAgIHRoaXMuZW1pdChcImNoaWxkLXJlbW92ZWRcIiwgY2hpbGQsIGluZGV4KVxuICAgICAgICB0aGlzLm5vdGlmeShcImNoaWxkcmVuXCIpXG4gICAgfVxuXG4gICAgY29uc3RydWN0b3IoeyBjaGlsZHJlbiA9IFtdIH06IFBhcnRpYWw8eyBjaGlsZHJlbjogQXJyYXk8VD4gfCBUIH0+ID0ge30pIHtcbiAgICAgICAgc3VwZXIoKVxuICAgICAgICB0aGlzLl9jaGlsZHJlbiA9IEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pID8gY2hpbGRyZW4gOiBbY2hpbGRyZW5dXG4gICAgfVxuXG4gICAgY29ubmVjdChzaWduYWw6IHN0cmluZywgY2FsbGJhY2s6IChfOiB0aGlzLCAuLi5hcmdzOiBhbnlbXSkgPT4gdm9pZCk6IG51bWJlciB7XG4gICAgICAgIGNvbnN0IGlkID0gc3VwZXIuY29ubmVjdChzaWduYWwsIGNhbGxiYWNrKVxuICAgICAgICB0aGlzLmNvbm5lY3Rpb25JZHMuYWRkKGlkKVxuICAgICAgICByZXR1cm4gaWRcbiAgICB9XG5cbiAgICBkaXNjb25uZWN0KGlkOiBudW1iZXIpOiB2b2lkIHtcbiAgICAgICAgc3VwZXIuZGlzY29ubmVjdChpZClcbiAgICAgICAgdGhpcy5jb25uZWN0aW9uSWRzLmRlbGV0ZShpZClcbiAgICB9XG5cbiAgICBkZXN0cm95KCkge1xuICAgICAgICB0aGlzLmVtaXQoXCJkZXN0cm95XCIpXG4gICAgICAgIGZvciAoY29uc3QgaWQgb2YgdGhpcy5jb25uZWN0aW9uSWRzLnZhbHVlcygpKSB7XG4gICAgICAgICAgICBzdXBlci5kaXNjb25uZWN0KGlkKVxuICAgICAgICB9XG4gICAgfVxufVxuIiwgImltcG9ydCB0eXBlIEdPYmplY3QgZnJvbSBcImdpOi8vR09iamVjdFwiXG5cbnR5cGUgVHlwZSA9IHsgbmV3ICguLi5hcmdzOiBhbnlbXSk6IEdPYmplY3QuT2JqZWN0IH1cblxuLy8gQHRzLWV4cGVjdC1lcnJvciBtaXNzaW5nIHR5cGVzXG5jb25zdCBtb2QgPSBpbXBvcnQoXCJyZXNvdXJjZTovLy9vcmcvZ25vbWUvc2hlbGwvbWlzYy9zaWduYWxUcmFja2VyLmpzXCIpXG5cbmV4cG9ydCBjb25zdCByZWdpc3RlckRlc3Ryb3lhYmxlVHlwZTogKHR5cGU6IFR5cGUpID0+IHZvaWQgPSBhd2FpdCBtb2RcbiAgICAudGhlbigobW9kKSA9PiBtb2QucmVnaXN0ZXJEZXN0cm95YWJsZVR5cGUpXG4gICAgLmNhdGNoKCgpID0+ICgpID0+IHZvaWQgMClcbiIsICJpbXBvcnQgeyBGcmFnbWVudCB9IGZyb20gXCIuL0ZyYWdtZW50LmpzXCJcbmltcG9ydCB7IEFjY2Vzc29yLCBTdGF0ZSwgY3JlYXRlU3RhdGUgfSBmcm9tIFwiLi9zdGF0ZS5qc1wiXG5pbXBvcnQgeyBlbnYgfSBmcm9tIFwiLi9lbnYuanNcIlxuaW1wb3J0IHsgZ2V0U2NvcGUsIG9uQ2xlYW51cCwgU2NvcGUgfSBmcm9tIFwiLi9zY29wZS5qc1wiXG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnNcbmltcG9ydCB0eXBlIENsdXR0ZXIgZnJvbSBcImdpOi8vQ2x1dHRlclwiXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXG5pbXBvcnQgdHlwZSBHdGsgZnJvbSBcImdpOi8vR3RrP3ZlcnNpb249My4wXCJcblxuaW50ZXJmYWNlIEZvclByb3BzPEl0ZW0sIEVsIGV4dGVuZHMgSlNYLkVsZW1lbnQsIEtleT4ge1xuICAgIGVhY2g6IEFjY2Vzc29yPEl0ZXJhYmxlPEl0ZW0+PlxuICAgIGNoaWxkcmVuOiAoaXRlbTogSXRlbSwgaW5kZXg6IEFjY2Vzc29yPG51bWJlcj4pID0+IEVsXG5cbiAgICAvKipcbiAgICAgKiBGdW5jdGlvbiB0byBydW4gZm9yIGVhY2ggcmVtb3ZlZCBlbGVtZW50LlxuICAgICAqIFRoZSBkZWZhdWx0IHZhbHVlIGRlcGVuZHMgb24gdGhlIGVudmlyb25tZW50OlxuICAgICAqXG4gICAgICogLSAqKkd0azQqKjogbnVsbFxuICAgICAqIC0gKipHdGszKio6IHtAbGluayBHdGsuV2lkZ2V0LnByb3RvdHlwZS5kZXN0cm95fVxuICAgICAqIC0gKipHbm9tZSoqOiB7QGxpbmsgQ2x1dHRlci5BY3Rvci5wcm90b3R5cGUuZGVzdHJveX1cbiAgICAgKi9cbiAgICBjbGVhbnVwPzogbnVsbCB8ICgoZWxlbWVudDogRWwsIGl0ZW06IEl0ZW0sIGluZGV4OiBudW1iZXIpID0+IHZvaWQpXG5cbiAgICAvKipcbiAgICAgKiBGdW5jdGlvbiB0aGF0IGdlbmVyYXRlcyB0aGUga2V5IGZvciBlYWNoIGl0ZW0uXG4gICAgICpcbiAgICAgKiBCeSBkZWZhdWx0IGl0ZW1zIGFyZSBtYXBwZWQgYnk6XG4gICAgICogLSB2YWx1ZSBpbiBjYXNlIG9mIHByaW1pdGl2ZSB2YWx1ZXNcbiAgICAgKiAtIHJlZmVyZW5jZSBvdGhlcndpc2VcbiAgICAgKi9cbiAgICBpZD86IChpdGVtOiBJdGVtKSA9PiBLZXkgfCBJdGVtXG59XG5cbi8vIFRPRE86IHN1cHBvcnQgR2lvLkxpc3RNb2RlbFxuXG5leHBvcnQgZnVuY3Rpb24gRm9yPEl0ZW0sIEVsIGV4dGVuZHMgSlNYLkVsZW1lbnQsIEtleT4oe1xuICAgIGVhY2gsXG4gICAgY2hpbGRyZW46IG1rQ2hpbGQsXG4gICAgY2xlYW51cCxcbiAgICBpZCA9IChpdGVtOiBJdGVtKSA9PiBpdGVtLFxufTogRm9yUHJvcHM8SXRlbSwgRWwsIEtleT4pOiBGcmFnbWVudDxFbD4ge1xuICAgIHR5cGUgTWFwSXRlbSA9IHsgaXRlbTogSXRlbTsgY2hpbGQ6IEVsOyBpbmRleDogU3RhdGU8bnVtYmVyPjsgc2NvcGU6IFNjb3BlIH1cblxuICAgIGNvbnN0IGN1cnJlbnRTY29wZSA9IGdldFNjb3BlKClcbiAgICBjb25zdCBtYXAgPSBuZXcgTWFwPEl0ZW0gfCBLZXksIE1hcEl0ZW0+KClcbiAgICBjb25zdCBmcmFnbWVudCA9IG5ldyBGcmFnbWVudDxFbD4oKVxuXG4gICAgZnVuY3Rpb24gcmVtb3ZlKHsgaXRlbSwgY2hpbGQsIGluZGV4OiBbaW5kZXhdLCBzY29wZSB9OiBNYXBJdGVtKSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2xlYW51cCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICBjbGVhbnVwKGNoaWxkLCBpdGVtLCBpbmRleC5nZXQoKSlcbiAgICAgICAgfSBlbHNlIGlmIChjbGVhbnVwICE9PSBudWxsKSB7XG4gICAgICAgICAgICBlbnYuZGVmYXVsdENsZWFudXAoY2hpbGQpXG4gICAgICAgIH1cbiAgICAgICAgc2NvcGUuZGlzcG9zZSgpXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2FsbGJhY2soaXRhcmVhYmxlOiBJdGVyYWJsZTxJdGVtPikge1xuICAgICAgICBjb25zdCBpdGVtcyA9IFsuLi5pdGFyZWFibGVdXG4gICAgICAgIGNvbnN0IGlkcyA9IGl0ZW1zLm1hcChpZClcbiAgICAgICAgY29uc3QgaWRTZXQgPSBuZXcgU2V0KGlkcylcblxuICAgICAgICAvLyBjbGVhbnVwIGNoaWxkcmVuIG1pc3NpbmcgZnJvbSBhcnJcbiAgICAgICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgbWFwLmVudHJpZXMoKSkge1xuICAgICAgICAgICAgLy8gdGhlcmUgaXMgbm8gZ2VuZXJpYyB3YXkgdG8gaW5zZXJ0IGNoaWxkIGF0IGluZGV4XG4gICAgICAgICAgICAvLyBzbyB3ZSBzb3J0IGJ5IHJlbW92aW5nIGV2ZXJ5IGNoaWxkIGFuZCByZWFwcGVuZGluZyBpbiBvcmRlclxuICAgICAgICAgICAgZnJhZ21lbnQucmVtb3ZlQ2hpbGQodmFsdWUuY2hpbGQpXG5cbiAgICAgICAgICAgIGlmICghaWRTZXQuaGFzKGtleSkpIHtcbiAgICAgICAgICAgICAgICByZW1vdmUodmFsdWUpXG4gICAgICAgICAgICAgICAgbWFwLmRlbGV0ZShrZXkpXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyB1cGRhdGUgaW5kZXggYW5kIGFkZCBuZXcgaXRlbXNcbiAgICAgICAgaXRlbXMubWFwKChpdGVtLCBpKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBrZXkgPSBpZHNbaV1cbiAgICAgICAgICAgIGlmIChtYXAuaGFzKGtleSkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICAgICAgICAgIGluZGV4OiBbLCBzZXRJbmRleF0sXG4gICAgICAgICAgICAgICAgICAgIGNoaWxkLFxuICAgICAgICAgICAgICAgIH0gPSBtYXAuZ2V0KGtleSkhXG4gICAgICAgICAgICAgICAgc2V0SW5kZXgoaSlcbiAgICAgICAgICAgICAgICBpZiAoZnJhZ21lbnQuaGFzQ2hpbGQoY2hpbGQpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihgZHVwbGljYXRlIGtleXMgZm91bmQ6ICR7a2V5fWApXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZnJhZ21lbnQuYWRkQ2hpbGQoY2hpbGQpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCBbaW5kZXgsIHNldEluZGV4XSA9IGNyZWF0ZVN0YXRlKGkpXG4gICAgICAgICAgICAgICAgY29uc3Qgc2NvcGUgPSBuZXcgU2NvcGUoY3VycmVudFNjb3BlKVxuICAgICAgICAgICAgICAgIGNvbnN0IGNoaWxkID0gc2NvcGUucnVuKCgpID0+IG1rQ2hpbGQoaXRlbSwgaW5kZXgpKVxuICAgICAgICAgICAgICAgIG1hcC5zZXQoa2V5LCB7IGl0ZW0sIGNoaWxkLCBpbmRleDogW2luZGV4LCBzZXRJbmRleF0sIHNjb3BlIH0pXG4gICAgICAgICAgICAgICAgZnJhZ21lbnQuYWRkQ2hpbGQoY2hpbGQpXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgY29uc3QgZGlzcG9zZSA9IGVhY2guc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgICAgY2FsbGJhY2soZWFjaC5nZXQoKSlcbiAgICB9KVxuICAgIGNhbGxiYWNrKGVhY2guZ2V0KCkpXG5cbiAgICBvbkNsZWFudXAoKCkgPT4ge1xuICAgICAgICBkaXNwb3NlKClcblxuICAgICAgICBmb3IgKGNvbnN0IHZhbHVlIG9mIG1hcC52YWx1ZXMoKSkge1xuICAgICAgICAgICAgcmVtb3ZlKHZhbHVlKVxuICAgICAgICB9XG5cbiAgICAgICAgbWFwLmNsZWFyKClcbiAgICB9KVxuXG4gICAgcmV0dXJuIGZyYWdtZW50XG59XG4iLCAiaW1wb3J0IHsgRnJhZ21lbnQgfSBmcm9tIFwiLi9GcmFnbWVudC5qc1wiXG5pbXBvcnQgeyBBY2Nlc3NvciB9IGZyb20gXCIuL3N0YXRlLmpzXCJcbmltcG9ydCB7IGVudiB9IGZyb20gXCIuL2Vudi5qc1wiXG5pbXBvcnQgeyBnZXRTY29wZSwgb25DbGVhbnVwLCBTY29wZSB9IGZyb20gXCIuL3Njb3BlLmpzXCJcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xuaW1wb3J0IENsdXR0ZXIgZnJvbSBcImdpOi8vQ2x1dHRlclwiXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXG5pbXBvcnQgdHlwZSBHdGsgZnJvbSBcImdpOi8vR3RrP3ZlcnNpb249My4wXCJcblxuaW50ZXJmYWNlIFdpdGhQcm9wczxULCBFIGV4dGVuZHMgSlNYLkVsZW1lbnQ+IHtcbiAgICB2YWx1ZTogQWNjZXNzb3I8VD5cbiAgICBjaGlsZHJlbjogKHZhbHVlOiBUKSA9PiBFIHwgXCJcIiB8IGZhbHNlIHwgbnVsbCB8IHVuZGVmaW5lZFxuXG4gICAgLyoqXG4gICAgICogRnVuY3Rpb24gdG8gcnVuIGZvciBlYWNoIHJlbW92ZWQgZWxlbWVudC5cbiAgICAgKiBUaGUgZGVmYXVsdCB2YWx1ZSBkZXBlbmRzIG9uIHRoZSBlbnZpcm9ubWVudDpcbiAgICAgKlxuICAgICAqIC0gKipHdGs0Kio6IG51bGxcbiAgICAgKiAtICoqR3RrMyoqOiB7QGxpbmsgR3RrLldpZGdldC5wcm90b3R5cGUuZGVzdHJveX1cbiAgICAgKiAtICoqR25vbWUqKjoge0BsaW5rIENsdXR0ZXIuQWN0b3IucHJvdG90eXBlLmRlc3Ryb3l9XG4gICAgICovXG4gICAgY2xlYW51cD86IG51bGwgfCAoKGVsZW1lbnQ6IEUpID0+IHZvaWQpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBXaXRoPFQsIEUgZXh0ZW5kcyBKU1guRWxlbWVudD4oe1xuICAgIHZhbHVlLFxuICAgIGNoaWxkcmVuOiBta0NoaWxkLFxuICAgIGNsZWFudXAsXG59OiBXaXRoUHJvcHM8VCwgRT4pOiBGcmFnbWVudDxFPiB7XG4gICAgY29uc3QgY3VycmVudFNjb3BlID0gZ2V0U2NvcGUoKVxuICAgIGNvbnN0IGZyYWdtZW50ID0gbmV3IEZyYWdtZW50PEU+KClcblxuICAgIGxldCBzY29wZTogU2NvcGVcblxuICAgIGZ1bmN0aW9uIGNhbGxiYWNrKHY6IFQpIHtcbiAgICAgICAgZm9yIChjb25zdCBjaGlsZCBvZiBmcmFnbWVudC5jaGlsZHJlbikge1xuICAgICAgICAgICAgZnJhZ21lbnQucmVtb3ZlQ2hpbGQoY2hpbGQpXG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY2xlYW51cCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgY2xlYW51cChjaGlsZClcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY2xlYW51cCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGVudi5kZWZhdWx0Q2xlYW51cChjaGlsZClcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHNjb3BlKSBzY29wZS5kaXNwb3NlKClcbiAgICAgICAgfVxuXG4gICAgICAgIHNjb3BlID0gbmV3IFNjb3BlKGN1cnJlbnRTY29wZSlcbiAgICAgICAgY29uc3QgY2ggPSBzY29wZS5ydW4oKCkgPT4gbWtDaGlsZCh2KSlcbiAgICAgICAgaWYgKGNoICE9PSBcIlwiICYmIGNoICE9PSBmYWxzZSAmJiBjaCAhPT0gbnVsbCAmJiBjaCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBmcmFnbWVudC5hZGRDaGlsZChjaClcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IGRpc3Bvc2UgPSB2YWx1ZS5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgICBjYWxsYmFjayh2YWx1ZS5nZXQoKSlcbiAgICB9KVxuICAgIGNhbGxiYWNrKHZhbHVlLmdldCgpKVxuXG4gICAgb25DbGVhbnVwKCgpID0+IHtcbiAgICAgICAgc2NvcGUuZGlzcG9zZSgpXG4gICAgICAgIGRpc3Bvc2UoKVxuICAgIH0pXG5cbiAgICByZXR1cm4gZnJhZ21lbnRcbn1cbiIsICJpbXBvcnQgQXN0YWxJTyBmcm9tIFwiZ2k6Ly9Bc3RhbElPXCJcbmltcG9ydCB7IEFjY2Vzc29yIH0gZnJvbSBcIi4uL2duaW0vc3JjL2pzeC9pbmRleC5qc1wiXG5cbnR5cGUgQXJncyA9IHtcbiAgICBjbWQ6IHN0cmluZyB8IHN0cmluZ1tdXG4gICAgb3V0PzogKHN0ZG91dDogc3RyaW5nKSA9PiB2b2lkXG4gICAgZXJyPzogKHN0ZGVycjogc3RyaW5nKSA9PiB2b2lkXG59XG5cbmV4cG9ydCB0eXBlIFByb2Nlc3MgPSBBc3RhbElPLlByb2Nlc3NcbmV4cG9ydCBjb25zdCBQcm9jZXNzID0gQXN0YWxJTy5Qcm9jZXNzXG5cbmV4cG9ydCBmdW5jdGlvbiBzdWJwcm9jZXNzKGFyZ3M6IEFyZ3MpOiBBc3RhbElPLlByb2Nlc3NcblxuZXhwb3J0IGZ1bmN0aW9uIHN1YnByb2Nlc3MoXG4gICAgY21kOiBzdHJpbmcgfCBzdHJpbmdbXSxcbiAgICBvbk91dD86IChzdGRvdXQ6IHN0cmluZykgPT4gdm9pZCxcbiAgICBvbkVycj86IChzdGRlcnI6IHN0cmluZykgPT4gdm9pZCxcbik6IEFzdGFsSU8uUHJvY2Vzc1xuXG5leHBvcnQgZnVuY3Rpb24gc3VicHJvY2VzcyhcbiAgICBhcmdzT3JDbWQ6IEFyZ3MgfCBzdHJpbmcgfCBzdHJpbmdbXSxcbiAgICBvbk91dDogKHN0ZG91dDogc3RyaW5nKSA9PiB2b2lkID0gcHJpbnQsXG4gICAgb25FcnI6IChzdGRlcnI6IHN0cmluZykgPT4gdm9pZCA9IHByaW50ZXJyLFxuKSB7XG4gICAgY29uc3QgYXJncyA9IEFycmF5LmlzQXJyYXkoYXJnc09yQ21kKSB8fCB0eXBlb2YgYXJnc09yQ21kID09PSBcInN0cmluZ1wiXG4gICAgY29uc3QgeyBjbWQsIGVyciwgb3V0IH0gPSB7XG4gICAgICAgIGNtZDogYXJncyA/IGFyZ3NPckNtZCA6IGFyZ3NPckNtZC5jbWQsXG4gICAgICAgIGVycjogYXJncyA/IG9uRXJyIDogYXJnc09yQ21kLmVyciB8fCBvbkVycixcbiAgICAgICAgb3V0OiBhcmdzID8gb25PdXQgOiBhcmdzT3JDbWQub3V0IHx8IG9uT3V0LFxuICAgIH1cblxuICAgIGNvbnN0IHByb2MgPSBBcnJheS5pc0FycmF5KGNtZClcbiAgICAgICAgPyBBc3RhbElPLlByb2Nlc3Muc3VicHJvY2Vzc3YoY21kKVxuICAgICAgICA6IEFzdGFsSU8uUHJvY2Vzcy5zdWJwcm9jZXNzKGNtZClcblxuICAgIHByb2MuY29ubmVjdChcInN0ZG91dFwiLCAoXywgc3Rkb3V0OiBzdHJpbmcpID0+IG91dChzdGRvdXQpKVxuICAgIHByb2MuY29ubmVjdChcInN0ZGVyclwiLCAoXywgc3RkZXJyOiBzdHJpbmcpID0+IGVycihzdGRlcnIpKVxuICAgIHJldHVybiBwcm9jXG59XG5cbi8qKiBAdGhyb3dzIHtHTGliLkVycm9yfSBUaHJvd3Mgc3RkZXJyICovXG5leHBvcnQgZnVuY3Rpb24gZXhlYyhjbWQ6IHN0cmluZyB8IHN0cmluZ1tdKSB7XG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkoY21kKSA/IEFzdGFsSU8uUHJvY2Vzcy5leGVjdihjbWQpIDogQXN0YWxJTy5Qcm9jZXNzLmV4ZWMoY21kKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZXhlY0FzeW5jKGNtZDogc3RyaW5nIHwgc3RyaW5nW10pOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGNtZCkpIHtcbiAgICAgICAgICAgIEFzdGFsSU8uUHJvY2Vzcy5leGVjX2FzeW5jdihjbWQsIChfLCByZXMpID0+IHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKEFzdGFsSU8uUHJvY2Vzcy5leGVjX2FzeW5jdl9maW5pc2gocmVzKSlcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIEFzdGFsSU8uUHJvY2Vzcy5leGVjX2FzeW5jKGNtZCwgKF8sIHJlcykgPT4ge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoQXN0YWxJTy5Qcm9jZXNzLmV4ZWNfZmluaXNoKHJlcykpXG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICB9KVxufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU3VicHJvY2Vzcyhpbml0OiBzdHJpbmcsIGV4ZWM6IHN0cmluZyB8IHN0cmluZ1tdKTogQWNjZXNzb3I8c3RyaW5nPlxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU3VicHJvY2VzczxUPihcbiAgICBpbml0OiBULFxuICAgIGV4ZWM6IHN0cmluZyB8IHN0cmluZ1tdLFxuICAgIHRyYW5zZm9ybTogKHN0ZG91dDogc3RyaW5nLCBwcmV2OiBUKSA9PiBULFxuKTogQWNjZXNzb3I8VD5cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVN1YnByb2Nlc3M8VD4oXG4gICAgaW5pdDogVCxcbiAgICBleGVjOiBzdHJpbmcgfCBzdHJpbmdbXSxcbiAgICB0cmFuc2Zvcm0/OiAoc3Rkb3V0OiBzdHJpbmcsIHByZXY6IFQpID0+IFQsXG4pOiBBY2Nlc3NvcjxUPiB7XG4gICAgbGV0IGN1cnJlbnRWYWx1ZSA9IGluaXRcbiAgICBsZXQgcHJvYzogQXN0YWxJTy5Qcm9jZXNzIHwgbnVsbCA9IG51bGxcbiAgICBjb25zdCBzdWJzY3JpYmVycyA9IG5ldyBTZXQ8KCkgPT4gdm9pZD4oKVxuXG4gICAgZnVuY3Rpb24gc3Vic2NyaWJlKGNhbGxiYWNrOiAoKSA9PiB2b2lkKTogKCkgPT4gdm9pZCB7XG4gICAgICAgIGlmIChzdWJzY3JpYmVycy5zaXplID09PSAwKSB7XG4gICAgICAgICAgICBwcm9jID0gc3VicHJvY2VzcyhleGVjLCAoc3Rkb3V0KSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgdmFsdWUgPSB0cmFuc2Zvcm0gPyB0cmFuc2Zvcm0oc3Rkb3V0LCBjdXJyZW50VmFsdWUpIDogKHN0ZG91dCBhcyBUKVxuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50VmFsdWUgIT09IHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRWYWx1ZSA9IHZhbHVlXG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXJzLmZvckVhY2goKGNiKSA9PiBjYigpKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cblxuICAgICAgICBzdWJzY3JpYmVycy5hZGQoY2FsbGJhY2spXG5cbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgIHN1YnNjcmliZXJzLmRlbGV0ZShjYWxsYmFjaylcbiAgICAgICAgICAgIGlmIChzdWJzY3JpYmVycy5zaXplID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcHJvYz8ua2lsbCgpXG4gICAgICAgICAgICAgICAgcHJvYyA9IG51bGxcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBuZXcgQWNjZXNzb3IoKCkgPT4gY3VycmVudFZhbHVlLCBzdWJzY3JpYmUpXG59XG4iLCAiaW1wb3J0IEFzdGFsIGZyb20gXCJnaTovL0FzdGFsP3ZlcnNpb249NC4wXCJcbmltcG9ydCBHdGsgZnJvbSBcImdpOi8vR3RrP3ZlcnNpb249NC4wXCJcbmltcG9ydCBHZGsgZnJvbSBcImdpOi8vR2RrP3ZlcnNpb249NC4wXCJcbmV4cG9ydCB7IEFzdGFsLCBHdGssIEdkayB9XG4iLCAiLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5hbWVzcGFjZSAqL1xuaW1wb3J0IEd0ayBmcm9tIFwiZ2k6Ly9HdGs/dmVyc2lvbj00LjBcIlxuaW1wb3J0IEFzdGFsIGZyb20gXCJnaTovL0FzdGFsP3ZlcnNpb249NC4wXCJcbmltcG9ydCB7IENDUHJvcHMgfSBmcm9tIFwiLi4vLi4vZ25pbS9zcmMvanN4L2luZGV4LmpzXCJcbmltcG9ydCB7IGludHJpbnNpY0VsZW1lbnRzIH0gZnJvbSBcIi4uLy4uL2duaW0vc3JjL2d0azQvanN4LXJ1bnRpbWUuanNcIlxuXG50eXBlIFByb3BzPFQgZXh0ZW5kcyBHdGsuV2lkZ2V0LCBQcm9wcz4gPSBDQ1Byb3BzPFQsIFBhcnRpYWw8UHJvcHM+PlxuXG5PYmplY3QuYXNzaWduKGludHJpbnNpY0VsZW1lbnRzLCB7XG4gICAgYm94OiBHdGsuQm94LFxuICAgIGJ1dHRvbjogR3RrLkJ1dHRvbixcbiAgICBjZW50ZXJib3g6IEd0ay5DZW50ZXJCb3gsXG4gICAgLy8gY2lyY3VsYXJwcm9ncmVzczogQXN0YWwuQ2lyY3VsYXJQcm9ncmVzcyxcbiAgICBkcmF3aW5nYXJlYTogR3RrLkRyYXdpbmdBcmVhLFxuICAgIGVudHJ5OiBHdGsuRW50cnksXG4gICAgaW1hZ2U6IEd0ay5JbWFnZSxcbiAgICBsYWJlbDogR3RrLkxhYmVsLFxuICAgIGxldmVsYmFyOiBHdGsuTGV2ZWxCYXIsXG4gICAgbWVudWJ1dHRvbjogR3RrLk1lbnVCdXR0b24sXG4gICAgb3ZlcmxheTogR3RrLk92ZXJsYXksXG4gICAgcG9wb3ZlcjogR3RrLlBvcG92ZXIsXG4gICAgcmV2ZWFsZXI6IEd0ay5SZXZlYWxlcixcbiAgICBzY3JvbGxlZHdpbmRvdzogR3RrLlNjcm9sbGVkV2luZG93LFxuICAgIHNsaWRlcjogQXN0YWwuU2xpZGVyLFxuICAgIHN0YWNrOiBHdGsuU3RhY2ssXG4gICAgc3dpdGNoOiBHdGsuU3dpdGNoLFxuICAgIHRvZ2dsZWJ1dHRvbjogR3RrLlRvZ2dsZUJ1dHRvbixcbiAgICB3aW5kb3c6IEFzdGFsLldpbmRvdyxcbn0pXG5cbmRlY2xhcmUgZ2xvYmFsIHtcbiAgICBuYW1lc3BhY2UgSlNYIHtcbiAgICAgICAgaW50ZXJmYWNlIEludHJpbnNpY0VsZW1lbnRzIHtcbiAgICAgICAgICAgIGJveDogUHJvcHM8R3RrLkJveCwgR3RrLkJveC5Db25zdHJ1Y3RvclByb3BzPlxuICAgICAgICAgICAgYnV0dG9uOiBQcm9wczxHdGsuQnV0dG9uLCBHdGsuQnV0dG9uLkNvbnN0cnVjdG9yUHJvcHM+XG4gICAgICAgICAgICBjZW50ZXJib3g6IFByb3BzPEd0ay5DZW50ZXJCb3gsIEd0ay5DZW50ZXJCb3guQ29uc3RydWN0b3JQcm9wcz5cbiAgICAgICAgICAgIC8vIGNpcmN1bGFycHJvZ3Jlc3M6IFByb3BzPEFzdGFsLkNpcmN1bGFyUHJvZ3Jlc3MsIEFzdGFsLkNpcmN1bGFyUHJvZ3Jlc3MuQ29uc3RydWN0b3JQcm9wcz5cbiAgICAgICAgICAgIGRyYXdpbmdhcmVhOiBQcm9wczxHdGsuRHJhd2luZ0FyZWEsIEd0ay5EcmF3aW5nQXJlYS5Db25zdHJ1Y3RvclByb3BzPlxuICAgICAgICAgICAgZW50cnk6IFByb3BzPEd0ay5FbnRyeSwgR3RrLkVudHJ5LkNvbnN0cnVjdG9yUHJvcHM+XG4gICAgICAgICAgICBpbWFnZTogUHJvcHM8R3RrLkltYWdlLCBHdGsuSW1hZ2UuQ29uc3RydWN0b3JQcm9wcz5cbiAgICAgICAgICAgIGxhYmVsOiBQcm9wczxHdGsuTGFiZWwsIEd0ay5MYWJlbC5Db25zdHJ1Y3RvclByb3BzPlxuICAgICAgICAgICAgbGV2ZWxiYXI6IFByb3BzPEd0ay5MZXZlbEJhciwgR3RrLkxldmVsQmFyLkNvbnN0cnVjdG9yUHJvcHM+XG4gICAgICAgICAgICBtZW51YnV0dG9uOiBQcm9wczxHdGsuTWVudUJ1dHRvbiwgR3RrLk1lbnVCdXR0b24uQ29uc3RydWN0b3JQcm9wcz5cbiAgICAgICAgICAgIG92ZXJsYXk6IFByb3BzPEd0ay5PdmVybGF5LCBHdGsuT3ZlcmxheS5Db25zdHJ1Y3RvclByb3BzPlxuICAgICAgICAgICAgcG9wb3ZlcjogUHJvcHM8R3RrLlBvcG92ZXIsIEd0ay5Qb3BvdmVyLkNvbnN0cnVjdG9yUHJvcHM+XG4gICAgICAgICAgICByZXZlYWxlcjogUHJvcHM8R3RrLlJldmVhbGVyLCBHdGsuUmV2ZWFsZXIuQ29uc3RydWN0b3JQcm9wcz5cbiAgICAgICAgICAgIHNjcm9sbGVkd2luZG93OiBQcm9wczxHdGsuU2Nyb2xsZWRXaW5kb3csIEd0ay5TY3JvbGxlZFdpbmRvdy5Db25zdHJ1Y3RvclByb3BzPlxuICAgICAgICAgICAgc2xpZGVyOiBQcm9wczxBc3RhbC5TbGlkZXIsIEFzdGFsLlNsaWRlci5Db25zdHJ1Y3RvclByb3BzPlxuICAgICAgICAgICAgc3RhY2s6IFByb3BzPEd0ay5TdGFjaywgR3RrLlN0YWNrLkNvbnN0cnVjdG9yUHJvcHM+XG4gICAgICAgICAgICBzd2l0Y2g6IFByb3BzPEd0ay5Td2l0Y2gsIEd0ay5Td2l0Y2guQ29uc3RydWN0b3JQcm9wcz5cbiAgICAgICAgICAgIHRvZ2dsZWJ1dHRvbjogUHJvcHM8R3RrLlRvZ2dsZUJ1dHRvbiwgR3RrLlRvZ2dsZUJ1dHRvbi5Db25zdHJ1Y3RvclByb3BzPlxuICAgICAgICAgICAgd2luZG93OiBQcm9wczxBc3RhbC5XaW5kb3csIEFzdGFsLldpbmRvdy5Db25zdHJ1Y3RvclByb3BzPlxuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgKiBmcm9tIFwiLi4vLi4vZ25pbS9zcmMvZ3RrNC9qc3gtcnVudGltZS5qc1wiXG4iLCAiaW1wb3J0IEd0ayBmcm9tIFwiZ2k6Ly9HdGs/dmVyc2lvbj00LjBcIlxuaW1wb3J0IEdpbyBmcm9tIFwiZ2k6Ly9HaW8/dmVyc2lvbj0yLjBcIlxuaW1wb3J0IEdPYmplY3QgZnJvbSBcImdpOi8vR09iamVjdFwiXG5pbXBvcnQgeyBnZXRUeXBlLCBvbkNsZWFudXAsIEFjY2Vzc29yLCBGcmFnbWVudCB9IGZyb20gXCIuLi9qc3gvaW5kZXguanNcIlxuaW1wb3J0IHsgY29uZmlndWUgfSBmcm9tIFwiLi4vanN4L2Vudi5qc1wiXG5cbmNvbnN0IGR1bW15QnVpbGRlciA9IG5ldyBHdGsuQnVpbGRlcigpXG5cbmZ1bmN0aW9uIGFkZChwYXJlbnQ6IEd0ay5CdWlsZGFibGUsIGNoaWxkOiBHT2JqZWN0Lk9iamVjdCwgXzogbnVtYmVyKSB7XG4gICAgaWYgKCFzcGVjaWFsQWRkKHBhcmVudCwgY2hpbGQsIF8pKSB7XG4gICAgICAgIHBhcmVudC52ZnVuY19hZGRfY2hpbGQoZHVtbXlCdWlsZGVyLCBjaGlsZCwgZ2V0VHlwZShjaGlsZCkpXG4gICAgfVxufVxuXG5mdW5jdGlvbiBzcGVjaWFsUmVtb3ZlKF9wYXJlbnQ6IEdPYmplY3QuT2JqZWN0LCBfY2hpbGQ6IEdPYmplY3QuT2JqZWN0KSB7XG4gICAgLy8gVE9ETzogYWRkIGFueSBzcGVjaWFsIGNhc2VcbiAgICByZXR1cm4gZmFsc2Vcbn1cblxuZnVuY3Rpb24gc3BlY2lhbEFkZChwYXJlbnQ6IEdPYmplY3QuT2JqZWN0LCBjaGlsZDogR09iamVjdC5PYmplY3QsIF86IG51bWJlcikge1xuICAgIC8vIFRPRE86IGFkZCBhbnkgb3RoZXIgc3BlY2lhbCBjYXNlXG4gICAgaWYgKFxuICAgICAgICBjaGlsZCBpbnN0YW5jZW9mIEd0ay5BZGp1c3RtZW50ICYmXG4gICAgICAgIFwic2V0X2FkanVzdG1lbnRcIiBpbiBwYXJlbnQgJiZcbiAgICAgICAgdHlwZW9mIHBhcmVudC5zZXRfYWRqdXN0bWVudCA9PT0gXCJmdW5jdGlvblwiXG4gICAgKSB7XG4gICAgICAgIHBhcmVudC5zZXRfYWRqdXN0bWVudChjaGlsZClcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG5cbiAgICBpZiAoXG4gICAgICAgIGNoaWxkIGluc3RhbmNlb2YgR3RrLldpZGdldCAmJlxuICAgICAgICBwYXJlbnQgaW5zdGFuY2VvZiBHdGsuU3RhY2sgJiZcbiAgICAgICAgY2hpbGQubmFtZSAhPT0gXCJcIiAmJlxuICAgICAgICBjaGlsZC5uYW1lICE9PSBudWxsICYmXG4gICAgICAgIGdldFR5cGUoY2hpbGQpID09PSBcIm5hbWVkXCJcbiAgICApIHtcbiAgICAgICAgcGFyZW50LmFkZF9uYW1lZChjaGlsZCwgY2hpbGQubmFtZSlcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG5cbiAgICBpZiAoY2hpbGQgaW5zdGFuY2VvZiBHdGsuUG9wb3ZlciAmJiBwYXJlbnQgaW5zdGFuY2VvZiBHdGsuTWVudUJ1dHRvbikge1xuICAgICAgICBwYXJlbnQuc2V0X3BvcG92ZXIoY2hpbGQpXG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuXG4gICAgaWYgKFxuICAgICAgICBjaGlsZCBpbnN0YW5jZW9mIEdpby5NZW51TW9kZWwgJiZcbiAgICAgICAgKHBhcmVudCBpbnN0YW5jZW9mIEd0ay5NZW51QnV0dG9uIHx8IHBhcmVudCBpbnN0YW5jZW9mIEd0ay5Qb3BvdmVyTWVudSlcbiAgICApIHtcbiAgICAgICAgcGFyZW50LnNldF9tZW51X21vZGVsKGNoaWxkKVxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cblxuICAgIGlmIChjaGlsZCBpbnN0YW5jZW9mIEdpby5NZW51SXRlbSAmJiBwYXJlbnQgaW5zdGFuY2VvZiBHaW8uTWVudSkge1xuICAgICAgICAvLyBUT0RPOlxuICAgIH1cblxuICAgIGlmIChjaGlsZCBpbnN0YW5jZW9mIEd0ay5XaW5kb3cgJiYgcGFyZW50IGluc3RhbmNlb2YgR3RrLkFwcGxpY2F0aW9uKSB7XG4gICAgICAgIHBhcmVudC5hZGRfd2luZG93KGNoaWxkKVxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cblxuICAgIGlmIChjaGlsZCBpbnN0YW5jZW9mIEd0ay5UZXh0QnVmZmVyICYmIHBhcmVudCBpbnN0YW5jZW9mIEd0ay5UZXh0Vmlldykge1xuICAgICAgICBwYXJlbnQuc2V0X2J1ZmZlcihjaGlsZClcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2Vcbn1cblxuZnVuY3Rpb24gcmVtb3ZlKHBhcmVudDogR09iamVjdC5PYmplY3QsIGNoaWxkOiBHT2JqZWN0Lk9iamVjdCkge1xuICAgIGlmIChzcGVjaWFsUmVtb3ZlKHBhcmVudCwgY2hpbGQpKSByZXR1cm5cblxuICAgIGlmIChcInNldF9jaGlsZFwiIGluIHBhcmVudCAmJiB0eXBlb2YgcGFyZW50LnNldF9jaGlsZCA9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgcmV0dXJuIHBhcmVudC5zZXRfY2hpbGQobnVsbClcbiAgICB9XG5cbiAgICBpZiAoXCJyZW1vdmVcIiBpbiBwYXJlbnQgJiYgdHlwZW9mIHBhcmVudC5yZW1vdmUgPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHJldHVybiBwYXJlbnQucmVtb3ZlKGNoaWxkKVxuICAgIH1cblxuICAgIHRocm93IEVycm9yKGBjYW5ub3QgcmVtb3ZlICR7Y2hpbGR9IGZyb20gJHtwYXJlbnR9YClcbn1cblxuY29uc3QgeyBhZGRDaGlsZCwgaW50cmluc2ljRWxlbWVudHMgfSA9IGNvbmZpZ3VlKHtcbiAgICBzZXRDc3Mob2JqZWN0LCBjc3MpIHtcbiAgICAgICAgaWYgKCEob2JqZWN0IGluc3RhbmNlb2YgR3RrLldpZGdldCkpIHtcbiAgICAgICAgICAgIHJldHVybiBjb25zb2xlLndhcm4oRXJyb3IoYGNhbm5vdCBzZXQgY3NzIG9uICR7b2JqZWN0fWApKVxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgY3R4ID0gb2JqZWN0LmdldF9zdHlsZV9jb250ZXh0KClcbiAgICAgICAgbGV0IHByb3ZpZGVyOiBHdGsuQ3NzUHJvdmlkZXJcblxuICAgICAgICBjb25zdCBzZXR0ZXIgPSAoY3NzOiBzdHJpbmcpID0+IHtcbiAgICAgICAgICAgIGlmICghY3NzLmluY2x1ZGVzKFwie1wiKSB8fCAhY3NzLmluY2x1ZGVzKFwifVwiKSkge1xuICAgICAgICAgICAgICAgIGNzcyA9IGAqIHsgJHtjc3N9IH1gXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChwcm92aWRlcikgY3R4LnJlbW92ZV9wcm92aWRlcihwcm92aWRlcilcblxuICAgICAgICAgICAgcHJvdmlkZXIgPSBuZXcgR3RrLkNzc1Byb3ZpZGVyKClcbiAgICAgICAgICAgIHByb3ZpZGVyLmxvYWRfZnJvbV9zdHJpbmcoY3NzKVxuICAgICAgICAgICAgY3R4LmFkZF9wcm92aWRlcihwcm92aWRlciwgR3RrLlNUWUxFX1BST1ZJREVSX1BSSU9SSVRZX1VTRVIpXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY3NzIGluc3RhbmNlb2YgQWNjZXNzb3IpIHtcbiAgICAgICAgICAgIHNldHRlcihjc3MuZ2V0KCkpXG4gICAgICAgICAgICBjb25zdCBkaXNwb3NlID0gY3NzLnN1YnNjcmliZSgoKSA9PiBzZXR0ZXIoY3NzLmdldCgpKSlcbiAgICAgICAgICAgIG9uQ2xlYW51cChkaXNwb3NlKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2V0dGVyKGNzcylcbiAgICAgICAgfVxuICAgIH0sXG4gICAgc2V0Q2xhc3Mob2JqZWN0LCBjbGFzc05hbWUpIHtcbiAgICAgICAgaWYgKCEob2JqZWN0IGluc3RhbmNlb2YgR3RrLldpZGdldCkpIHtcbiAgICAgICAgICAgIHJldHVybiBjb25zb2xlLndhcm4oRXJyb3IoYGNhbm5vdCBzZXQgY2xhc3NOYW1lIG9uICR7b2JqZWN0fWApKVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNsYXNzTmFtZSBpbnN0YW5jZW9mIEFjY2Vzc29yKSB7XG4gICAgICAgICAgICBvYmplY3QuY3NzQ2xhc3NlcyA9IGNsYXNzTmFtZS5nZXQoKS5zcGxpdCgvXFxzKy8pXG4gICAgICAgICAgICBjb25zdCBkaXNwb3NlID0gY2xhc3NOYW1lLnN1YnNjcmliZShcbiAgICAgICAgICAgICAgICAoKSA9PiAob2JqZWN0LmNzc0NsYXNzZXMgPSBjbGFzc05hbWUuZ2V0KCkuc3BsaXQoL1xccysvKSksXG4gICAgICAgICAgICApXG4gICAgICAgICAgICBvbkNsZWFudXAoZGlzcG9zZSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG9iamVjdC5zZXRfY3NzX2NsYXNzZXMoY2xhc3NOYW1lLnNwbGl0KC9cXHMrLykpXG4gICAgICAgIH1cbiAgICB9LFxuICAgIGFkZENoaWxkKHBhcmVudCwgY2hpbGQsIGluZGV4ID0gLTEpIHtcbiAgICAgICAgaWYgKCEoY2hpbGQgaW5zdGFuY2VvZiBHT2JqZWN0Lk9iamVjdCkpIHtcbiAgICAgICAgICAgIGNoaWxkID0gR3RrLkxhYmVsLm5ldyhTdHJpbmcoY2hpbGQpKVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNwZWNpYWxBZGQocGFyZW50LCBjaGlsZCwgaW5kZXgpKSByZXR1cm5cblxuICAgICAgICBpZiAocGFyZW50IGluc3RhbmNlb2YgRnJhZ21lbnQpIHtcbiAgICAgICAgICAgIHBhcmVudC5hZGRDaGlsZChjaGlsZClcbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBhcmVudCBpbnN0YW5jZW9mIEd0ay5CdWlsZGFibGUpIHtcbiAgICAgICAgICAgIGlmIChjaGlsZCBpbnN0YW5jZW9mIEZyYWdtZW50KSB7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBjaCBvZiBjaGlsZC5jaGlsZHJlbikge1xuICAgICAgICAgICAgICAgICAgICBhZGQocGFyZW50LCBjaCwgaW5kZXgpXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY2hpbGQuY29ubmVjdChcImNoaWxkLWFkZGVkXCIsIChfLCBjaDogdW5rbm93biwgaW5kZXg6IG51bWJlcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIShjaCBpbnN0YW5jZW9mIEdPYmplY3QuT2JqZWN0KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihUeXBlRXJyb3IoYGNhbm5vdCBhZGQgJHtjaH0gdG8gJHtwYXJlbnR9YCkpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBhZGRDaGlsZChwYXJlbnQsIGNoLCBpbmRleClcbiAgICAgICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICAgICAgY2hpbGQuY29ubmVjdChcImNoaWxkLXJlbW92ZWRcIiwgKF8sIGNoOiB1bmtub3duKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghKGNoIGluc3RhbmNlb2YgR09iamVjdC5PYmplY3QpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFR5cGVFcnJvcihgY2Fubm90IHJlbW92ZSAke2NofSBmcm9tICR7cGFyZW50fWApKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlKHBhcmVudCwgY2gpXG4gICAgICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgICAgIG9uQ2xlYW51cCgoKSA9PiBjaGlsZC5kZXN0cm95KCkpXG4gICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGFkZChwYXJlbnQsIGNoaWxkLCBpbmRleClcbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG5cbiAgICAgICAgdGhyb3cgRXJyb3IoYGNhbm5vdCBhZGQgJHtjaGlsZH0gdG8gJHtwYXJlbnR9YClcbiAgICB9LFxufSlcblxuZXhwb3J0IHsgRnJhZ21lbnQsIGludHJpbnNpY0VsZW1lbnRzIH1cbmV4cG9ydCB7IGpzeCwganN4cyB9IGZyb20gXCIuLi9qc3gvanN4LmpzXCJcbiIsICJpbXBvcnQgeyBjcmVhdGVTdGF0ZSwgRm9yLCB0eXBlIEFjY2Vzc29yIH0gZnJvbSBcImFnc1wiO1xuaW1wb3J0IHR5cGUgeyBQcmVzc2VkS2V5IH0gZnJvbSBcIi4uLy4uL0xhdW5jaGVyXCI7XG5pbXBvcnQgeyBleGVjLCBleGVjQXN5bmMgfSBmcm9tIFwiYWdzL3Byb2Nlc3NcIjtcbmltcG9ydCB7IEdkaywgR3RrIH0gZnJvbSBcImFncy9ndGs0XCI7XG5cbmludGVyZmFjZSBQcm9wcyB7XG5cdGNsb3NlOiAoKSA9PiB2b2lkO1xuXHRzZWFyY2hWYWx1ZTogQWNjZXNzb3I8c3RyaW5nIHwgbnVsbD47XG5cdGVtcHR5U2VhcmNoOiAoKSA9PiB2b2lkO1xuXHRlbnRlclByZXNzZWQ6IEFjY2Vzc29yPGJvb2xlYW4+O1xuXHRwcmVzc2VkS2V5OiBBY2Nlc3NvcjxQcmVzc2VkS2V5IHwgbnVsbD47XG5cdHZpc2libGU6IEFjY2Vzc29yPGJvb2xlYW4+O1xuXHRjbG9zZWQ6IEFjY2Vzc29yPGJvb2xlYW4+O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBDYWxjdWxhdG9yTW9kZSh7XG5cdGNsb3NlLFxuXHRzZWFyY2hWYWx1ZSxcblx0ZW1wdHlTZWFyY2gsXG5cdGVudGVyUHJlc3NlZCxcblx0cHJlc3NlZEtleSxcblx0dmlzaWJsZSxcblx0Y2xvc2VkLFxufTogUHJvcHMpIHtcblx0Y29uc3QgW3Jlc3VsdCwgc2V0UmVzdWx0XSA9IGNyZWF0ZVN0YXRlPHN0cmluZyB8IG51bGw+KG51bGwpO1xuXHRjb25zdCBbaGlzdG9yeSwgc2V0SGlzdG9yeV0gPSBjcmVhdGVTdGF0ZTxzdHJpbmdbXT4oW10pO1xuXG5cdGNsb3NlZC5zdWJzY3JpYmUoKCkgPT4ge1xuXHRcdGlmICghY2xvc2VkLmdldCgpIHx8ICF2aXNpYmxlLmdldCgpKSByZXR1cm47XG5cblx0XHRzZXRIaXN0b3J5KFtdKTtcblx0XHRzZXRSZXN1bHQobnVsbCk7XG5cdFx0Y2xvc2UoKTtcblx0fSk7XG5cblx0ZW50ZXJQcmVzc2VkLnN1YnNjcmliZSgoKSA9PiB7XG5cdFx0aWYgKCFlbnRlclByZXNzZWQuZ2V0KCkgfHwgIXZpc2libGUuZ2V0KCkpIHJldHVybjtcblxuXHRcdGNvbnN0IHJlcyA9IHJlc3VsdC5nZXQoKTtcblx0XHRjb25zdCBoaXN0b3J5RGF0YSA9IGhpc3RvcnkuZ2V0KCk7XG5cblx0XHRpZiAoIXJlcyB8fCBoaXN0b3J5RGF0YVswXSA9PT0gcmVzKSByZXR1cm4gZW1wdHlTZWFyY2goKTtcblxuXHRcdHNldEhpc3RvcnkoKHByZXYpID0+IFtyZXMsIC4uLnByZXZdKTtcblx0XHRlbXB0eVNlYXJjaCgpO1xuXHRcdHNldFJlc3VsdChudWxsKTtcblx0fSk7XG5cblx0cHJlc3NlZEtleS5zdWJzY3JpYmUoKCkgPT4ge1xuXHRcdGlmICghdmlzaWJsZS5nZXQoKSkgcmV0dXJuO1xuXG5cdFx0Y29uc3Qga2V5RGF0YSA9IHByZXNzZWRLZXkuZ2V0KCk7XG5cblx0XHRpZiAoIWtleURhdGEpIHJldHVybjtcblxuXHRcdGlmIChrZXlEYXRhLmtleXZhbCA9PT0gR2RrLktFWV9Fc2NhcGUpIHtcblx0XHRcdHNldEhpc3RvcnkoW10pO1xuXHRcdFx0c2V0UmVzdWx0KG51bGwpO1xuXHRcdFx0Y2xvc2UoKTtcblxuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0fSk7XG5cblx0dmlzaWJsZS5zdWJzY3JpYmUoKCkgPT4ge1xuXHRcdGlmICh2aXNpYmxlLmdldCgpKSBleGVjQXN5bmMoXCJxYWxjIC1lICcwIC0gMCdcIik7IC8vIHRvIHVwZGF0ZSB0aGUgZXhjaGFuZ2UgcmF0ZXNcblx0fSk7XG5cblx0c2VhcmNoVmFsdWUuc3Vic2NyaWJlKCgpID0+IHtcblx0XHRpZiAoIXZpc2libGUuZ2V0KCkpIHJldHVybjtcblxuXHRcdGNvbnN0IHZhbHVlID0gc2VhcmNoVmFsdWUuZ2V0KCk7XG5cdFx0aWYgKCF2YWx1ZSkgcmV0dXJuO1xuXG5cdFx0bGV0IHJlcyA9IFwiSW52YWxpZCBJbnB1dFwiO1xuXG5cdFx0dHJ5IHtcblx0XHRcdHJlcyA9IGV4ZWMoYHFhbGMgJHt2YWx1ZX1gKTtcblx0XHR9IGNhdGNoIChfZSkge31cblxuXHRcdHNldFJlc3VsdChyZXMudHJpbSgpKTtcblx0fSk7XG5cblx0cmV0dXJuIChcblx0XHQ8Ym94XG5cdFx0XHRvcmllbnRhdGlvbj17R3RrLk9yaWVudGF0aW9uLlZFUlRJQ0FMfVxuXHRcdFx0dmlzaWJsZT17dmlzaWJsZX1cblx0XHRcdGNsYXNzPVwiY2FsY3VsYXRvci1jb250YWluZXJcIlxuXHRcdD5cblx0XHRcdDxsYWJlbFxuXHRcdFx0XHRsYWJlbD17cmVzdWx0KChyZXMpID0+IHJlcyB8fCBcIlwiKX1cblx0XHRcdFx0aGFsaWduPXtHdGsuQWxpZ24uU1RBUlR9XG5cdFx0XHRcdGNsYXNzPVwiY2FsY3VsYXRvci1yZXN1bHRcIlxuXHRcdFx0Lz5cblxuXHRcdFx0PEd0ay5TZXBhcmF0b3IgdmlzaWJsZSBjbGFzcz1cImNhbGN1bGF0b3Itc2VwYXJhdG9yXCIgLz5cblxuXHRcdFx0PEZvciBlYWNoPXtoaXN0b3J5fT5cblx0XHRcdFx0eyhoaXN0b3J5RW50cnkpID0+IChcblx0XHRcdFx0XHQ8bGFiZWwgaGFsaWduPXtHdGsuQWxpZ24uU1RBUlR9IGxhYmVsPXtoaXN0b3J5RW50cnl9IC8+XG5cdFx0XHRcdCl9XG5cdFx0XHQ8L0Zvcj5cblx0XHQ8L2JveD5cblx0KTtcbn1cbiIsICJpbXBvcnQgdHlwZSB7IEFuaW1hdGlvblR5cGUsIENvbmZpZyB9IGZyb20gXCJAL3R5cGVzL2NvbmZpZ1wiO1xuaW1wb3J0IEdMaWIgZnJvbSBcImdpOi8vR0xpYlwiO1xuXG5leHBvcnQgY29uc3QgSE9NRSA9IEdMaWIuZ2V0ZW52KFwiSE9NRVwiKTtcblxuZXhwb3J0IGNvbnN0IGFuaW1hdGlvblR5cGVzOiBBbmltYXRpb25UeXBlW10gPSBbXG5cdFwiQ1JPU1NGQURFXCIsXG5cdFwiTk9ORVwiLFxuXHRcIlNMSURFX0RPV05cIixcblx0XCJTTElERV9MRUZUXCIsXG5cdFwiU0xJREVfUklHSFRcIixcblx0XCJTTElERV9VUFwiLFxuXHRcIlNXSU5HX0RPV05cIixcblx0XCJTV0lOR19MRUZUXCIsXG5cdFwiU1dJTkdfUklHSFRcIixcblx0XCJTV0lOR19VUFwiLFxuXTtcblxuZXhwb3J0IGNvbnN0IGNvbmZpZ0ZvbGRlciA9IGAke0hPTUV9Ly5jb25maWcvc3RlZi1zaGVsbGA7XG5leHBvcnQgY29uc3QgY29uZmlnRmlsZVBhdGggPSBgJHtjb25maWdGb2xkZXJ9L2NvbmZpZy5qc29uYDtcblxuZXhwb3J0IGNvbnN0IGRlZmF1bHRDb25maWcgPSB7XG5cdHBhdGhzOiB7XG5cdFx0bXVzaXhtYXRjaFRva2VuOiBcIi90bXAvbXVzaXhtYXRjaF90b2tlbi5qc29uXCIsXG5cdFx0YmFja2xpZ2h0QmFzZURpcjogXCIvc3lzL2NsYXNzL2JhY2tsaWdodFwiLCAvLyByZXF1aXJlcyByZXN0YXJ0IHRvIGFwcGx5IGNoYW5nZXNcblx0XHRzYXZlRm9sZGVyOiBgJHtIT01FfS9NdXNpYy9zcG90aWZ5RGF0YWAsXG5cdFx0bHlyaWNzRm9sZGVyOiBgJHtjb25maWdGb2xkZXJ9L2x5cmljc2AsXG5cdH0sXG5cdHZvbHVtZVN0ZXA6IHtcblx0XHRtZWRpYTogMC4wNSwgLy8gNSVcblx0XHRtaWNyb3Bob25lOiAwLjA1LCAvLyA1JVxuXHRcdHNwZWFrZXI6IDAuMDUsIC8vIDUlXG5cdH0sXG5cdGFuaW1hdGlvbnNEdXJhdGlvbjoge1xuXHRcdG5vdGlmaWNhdGlvbjogNTAwLCAvLyAwLjUgc2Vjb25kc1xuXHRcdGxhdW5jaGVyOiAzMDAsIC8vIDAuMyBzZWNvbmRzXG5cdFx0bm90aWZpY2F0aW9uQ2VudGVyOiA1MDAsIC8vIDAuNSBzZWNvbmRzXG5cdFx0b3NkOiAzMDAsIC8vIDAuMyBzZWNvbmRzXG5cdFx0c2Vzc2lvbk1lbnU6IDMwMCwgLy8gMC4zIHNlY29uZHNcblx0fSxcblx0YW5pbWF0aW9uc1R5cGU6IHtcblx0XHRub3RpZmljYXRpb246IFwiU0xJREVfTEVGVFwiLFxuXHRcdGxhdW5jaGVyOiBcIkNST1NTRkFERVwiLFxuXHRcdG5vdGlmaWNhdGlvbkNlbnRlcjogXCJTTElERV9MRUZUXCIsXG5cdFx0b3NkOiBcIkNST1NTRkFERVwiLFxuXHRcdHNlc3Npb25NZW51OiBcIkNST1NTRkFERVwiLFxuXHR9LFxuXHR0aW1lb3V0czoge1xuXHRcdG9zZDogMzAwMCwgLy8gMyBzZWNvbmRzXG5cdFx0ZGVmYXVsdE5vdGlmaWNhdGlvbkV4cGlyZTogNTAwMCwgLy8gNSBzZWNvbmRzXG5cdH0sXG5cdHNlc3Npb25NZW51OiB7XG5cdFx0YnV0dG9uV2lkdGg6IDEyMCwgLy8gaW4gcHhcblx0XHRidXR0b25IZWlnaHQ6IDEyMCwgLy8gaW4gcHhcblx0XHRidXR0b25HYXA6IDUwLCAvLyBpbiBweFxuXHR9LFxuXHRtZWRpYU1heExlbmd0aDogMjUsXG5cdHN5c3RlbVN0YXRzVXBkYXRlSW50ZXJ2YWw6IDEwMDAsXG59IHNhdGlzZmllcyBDb25maWc7XG4iLCAiaW1wb3J0IEFzdGFsIGZyb20gXCJnaTovL0FzdGFsSU9cIlxuaW1wb3J0IEdpbyBmcm9tIFwiZ2k6Ly9HaW8/dmVyc2lvbj0yLjBcIlxuXG5leHBvcnQgZnVuY3Rpb24gcmVhZEZpbGUocGF0aDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICByZXR1cm4gQXN0YWwucmVhZF9maWxlKHBhdGgpIHx8IFwiXCJcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlYWRGaWxlQXN5bmMocGF0aDogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICBBc3RhbC5yZWFkX2ZpbGVfYXN5bmMocGF0aCwgKF8sIHJlcykgPT4ge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICByZXNvbHZlKEFzdGFsLnJlYWRfZmlsZV9maW5pc2gocmVzKSB8fCBcIlwiKVxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgfSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHdyaXRlRmlsZShwYXRoOiBzdHJpbmcsIGNvbnRlbnQ6IHN0cmluZyk6IHZvaWQge1xuICAgIEFzdGFsLndyaXRlX2ZpbGUocGF0aCwgY29udGVudClcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHdyaXRlRmlsZUFzeW5jKHBhdGg6IHN0cmluZywgY29udGVudDogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgQXN0YWwud3JpdGVfZmlsZV9hc3luYyhwYXRoLCBjb250ZW50LCAoXywgcmVzKSA9PiB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHJlc29sdmUoQXN0YWwud3JpdGVfZmlsZV9maW5pc2gocmVzKSlcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKVxuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgIH0pXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtb25pdG9yRmlsZShcbiAgICBwYXRoOiBzdHJpbmcsXG4gICAgY2FsbGJhY2s6IChmaWxlOiBzdHJpbmcsIGV2ZW50OiBHaW8uRmlsZU1vbml0b3JFdmVudCkgPT4gdm9pZCxcbik6IEdpby5GaWxlTW9uaXRvciB7XG4gICAgcmV0dXJuIEFzdGFsLm1vbml0b3JfZmlsZShwYXRoLCAoZmlsZTogc3RyaW5nLCBldmVudDogR2lvLkZpbGVNb25pdG9yRXZlbnQpID0+IHtcbiAgICAgICAgY2FsbGJhY2soZmlsZSwgZXZlbnQpXG4gICAgfSkhXG59XG4iLCAiaW1wb3J0IEdMaWIgZnJvbSBcImdpOi8vR0xpYlwiO1xuXG5leHBvcnQgZnVuY3Rpb24gZmlsZUV4aXN0cyhwYXRoOiBzdHJpbmcsIGRpciA9IGZhbHNlKSB7XG5cdGlmIChkaXIpXG5cdFx0cmV0dXJuIEdMaWIuZmlsZV90ZXN0KFxuXHRcdFx0cGF0aCxcblx0XHRcdEdMaWIuRmlsZVRlc3QuRVhJU1RTIHwgR0xpYi5GaWxlVGVzdC5JU19ESVIsXG5cdFx0KTtcblxuXHRyZXR1cm4gR0xpYi5maWxlX3Rlc3QocGF0aCwgR0xpYi5GaWxlVGVzdC5FWElTVFMpO1xufVxuIiwgImltcG9ydCB7IG1vbml0b3JGaWxlLCByZWFkRmlsZSB9IGZyb20gXCJhZ3MvZmlsZVwiO1xuaW1wb3J0IHR5cGUgeyBDb25maWcgfSBmcm9tIFwiQC90eXBlcy9jb25maWdcIjtcbmltcG9ydCB7IGZpbGVFeGlzdHMgfSBmcm9tIFwiQC91dGlsL2ZpbGVcIjtcbmltcG9ydCB7IGNyZWF0ZVN0YXRlIH0gZnJvbSBcImFnc1wiO1xuaW1wb3J0IEdpbyBmcm9tIFwiZ2k6Ly9HaW9cIjtcbmltcG9ydCB7XG5cdGFuaW1hdGlvblR5cGVzLFxuXHRjb25maWdGaWxlUGF0aCxcblx0ZGVmYXVsdENvbmZpZyxcbn0gZnJvbSBcIkAvY29uc3RhbnRzL2NvbmZpZ1wiO1xuXG5leHBvcnQgY29uc3QgW2NvbmZpZywgc2V0Q29uZmlnXSA9IGNyZWF0ZVN0YXRlPENvbmZpZz4oZGVmYXVsdENvbmZpZyk7XG5cbmlmIChmaWxlRXhpc3RzKGNvbmZpZ0ZpbGVQYXRoKSkge1xuXHR1cGRhdGVDb25maWcoKTtcbn1cblxubW9uaXRvckZpbGUoY29uZmlnRmlsZVBhdGgsIChfLCBldmVudCkgPT4ge1xuXHRpZiAoZXZlbnQgPT09IEdpby5GaWxlTW9uaXRvckV2ZW50LkNIQU5HRUQpIHtcblx0XHRjb25zb2xlLmxvZyhcIkNvbmZpZyBmaWxlIGNoYW5nZWQsIHVwZGF0aW5nIGNvbmZpZ1wiKTtcblxuXHRcdHVwZGF0ZUNvbmZpZygpO1xuXHR9XG5cblx0aWYgKGV2ZW50ID09PSBHaW8uRmlsZU1vbml0b3JFdmVudC5ERUxFVEVEKSB7XG5cdFx0Y29uc29sZS53YXJuKFwiQ29uZmlnIGZpbGUgZGVsZXRlZCwgcmVzdG9yaW5nIGRlZmF1bHQgY29uZmlnXCIpO1xuXG5cdFx0c2V0Q29uZmlnKGRlZmF1bHRDb25maWcpO1xuXHR9XG5cblx0aWYgKGV2ZW50ID09PSBHaW8uRmlsZU1vbml0b3JFdmVudC5DUkVBVEVEKSB7XG5cdFx0Y29uc29sZS5sb2coXCJDb25maWcgZmlsZSBjcmVhdGVkLCB1cGRhdGluZyBjb25maWdcIik7XG5cblx0XHR1cGRhdGVDb25maWcoKTtcblx0fVxufSk7XG5cbmZ1bmN0aW9uIHVwZGF0ZUNvbmZpZygpIHtcblx0Y29uc3QgZGF0YSA9IHJlYWRGaWxlKGNvbmZpZ0ZpbGVQYXRoKTtcblxuXHR0cnkge1xuXHRcdGNvbnN0IGNvbmZpZ0RhdGE6IFBhcnRpYWw8Q29uZmlnPiA9IEpTT04ucGFyc2UoZGF0YSk7XG5cblx0XHRpZiAoIXZhbGlkYXRlQ29uZmlnKGNvbmZpZ0RhdGEpKSByZXR1cm47XG5cblx0XHRzZXRDb25maWcoY29uZmlnRGF0YSk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRjb25zb2xlLmVycm9yKFwiRmFpbGVkIHRvIHJlYWQgdGhlIGNvbmZpZyBmaWxlXFxuRXJyb3I6XCIsIGUpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlQ29uZmlnKGNvbmZpZzogUGFydGlhbDxDb25maWc+KTogYm9vbGVhbiB7XG5cdGlmIChcblx0XHRjb25maWcucGF0aHM/Lm11c2l4bWF0Y2hUb2tlbiAmJlxuXHRcdCghY29uZmlnLnBhdGhzPy5tdXNpeG1hdGNoVG9rZW4uc3RhcnRzV2l0aChcIi9cIikgfHxcblx0XHRcdCFjb25maWcucGF0aHMubXVzaXhtYXRjaFRva2VuLmVuZHNXaXRoKFwiLmpzb25cIikpXG5cdCkge1xuXHRcdGNvbnNvbGUuZXJyb3IoXG5cdFx0XHRcIkludmFsaWQgYHBhdGhzLm11c2l4bWF0Y2hUb2tlblBhdGhgIChtdXN0IGJlIGFuIGFic29sdXRlIHBhdGggdG8gYSBKU09OIGZpbGUpOlwiLFxuXHRcdFx0Y29uZmlnLnBhdGhzPy5tdXNpeG1hdGNoVG9rZW4sXG5cdFx0KTtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRpZiAoXG5cdFx0Y29uZmlnLnBhdGhzPy5iYWNrbGlnaHRCYXNlRGlyICYmXG5cdFx0KCFjb25maWcucGF0aHMuYmFja2xpZ2h0QmFzZURpci5zdGFydHNXaXRoKFwiL1wiKSB8fFxuXHRcdFx0IWZpbGVFeGlzdHMoY29uZmlnLnBhdGhzLmJhY2tsaWdodEJhc2VEaXIsIHRydWUpKVxuXHQpIHtcblx0XHRjb25zb2xlLmVycm9yKFxuXHRcdFx0XCJJbnZhbGlkIGBwYXRocy5iYWNrbGlnaHRCYXNlRGlyYCAobXVzdCBiZSBhbiBhYnNvbHV0ZSBwYXRoIHRvIGJhY2tsaWdodCBiYXNlIGZvbGRlcik6XCIsXG5cdFx0XHRjb25maWcucGF0aHMuYmFja2xpZ2h0QmFzZURpcixcblx0XHQpO1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdGlmIChjb25maWcucGF0aHM/LnNhdmVGb2xkZXIgJiYgIWNvbmZpZy5wYXRocy5zYXZlRm9sZGVyLnN0YXJ0c1dpdGgoXCIvXCIpKSB7XG5cdFx0Y29uc29sZS5lcnJvcihcblx0XHRcdFwiSW52YWxpZCBgcGF0aHMuc2F2ZUZvbGRlcmAgKG11c3QgYmUgYW4gYWJzb2x1dGUgcGF0aCB0byBzYXZlIGZvbGRlcik6XCIsXG5cdFx0XHRjb25maWcucGF0aHMuc2F2ZUZvbGRlcixcblx0XHQpO1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdGlmIChcblx0XHRjb25maWcudm9sdW1lU3RlcD8ubWVkaWEgJiZcblx0XHQoY29uZmlnLnZvbHVtZVN0ZXAubWVkaWEgPCAwIHx8IGNvbmZpZy52b2x1bWVTdGVwLm1lZGlhID4gMSlcblx0KSB7XG5cdFx0Y29uc29sZS5lcnJvcihcblx0XHRcdFwiSW52YWxpZCBgdm9sdW1lU3RlcC5tZWRpYWAgKG11c3QgYmUgYmV0d2VlbiAwIGFuZCAxKTpcIixcblx0XHRcdGNvbmZpZy52b2x1bWVTdGVwLm1lZGlhLFxuXHRcdCk7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0aWYgKFxuXHRcdGNvbmZpZy52b2x1bWVTdGVwPy5taWNyb3Bob25lICYmXG5cdFx0KGNvbmZpZy52b2x1bWVTdGVwLm1pY3JvcGhvbmUgPCAwIHx8IGNvbmZpZy52b2x1bWVTdGVwLm1pY3JvcGhvbmUgPiAxKVxuXHQpIHtcblx0XHRjb25zb2xlLmVycm9yKFxuXHRcdFx0XCJJbnZhbGlkIGB2b2x1bWVTdGVwLm1pY3JvcGhvbmVgIChtdXN0IGJlIGJldHdlZW4gMCBhbmQgMSk6XCIsXG5cdFx0XHRjb25maWcudm9sdW1lU3RlcC5taWNyb3Bob25lLFxuXHRcdCk7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0aWYgKFxuXHRcdGNvbmZpZy52b2x1bWVTdGVwPy5zcGVha2VyICYmXG5cdFx0KGNvbmZpZy52b2x1bWVTdGVwLnNwZWFrZXIgPCAwIHx8IGNvbmZpZy52b2x1bWVTdGVwLnNwZWFrZXIgPiAxKVxuXHQpIHtcblx0XHRjb25zb2xlLmVycm9yKFxuXHRcdFx0XCJJbnZhbGlkIGB2b2x1bWVTdGVwLnNwZWFrZXJgIChtdXN0IGJlIGJldHdlZW4gMCBhbmQgMSk6XCIsXG5cdFx0XHRjb25maWcudm9sdW1lU3RlcC5zcGVha2VyLFxuXHRcdCk7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0aWYgKFxuXHRcdGNvbmZpZy5hbmltYXRpb25zRHVyYXRpb24/Lm5vdGlmaWNhdGlvbiAmJlxuXHRcdGNvbmZpZy5hbmltYXRpb25zRHVyYXRpb24ubm90aWZpY2F0aW9uIDwgMFxuXHQpIHtcblx0XHRjb25zb2xlLmVycm9yKFxuXHRcdFx0XCJJbnZhbGlkIGBhbmltYXRpb25zRHVyYXRpb24ubm90aWZpY2F0aW9uYCAobXVzdCBiZSBncmVhdGVyIG9yIGVxdWFsIHRvIDApOlwiLFxuXHRcdFx0Y29uZmlnLmFuaW1hdGlvbnNEdXJhdGlvbi5ub3RpZmljYXRpb24sXG5cdFx0KTtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRpZiAoXG5cdFx0Y29uZmlnLmFuaW1hdGlvbnNEdXJhdGlvbj8ubGF1bmNoZXIgJiZcblx0XHRjb25maWcuYW5pbWF0aW9uc0R1cmF0aW9uLmxhdW5jaGVyIDwgMFxuXHQpIHtcblx0XHRjb25zb2xlLmVycm9yKFxuXHRcdFx0XCJJbnZhbGlkIGBhbmltYXRpb25zRHVyYXRpb24ubGF1bmNoZXJgIChtdXN0IGJlIGdyZWF0ZXIgb3IgZXF1YWwgdG8gMCk6XCIsXG5cdFx0XHRjb25maWcuYW5pbWF0aW9uc0R1cmF0aW9uLmxhdW5jaGVyLFxuXHRcdCk7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0aWYgKFxuXHRcdGNvbmZpZy5hbmltYXRpb25zRHVyYXRpb24/Lm5vdGlmaWNhdGlvbkNlbnRlciAmJlxuXHRcdGNvbmZpZy5hbmltYXRpb25zRHVyYXRpb24ubm90aWZpY2F0aW9uQ2VudGVyIDwgMFxuXHQpIHtcblx0XHRjb25zb2xlLmVycm9yKFxuXHRcdFx0XCJJbnZhbGlkIGBhbmltYXRpb25zRHVyYXRpb24ubm90aWZpY2F0aW9uQ2VudGVyYCAobXVzdCBiZSBncmVhdGVyIG9yIGVxdWFsIHRvIDApOlwiLFxuXHRcdFx0Y29uZmlnLmFuaW1hdGlvbnNEdXJhdGlvbi5ub3RpZmljYXRpb25DZW50ZXIsXG5cdFx0KTtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRpZiAoY29uZmlnLmFuaW1hdGlvbnNEdXJhdGlvbj8ub3NkICYmIGNvbmZpZy5hbmltYXRpb25zRHVyYXRpb24ub3NkIDwgMCkge1xuXHRcdGNvbnNvbGUuZXJyb3IoXG5cdFx0XHRcIkludmFsaWQgYGFuaW1hdGlvbnNEdXJhdGlvbi5vc2RgIChtdXN0IGJlIGdyZWF0ZXIgb3IgZXF1YWwgdG8gMCk6XCIsXG5cdFx0XHRjb25maWcuYW5pbWF0aW9uc0R1cmF0aW9uLm9zZCxcblx0XHQpO1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdGlmIChcblx0XHRjb25maWcuYW5pbWF0aW9uc0R1cmF0aW9uPy5zZXNzaW9uTWVudSAmJlxuXHRcdGNvbmZpZy5hbmltYXRpb25zRHVyYXRpb24uc2Vzc2lvbk1lbnUgPCAwXG5cdCkge1xuXHRcdGNvbnNvbGUuZXJyb3IoXG5cdFx0XHRcIkludmFsaWQgYGFuaW1hdGlvbnNEdXJhdGlvbi5zZXNzaW9uTWVudWAgKG11c3QgYmUgZ3JlYXRlciBvciBlcXVhbCB0byAwKTpcIixcblx0XHRcdGNvbmZpZy5hbmltYXRpb25zRHVyYXRpb24uc2Vzc2lvbk1lbnUsXG5cdFx0KTtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRpZiAoXG5cdFx0Y29uZmlnLmFuaW1hdGlvbnNUeXBlPy5ub3RpZmljYXRpb24gJiZcblx0XHQhYW5pbWF0aW9uVHlwZXMuaW5jbHVkZXMoY29uZmlnLmFuaW1hdGlvbnNUeXBlLm5vdGlmaWNhdGlvbilcblx0KSB7XG5cdFx0Y29uc29sZS5lcnJvcihcblx0XHRcdGBJbnZhbGlkIFxcYGFuaW1hdGlvbnNUeXBlLm5vdGlmaWNhdGlvblxcYCAobXVzdCBiZSBvbmUgb2YgJHthbmltYXRpb25UeXBlcy5tYXAoKHR5cGUpID0+IGBcIiR7dHlwZX1cImApLmpvaW4oXCIsIFwiKX0pOmAsXG5cdFx0XHRjb25maWcuYW5pbWF0aW9uc1R5cGUubm90aWZpY2F0aW9uLFxuXHRcdCk7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0aWYgKFxuXHRcdGNvbmZpZy5hbmltYXRpb25zVHlwZT8ubGF1bmNoZXIgJiZcblx0XHQhYW5pbWF0aW9uVHlwZXMuaW5jbHVkZXMoY29uZmlnLmFuaW1hdGlvbnNUeXBlLmxhdW5jaGVyKVxuXHQpIHtcblx0XHRjb25zb2xlLmVycm9yKFxuXHRcdFx0YEludmFsaWQgXFxgYW5pbWF0aW9uc1R5cGUubGF1bmNoZXJcXGAgKG11c3QgYmUgb25lIG9mICR7YW5pbWF0aW9uVHlwZXMubWFwKCh0eXBlKSA9PiBgXCIke3R5cGV9XCJgKS5qb2luKFwiLCBcIil9KTpgLFxuXHRcdFx0Y29uZmlnLmFuaW1hdGlvbnNUeXBlLmxhdW5jaGVyLFxuXHRcdCk7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0aWYgKFxuXHRcdGNvbmZpZy5hbmltYXRpb25zVHlwZT8ubm90aWZpY2F0aW9uQ2VudGVyICYmXG5cdFx0IWFuaW1hdGlvblR5cGVzLmluY2x1ZGVzKGNvbmZpZy5hbmltYXRpb25zVHlwZS5ub3RpZmljYXRpb25DZW50ZXIpXG5cdCkge1xuXHRcdGNvbnNvbGUuZXJyb3IoXG5cdFx0XHRgSW52YWxpZCBcXGBhbmltYXRpb25zVHlwZS5ub3RpZmljYXRpb25DZW50ZXJcXGAgKG11c3QgYmUgb25lIG9mICR7YW5pbWF0aW9uVHlwZXMubWFwKCh0eXBlKSA9PiBgXCIke3R5cGV9XCJgKS5qb2luKFwiLCBcIil9KTpgLFxuXHRcdFx0Y29uZmlnLmFuaW1hdGlvbnNUeXBlLm5vdGlmaWNhdGlvbkNlbnRlcixcblx0XHQpO1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdGlmIChcblx0XHRjb25maWcuYW5pbWF0aW9uc1R5cGU/Lm9zZCAmJlxuXHRcdCFhbmltYXRpb25UeXBlcy5pbmNsdWRlcyhjb25maWcuYW5pbWF0aW9uc1R5cGUub3NkKVxuXHQpIHtcblx0XHRjb25zb2xlLmVycm9yKFxuXHRcdFx0YEludmFsaWQgXFxgYW5pbWF0aW9uc1R5cGUub3NkXFxgIChtdXN0IGJlIG9uZSBvZiAke2FuaW1hdGlvblR5cGVzLm1hcCgodHlwZSkgPT4gYFwiJHt0eXBlfVwiYCkuam9pbihcIiwgXCIpfSk6YCxcblx0XHRcdGNvbmZpZy5hbmltYXRpb25zVHlwZS5vc2QsXG5cdFx0KTtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRpZiAoXG5cdFx0Y29uZmlnLmFuaW1hdGlvbnNUeXBlPy5zZXNzaW9uTWVudSAmJlxuXHRcdCFhbmltYXRpb25UeXBlcy5pbmNsdWRlcyhjb25maWcuYW5pbWF0aW9uc1R5cGUuc2Vzc2lvbk1lbnUpXG5cdCkge1xuXHRcdGNvbnNvbGUuZXJyb3IoXG5cdFx0XHRgSW52YWxpZCBcXGBhbmltYXRpb25zVHlwZS5zZXNzaW9uTWVudVxcYCAobXVzdCBiZSBvbmUgb2YgJHthbmltYXRpb25UeXBlcy5tYXAoKHR5cGUpID0+IGBcIiR7dHlwZX1cImApLmpvaW4oXCIsIFwiKX0pOmAsXG5cdFx0XHRjb25maWcuYW5pbWF0aW9uc1R5cGUuc2Vzc2lvbk1lbnUsXG5cdFx0KTtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRpZiAoY29uZmlnLnRpbWVvdXRzPy5vc2QgJiYgY29uZmlnLnRpbWVvdXRzLm9zZCA8IDApIHtcblx0XHRjb25zb2xlLmVycm9yKFxuXHRcdFx0XCJJbnZhbGlkIGB0aW1lb3V0cy5vc2RgIChtdXN0IGJlIGdyZWF0ZXIgb3IgZXF1YWwgdG8gMCk6XCIsXG5cdFx0XHRjb25maWcudGltZW91dHMub3NkLFxuXHRcdCk7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0aWYgKFxuXHRcdGNvbmZpZy50aW1lb3V0cz8uZGVmYXVsdE5vdGlmaWNhdGlvbkV4cGlyZSAmJlxuXHRcdGNvbmZpZy50aW1lb3V0cy5kZWZhdWx0Tm90aWZpY2F0aW9uRXhwaXJlIDwgMFxuXHQpIHtcblx0XHRjb25zb2xlLmVycm9yKFxuXHRcdFx0XCJJbnZhbGlkIGB0aW1lb3V0cy5kZWZhdWx0Tm90aWZpY2F0aW9uRXhwaXJlYCAobXVzdCBiZSBncmVhdGVyIG9yIGVxdWFsIHRvIDApOlwiLFxuXHRcdFx0Y29uZmlnLnRpbWVvdXRzLmRlZmF1bHROb3RpZmljYXRpb25FeHBpcmUsXG5cdFx0KTtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRpZiAoXG5cdFx0dHlwZW9mIGNvbmZpZy5zZXNzaW9uTWVudT8uYnV0dG9uV2lkdGggPT09IFwibnVtYmVyXCIgJiZcblx0XHRjb25maWcuc2Vzc2lvbk1lbnUuYnV0dG9uV2lkdGggPD0gMFxuXHQpIHtcblx0XHRjb25zb2xlLmVycm9yKFxuXHRcdFx0XCJJbnZhbGlkIGBzZXNzaW9uTWVudS5idXR0b25XaWR0aGAgKG11c3QgYmUgZ3JlYXRlciB0aGFuIDApOlwiLFxuXHRcdFx0Y29uZmlnLnNlc3Npb25NZW51LmJ1dHRvbldpZHRoLFxuXHRcdCk7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0aWYgKFxuXHRcdHR5cGVvZiBjb25maWcuc2Vzc2lvbk1lbnU/LmJ1dHRvbkhlaWdodCA9PT0gXCJudW1iZXJcIiAmJlxuXHRcdGNvbmZpZy5zZXNzaW9uTWVudS5idXR0b25IZWlnaHQgPD0gMFxuXHQpIHtcblx0XHRjb25zb2xlLmVycm9yKFxuXHRcdFx0XCJJbnZhbGlkIGBzZXNzaW9uTWVudS5idXR0b25IZWlnaHRgIChtdXN0IGJlIGdyZWF0ZXIgdGhhbiAwKTpcIixcblx0XHRcdGNvbmZpZy5zZXNzaW9uTWVudS5idXR0b25IZWlnaHQsXG5cdFx0KTtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRpZiAoXG5cdFx0dHlwZW9mIGNvbmZpZy5zZXNzaW9uTWVudT8uYnV0dG9uR2FwID09PSBcIm51bWJlclwiICYmXG5cdFx0Y29uZmlnLnNlc3Npb25NZW51LmJ1dHRvbkdhcCA8PSAwXG5cdCkge1xuXHRcdGNvbnNvbGUuZXJyb3IoXG5cdFx0XHRcIkludmFsaWQgYHNlc3Npb25NZW51LmJ1dHRvbkdhcGAgKG11c3QgYmUgZ3JlYXRlciB0aGFuIDApOlwiLFxuXHRcdFx0Y29uZmlnLnNlc3Npb25NZW51LmJ1dHRvbkdhcCxcblx0XHQpO1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdGlmIChjb25maWcubWVkaWFNYXhMZW5ndGggJiYgY29uZmlnLm1lZGlhTWF4TGVuZ3RoIDw9IDApIHtcblx0XHRjb25zb2xlLmVycm9yKFxuXHRcdFx0XCJJbnZhbGlkIGBtZWRpYU1heExlbmd0aGAgKG11c3QgYmUgZ3JlYXRlciB0aGFuIDApOlwiLFxuXHRcdFx0Y29uZmlnLm1lZGlhTWF4TGVuZ3RoLFxuXHRcdCk7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0aWYgKFxuXHRcdGNvbmZpZy5zeXN0ZW1TdGF0c1VwZGF0ZUludGVydmFsICYmXG5cdFx0Y29uZmlnLnN5c3RlbVN0YXRzVXBkYXRlSW50ZXJ2YWwgPCAxMDBcblx0KSB7XG5cdFx0Y29uc29sZS5lcnJvcihcblx0XHRcdFwiSW52YWxpZCBgc3lzdGVtU3RhdHNVcGRhdGVJbnRlcnZhbGAgKG11c3QgYmUgZ3JlYXRlciBvciBlcXVhbCB0byAxMDApOlwiLFxuXHRcdFx0Y29uZmlnLnN5c3RlbVN0YXRzVXBkYXRlSW50ZXJ2YWwsXG5cdFx0KTtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRyZXR1cm4gdHJ1ZTtcbn1cbiIsICJpbXBvcnQgeyBHZGssIEd0ayB9IGZyb20gXCJhZ3MvZ3RrNFwiO1xuXG5leHBvcnQgZnVuY3Rpb24gaXNJY29uKGljb24/OiBzdHJpbmcgfCBudWxsKSB7XG5cdGNvbnN0IGljb25UaGVtZSA9IEd0ay5JY29uVGhlbWUuZ2V0X2Zvcl9kaXNwbGF5KEdkay5EaXNwbGF5LmdldF9kZWZhdWx0KCkhKTtcblxuXHRyZXR1cm4gaWNvbiAmJiBpY29uVGhlbWUuaGFzX2ljb24oaWNvbik7XG59XG4iLCAiaW1wb3J0IHR5cGUgQXBwcyBmcm9tIFwiZ2k6Ly9Bc3RhbEFwcHNcIjtcbmltcG9ydCB7IGlzSWNvbiB9IGZyb20gXCJAL3V0aWwvaWNvbnNcIjtcbmltcG9ydCB7IEdkaywgR3RrIH0gZnJvbSBcImFncy9ndGs0XCI7XG5pbXBvcnQgdHlwZSB7IEFjY2Vzc29yIH0gZnJvbSBcImFnc1wiO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuXHRhcHA6IEFwcHMuQXBwbGljYXRpb247XG5cdGZvY3VzZWQ6IEFjY2Vzc29yPGJvb2xlYW4+O1xuXHRvbk9wZW46ICgpID0+IHZvaWQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEFwcCh7IGFwcCwgZm9jdXNlZCwgb25PcGVuIH06IFByb3BzKSB7XG5cdGZ1bmN0aW9uIGhhbmRsZUxlZnRDbGljaygpIHtcblx0XHRvbk9wZW4oKTtcblx0fVxuXG5cdHJldHVybiAoXG5cdFx0PGJveFxuXHRcdFx0b3JpZW50YXRpb249e0d0ay5PcmllbnRhdGlvbi5IT1JJWk9OVEFMfVxuXHRcdFx0Y2xhc3M9e2ZvY3VzZWQoKGlzRm9jdXNlZCkgPT5cblx0XHRcdFx0aXNGb2N1c2VkID8gXCJhcHAtY29udGFpbmVyIGZvY3VzXCIgOiBcImFwcC1jb250YWluZXJcIixcblx0XHRcdCl9XG5cdFx0XHRjdXJzb3I9e0dkay5DdXJzb3IubmV3X2Zyb21fbmFtZShcInBvaW50ZXJcIiwgbnVsbCl9XG5cdFx0PlxuXHRcdFx0PEd0ay5HZXN0dXJlQ2xpY2tcblx0XHRcdFx0YnV0dG9uPXtHZGsuQlVUVE9OX1BSSU1BUll9XG5cdFx0XHRcdG9uUHJlc3NlZD17aGFuZGxlTGVmdENsaWNrfVxuXHRcdFx0Lz5cblxuXHRcdFx0eyhhcHAuaWNvbk5hbWUgfHwgaXNJY29uKGFwcC5lbnRyeSkpICYmIChcblx0XHRcdFx0PGltYWdlXG5cdFx0XHRcdFx0Y2xhc3M9XCJhcHAtaWNvblwiXG5cdFx0XHRcdFx0dmlzaWJsZT17Qm9vbGVhbihhcHAuaWNvbk5hbWUgfHwgYXBwLmVudHJ5KX1cblx0XHRcdFx0XHRpY29uTmFtZT17YXBwLmljb25OYW1lIHx8IGFwcC5lbnRyeX1cblx0XHRcdFx0XHRwaXhlbFNpemU9ezM2fVxuXHRcdFx0XHQvPlxuXHRcdFx0KX1cblxuXHRcdFx0PGJveFxuXHRcdFx0XHRvcmllbnRhdGlvbj17R3RrLk9yaWVudGF0aW9uLlZFUlRJQ0FMfVxuXHRcdFx0XHRjbGFzcz1cImFwcC1kZXRhaWxzXCJcblx0XHRcdFx0dmFsaWduPXtHdGsuQWxpZ24uQ0VOVEVSfVxuXHRcdFx0PlxuXHRcdFx0XHQ8bGFiZWxcblx0XHRcdFx0XHRsYWJlbD17YXBwLm5hbWV9XG5cdFx0XHRcdFx0Y2xhc3M9XCJhcHAtbmFtZVwiXG5cdFx0XHRcdFx0aGFsaWduPXtHdGsuQWxpZ24uU1RBUlR9XG5cdFx0XHRcdC8+XG5cblx0XHRcdFx0e2FwcC5kZXNjcmlwdGlvbiAmJiAoXG5cdFx0XHRcdFx0PGxhYmVsXG5cdFx0XHRcdFx0XHRsYWJlbD17YXBwLmRlc2NyaXB0aW9ufVxuXHRcdFx0XHRcdFx0Y2xhc3M9XCJhcHAtZGVzY3JpcHRpb25cIlxuXHRcdFx0XHRcdFx0aGFsaWduPXtHdGsuQWxpZ24uU1RBUlR9XG5cdFx0XHRcdFx0Lz5cblx0XHRcdFx0KX1cblx0XHRcdDwvYm94PlxuXHRcdDwvYm94PlxuXHQpO1xufVxuIiwgImltcG9ydCB7IGNyZWF0ZUNvbXB1dGVkLCBjcmVhdGVTdGF0ZSwgRm9yLCB0eXBlIEFjY2Vzc29yIH0gZnJvbSBcImFnc1wiO1xuaW1wb3J0IHR5cGUgeyBQcmVzc2VkS2V5IH0gZnJvbSBcIi4uLy4uL0xhdW5jaGVyXCI7XG5pbXBvcnQgeyBHZGssIEd0ayB9IGZyb20gXCJhZ3MvZ3RrNFwiO1xuaW1wb3J0IEFwcCBmcm9tIFwiLi9jb21wb25lbnRzL0FwcFwiO1xuaW1wb3J0IEFwcHMgZnJvbSBcImdpOi8vQXN0YWxBcHBzXCI7XG5cbmludGVyZmFjZSBQcm9wcyB7XG5cdGNsb3NlOiAoKSA9PiB2b2lkO1xuXHRzZWFyY2hWYWx1ZTogQWNjZXNzb3I8c3RyaW5nIHwgbnVsbD47XG5cdGVudGVyUHJlc3NlZDogQWNjZXNzb3I8Ym9vbGVhbj47XG5cdHByZXNzZWRLZXk6IEFjY2Vzc29yPFByZXNzZWRLZXkgfCBudWxsPjtcblx0dmlzaWJsZTogQWNjZXNzb3I8Ym9vbGVhbj47XG5cdGNsb3NlZDogQWNjZXNzb3I8Ym9vbGVhbj47XG5cdGVudHJ5OiBHdGsuRW50cnkgfCBudWxsO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBBcHBNb2RlKHtcblx0Y2xvc2UsXG5cdHNlYXJjaFZhbHVlLFxuXHRlbnRlclByZXNzZWQsXG5cdHByZXNzZWRLZXksXG5cdHZpc2libGUsXG5cdGNsb3NlZCxcblx0ZW50cnksXG59OiBQcm9wcykge1xuXHRjb25zdCBhcHBzID0gbmV3IEFwcHMuQXBwcyh7XG5cdFx0bmFtZU11bHRpcGxpZXI6IDIsXG5cdFx0ZW50cnlNdWx0aXBsaWVyOiAwLFxuXHRcdGV4ZWN1dGFibGVNdWx0aXBsaWVyOiAyLFxuXHR9KTtcblxuXHRjb25zdCBbZm9jdXNlZEFwcCwgc2V0Rm9jdXNlZEFwcF0gPSBjcmVhdGVTdGF0ZSgwKTtcblxuXHRjbG9zZWQuc3Vic2NyaWJlKCgpID0+IHtcblx0XHRpZiAoIWNsb3NlZC5nZXQoKSB8fCAhdmlzaWJsZS5nZXQoKSkgcmV0dXJuO1xuXG5cdFx0Y2xvc2UoKTtcblx0XHRzZXRBcHBMaXN0KGFwcHMuZ2V0X2xpc3QoKSk7XG5cdH0pO1xuXG5cdGVudGVyUHJlc3NlZC5zdWJzY3JpYmUoKCkgPT4ge1xuXHRcdGlmICghZW50ZXJQcmVzc2VkLmdldCgpIHx8ICF2aXNpYmxlLmdldCgpKSByZXR1cm47XG5cblx0XHRoYW5kbGVJbnB1dEVudGVyKCk7XG5cdH0pO1xuXG5cdHByZXNzZWRLZXkuc3Vic2NyaWJlKCgpID0+IHtcblx0XHRpZiAoIXZpc2libGUuZ2V0KCkpIHJldHVybjtcblxuXHRcdGNvbnN0IGtleURhdGEgPSBwcmVzc2VkS2V5LmdldCgpO1xuXG5cdFx0aWYgKCFrZXlEYXRhKSByZXR1cm47XG5cblx0XHRpZiAoXG5cdFx0XHQoa2V5RGF0YS5rZXl2YWwgPT09IEdkay5LRVlfRG93biB8fFxuXHRcdFx0XHRrZXlEYXRhLmtleXZhbCA9PT0gR2RrLktFWV9UYWIpICYmXG5cdFx0XHRhcHBMaXN0LmdldCgpLmxlbmd0aCA+IGZvY3VzZWRBcHAuZ2V0KClcblx0XHQpIHtcblx0XHRcdHNldEZvY3VzZWRBcHAoKHByZXYpID0+IHByZXYgKyAxKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoXG5cdFx0XHRrZXlEYXRhLmtleXZhbCA9PT0gR2RrLktFWV9VcCB8fFxuXHRcdFx0a2V5RGF0YS5rZXl2YWwgPT09IEdkay5LRVlfSVNPX0xlZnRfVGFiXG5cdFx0KSB7XG5cdFx0XHRpZiAoZm9jdXNlZEFwcC5nZXQoKSA+IDApIHNldEZvY3VzZWRBcHAoKHByZXYpID0+IHByZXYgLSAxKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoa2V5RGF0YS5rZXl2YWwgPT09IEdkay5LRVlfRXNjYXBlKSB7XG5cdFx0XHRjbG9zZSgpO1xuXHRcdFx0c2V0QXBwTGlzdChhcHBzLmdldF9saXN0KCkpO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGNvbnN0IGlzQWx0ID0ga2V5RGF0YS5tb2RpZmllciAmIEdkay5Nb2RpZmllclR5cGUuQUxUX01BU0s7XG5cblx0XHRjb25zdCBudW1iZXJLZXlzID0gW1xuXHRcdFx0R2RrLktFWV8xLFxuXHRcdFx0R2RrLktFWV8yLFxuXHRcdFx0R2RrLktFWV8zLFxuXHRcdFx0R2RrLktFWV80LFxuXHRcdFx0R2RrLktFWV81LFxuXHRcdFx0R2RrLktFWV82LFxuXHRcdFx0R2RrLktFWV83LFxuXHRcdFx0R2RrLktFWV84LFxuXHRcdFx0R2RrLktFWV85LFxuXHRcdFx0R2RrLktFWV8wLFxuXHRcdF07XG5cblx0XHRpZiAoaXNBbHQgJiYgbnVtYmVyS2V5cy5pbmNsdWRlcyhrZXlEYXRhLmtleXZhbCkpIHtcblx0XHRcdGNvbnN0IGluZGV4ID0gbnVtYmVyS2V5cy5pbmRleE9mKGtleURhdGEua2V5dmFsKTtcblxuXHRcdFx0aWYgKGluZGV4ID09PSAtMSB8fCBpbmRleCA+PSBhcHBMaXN0LmdldCgpLmxlbmd0aCkge1xuXHRcdFx0XHRjbG9zZSgpO1xuXHRcdFx0XHRzZXRBcHBMaXN0KGFwcHMuZ2V0X2xpc3QoKSk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0YXBwTGlzdC5nZXQoKVtpbmRleF0ubGF1bmNoKCk7XG5cdFx0XHRjbG9zZSgpO1xuXHRcdFx0c2V0QXBwTGlzdChhcHBzLmdldF9saXN0KCkpO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmIChrZXlEYXRhLmtleXZhbCA9PT0gR2RrLktFWV9SZXR1cm4pIHtcblx0XHRcdGhhbmRsZUlucHV0RW50ZXIoKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoa2V5RGF0YS5rZXl2YWwgPT09IEdkay5LRVlfQmFja1NwYWNlICYmIGVudHJ5KSB7XG5cdFx0XHRjb25zdCB0ZXh0ID0gZW50cnkudGV4dDtcblxuXHRcdFx0aWYgKHRleHQubGVuZ3RoID4gMCkge1xuXHRcdFx0XHRjb25zdCBwb3MgPSBlbnRyeS5nZXRfcG9zaXRpb24oKTtcblx0XHRcdFx0aWYgKHBvcyA+IDApIHtcblx0XHRcdFx0XHRjb25zdCBuZXdUZXh0ID1cblx0XHRcdFx0XHRcdGVudHJ5LnRleHQuc2xpY2UoMCwgcG9zIC0gMSkgKyBlbnRyeS50ZXh0LnNsaWNlKHBvcyk7XG5cblx0XHRcdFx0XHRlbnRyeS5zZXRfdGV4dChuZXdUZXh0KTtcblx0XHRcdFx0XHRlbnRyeS5ncmFiX2ZvY3VzKCk7XG5cdFx0XHRcdFx0ZW50cnkuc2V0X3Bvc2l0aW9uKHBvcyAtIDEpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoa2V5RGF0YS5rZXl2YWwgPT09IEdkay5LRVlfRGVsZXRlICYmIGVudHJ5KSB7XG5cdFx0XHRjb25zdCB0ZXh0ID0gZW50cnkudGV4dDtcblxuXHRcdFx0aWYgKHRleHQubGVuZ3RoID4gMCkge1xuXHRcdFx0XHRjb25zdCBwb3MgPSBlbnRyeS5nZXRfcG9zaXRpb24oKTtcblx0XHRcdFx0aWYgKHBvcyA+IDApIHtcblx0XHRcdFx0XHRjb25zdCBuZXdUZXh0ID1cblx0XHRcdFx0XHRcdGVudHJ5LnRleHQuc2xpY2UoMCwgcG9zKSArIGVudHJ5LnRleHQuc2xpY2UocG9zICsgMSk7XG5cblx0XHRcdFx0XHRlbnRyeS5zZXRfdGV4dChuZXdUZXh0KTtcblx0XHRcdFx0XHRlbnRyeS5ncmFiX2ZvY3VzKCk7XG5cdFx0XHRcdFx0ZW50cnkuc2V0X3Bvc2l0aW9uKHBvcyk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGNvbnN0IGludmFsaWRLZXlzID0gW1xuXHRcdFx0R2RrLktFWV9TaGlmdF9MLFxuXHRcdFx0R2RrLktFWV9TaGlmdF9SLFxuXHRcdFx0R2RrLktFWV9TaGlmdF9Mb2NrLFxuXHRcdFx0R2RrLktFWV9BbHRfTCxcblx0XHRcdEdkay5LRVlfQWx0X1IsXG5cdFx0XHRHZGsuS0VZX0NvbnRyb2xfTCxcblx0XHRcdEdkay5LRVlfQ29udHJvbF9SLFxuXHRcdFx0R2RrLktFWV9GMSxcblx0XHRcdEdkay5LRVlfRjIsXG5cdFx0XHRHZGsuS0VZX0YzLFxuXHRcdFx0R2RrLktFWV9GNCxcblx0XHRcdEdkay5LRVlfRjUsXG5cdFx0XHRHZGsuS0VZX0Y2LFxuXHRcdFx0R2RrLktFWV9GNyxcblx0XHRcdEdkay5LRVlfRjgsXG5cdFx0XHRHZGsuS0VZX0Y5LFxuXHRcdFx0R2RrLktFWV9GMTAsXG5cdFx0XHRHZGsuS0VZX0YxMSxcblx0XHRcdEdkay5LRVlfRjEyLFxuXHRcdFx0R2RrLktFWV9GMTMsXG5cdFx0XHRHZGsuS0VZX0YxNCxcblx0XHRcdEdkay5LRVlfRjE1LFxuXHRcdFx0R2RrLktFWV9GMTYsXG5cdFx0XHRHZGsuS0VZX0YxNyxcblx0XHRcdEdkay5LRVlfRjE4LFxuXHRcdFx0R2RrLktFWV9GMTksXG5cdFx0XHRHZGsuS0VZX0YyMCxcblx0XHRcdEdkay5LRVlfRjIxLFxuXHRcdFx0R2RrLktFWV9GMjIsXG5cdFx0XHRHZGsuS0VZX0YyMyxcblx0XHRcdEdkay5LRVlfRjI0LFxuXHRcdFx0R2RrLktFWV9GMjUsXG5cdFx0XHRHZGsuS0VZX0YyNixcblx0XHRcdEdkay5LRVlfRjI3LFxuXHRcdFx0R2RrLktFWV9GMjgsXG5cdFx0XHRHZGsuS0VZX0YyOSxcblx0XHRcdEdkay5LRVlfQ2FuY2VsLFxuXHRcdFx0R2RrLktFWV9OdW1fTG9jayxcblx0XHRcdEdkay5LRVlfTWVkaWFSZXBlYXQsXG5cdFx0XHRHZGsuS0VZX0F1ZGlvUGxheSxcblx0XHRcdEdkay5LRVlfMzI3MF9QcmludFNjcmVlbixcblx0XHRcdEdkay5LRVlfTGVmdCxcblx0XHRcdEdkay5LRVlfUmlnaHQsXG5cdFx0XHRHZGsuS0VZX1VwLFxuXHRcdFx0R2RrLktFWV9Eb3duLFxuXHRcdFx0R2RrLktFWV9LUF8wLFxuXHRcdFx0R2RrLktFWV9LUF8xLFxuXHRcdFx0R2RrLktFWV9LUF8yLFxuXHRcdFx0R2RrLktFWV9LUF8zLFxuXHRcdFx0R2RrLktFWV9LUF80LFxuXHRcdFx0R2RrLktFWV9LUF81LFxuXHRcdFx0R2RrLktFWV9LUF82LFxuXHRcdFx0R2RrLktFWV9LUF83LFxuXHRcdFx0R2RrLktFWV9LUF84LFxuXHRcdFx0R2RrLktFWV9LUF85LFxuXHRcdFx0R2RrLktFWV9LUF9TZXBhcmF0b3IsXG5cdFx0XHRHZGsuS0VZX0tQX1BhZ2VfVXAsXG5cdFx0XHRHZGsuS0VZX0tQX1BhZ2VfRG93bixcblx0XHRcdEdkay5LRVlfS1BfRW5kLFxuXHRcdFx0R2RrLktFWV9LUF9Ib21lLFxuXHRcdFx0R2RrLktFWV9LUF9MZWZ0LFxuXHRcdFx0R2RrLktFWV9LUF9VcCxcblx0XHRcdEdkay5LRVlfS1BfUmlnaHQsXG5cdFx0XHRHZGsuS0VZX0tQX0Rvd24sXG5cdFx0XHRHZGsuS0VZX0tQX0luc2VydCxcblx0XHRcdEdkay5LRVlfS1BfRGVsZXRlLFxuXHRcdFx0R2RrLktFWV9LUF9CZWdpbixcblx0XHRcdEdkay5LRVlfTWV0YV9MLFxuXHRcdFx0R2RrLktFWV9NZXRhX1IsXG5cdFx0XHRHZGsuS0VZX1N1cGVyX0wsXG5cdFx0XHRHZGsuS0VZX1N1cGVyX1IsXG5cdFx0XHRHZGsuS0VZX0tiZElucHV0QXNzaXN0Q2FuY2VsLFxuXHRcdF07XG5cblx0XHRpZiAoIWtleURhdGEubW9kaWZpZXIgJiYgZW50cnkgJiYgIWVudHJ5Lmhhc0ZvY3VzKSB7XG5cdFx0XHRlbnRyeS5ncmFiX2ZvY3VzKCk7XG5cblx0XHRcdGlmICghaW52YWxpZEtleXMuaW5jbHVkZXMoa2V5RGF0YS5rZXl2YWwpKSB7XG5cdFx0XHRcdGVudHJ5LnNldF90ZXh0KFxuXHRcdFx0XHRcdGVudHJ5LnRleHQgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKGtleURhdGEua2V5dmFsKSxcblx0XHRcdFx0KTtcblx0XHRcdFx0ZW50cnkuc2V0X3Bvc2l0aW9uKGVudHJ5LnRleHQubGVuZ3RoKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0fSk7XG5cblx0Y29uc3QgW2FwcExpc3QsIHNldEFwcExpc3RdID0gY3JlYXRlU3RhdGU8QXBwcy5BcHBsaWNhdGlvbltdPihcblx0XHRhcHBzLmdldF9saXN0KCksXG5cdCk7XG5cblx0c2VhcmNoVmFsdWUuc3Vic2NyaWJlKCgpID0+IHtcblx0XHRpZiAoIXZpc2libGUuZ2V0KCkpIHJldHVybjtcblxuXHRcdHNldEFwcExpc3QoYXBwcy5mdXp6eV9xdWVyeShzZWFyY2hWYWx1ZS5nZXQoKSkpO1xuXHRcdHNldEZvY3VzZWRBcHAoMCk7XG5cdH0pO1xuXG5cdGZ1bmN0aW9uIGhhbmRsZUlucHV0RW50ZXIoKSB7XG5cdFx0Y29uc3QgbGlzdCA9IGFwcExpc3QuZ2V0KCk7XG5cdFx0Y29uc3QgYXBwSW5kZXggPSBmb2N1c2VkQXBwLmdldCgpO1xuXG5cdFx0aWYgKGxpc3QubGVuZ3RoIDw9IGFwcEluZGV4KSB7XG5cdFx0XHRjbG9zZSgpO1xuXHRcdFx0c2V0QXBwTGlzdChhcHBzLmdldF9saXN0KCkpO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGxpc3RbYXBwSW5kZXhdLmxhdW5jaCgpO1xuXHRcdGNsb3NlKCk7XG5cdFx0c2V0QXBwTGlzdChhcHBzLmdldF9saXN0KCkpO1xuXHR9XG5cblx0cmV0dXJuIChcblx0XHQ8Ym94XG5cdFx0XHRvcmllbnRhdGlvbj17R3RrLk9yaWVudGF0aW9uLlZFUlRJQ0FMfVxuXHRcdFx0dmlzaWJsZT17dmlzaWJsZX1cblx0XHRcdGNsYXNzPVwiYXBwcy1jb250YWluZXJcIlxuXHRcdD5cblx0XHRcdDxGb3IgZWFjaD17YXBwTGlzdH0+XG5cdFx0XHRcdHsoYXBwLCBpbmRleCkgPT4gKFxuXHRcdFx0XHRcdDxBcHBcblx0XHRcdFx0XHRcdGFwcD17YXBwfVxuXHRcdFx0XHRcdFx0Zm9jdXNlZD17Y3JlYXRlQ29tcHV0ZWQoXG5cdFx0XHRcdFx0XHRcdFtmb2N1c2VkQXBwLCBpbmRleF0sXG5cdFx0XHRcdFx0XHRcdChmb2N1c2VkQXBwLCBpbmRleCkgPT4gZm9jdXNlZEFwcCA9PT0gaW5kZXgsXG5cdFx0XHRcdFx0XHQpfVxuXHRcdFx0XHRcdFx0b25PcGVuPXsoKSA9PiB7XG5cdFx0XHRcdFx0XHRcdGFwcC5sYXVuY2goKTtcblx0XHRcdFx0XHRcdFx0Y2xvc2UoKTtcblx0XHRcdFx0XHRcdFx0c2V0QXBwTGlzdChhcHBzLmdldF9saXN0KCkpO1xuXHRcdFx0XHRcdFx0fX1cblx0XHRcdFx0XHQvPlxuXHRcdFx0XHQpfVxuXHRcdFx0PC9Gb3I+XG5cdFx0PC9ib3g+XG5cdCk7XG59XG4iLCAiaW1wb3J0IHsgY3JlYXRlQmluZGluZywgV2l0aCwgdHlwZSBBY2Nlc3NvciB9IGZyb20gXCJhZ3NcIjtcbmltcG9ydCB7IHNldElzTm90aWZpY2F0aW9uQ2VudGVyVmlzaWJsZSB9IGZyb20gXCJAL2FwcFwiO1xuaW1wb3J0IE5vdGlmZCBmcm9tIFwiZ2k6Ly9Bc3RhbE5vdGlmZFwiO1xuaW1wb3J0IHsgR2RrLCBHdGsgfSBmcm9tIFwiYWdzL2d0azRcIjtcblxuaW50ZXJmYWNlIFByb3BzIHtcblx0Y2xhc3M/OiBzdHJpbmcgfCBBY2Nlc3NvcjxzdHJpbmc+O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBOb3RpZmljYXRpb25zKHsgY2xhc3M6IGNsYXNzTmFtZSB9OiBQcm9wcykge1xuXHRjb25zdCBub3RpZmQgPSBOb3RpZmQuZ2V0X2RlZmF1bHQoKTtcblxuXHRjb25zdCBub3RpZnMgPSBjcmVhdGVCaW5kaW5nKG5vdGlmZCwgXCJub3RpZmljYXRpb25zXCIpO1xuXHRjb25zdCBkb250RGlzdHVyYiA9IGNyZWF0ZUJpbmRpbmcobm90aWZkLCBcImRvbnREaXN0dXJiXCIpO1xuXG5cdGZ1bmN0aW9uIHRyYW5zZm9ybUxhYmVsKG5vdGlmaWNhdGlvbnM6IE5vdGlmZC5Ob3RpZmljYXRpb25bXSkge1xuXHRcdHJldHVybiBgJHtub3RpZmljYXRpb25zLmxlbmd0aH1gO1xuXHR9XG5cblx0ZnVuY3Rpb24gdHJhbnNmb3JtSWNvbihkb250RGlzdHVyYjogYm9vbGVhbikge1xuXHRcdHJldHVybiBkb250RGlzdHVyYlxuXHRcdFx0PyBcIm1pLW5vdGlmaWNhdGlvbnMtb2ZmLXN5bWJvbGljXCJcblx0XHRcdDogXCJtaS1ub3RpZmljYXRpb25zLXN5bWJvbGljXCI7XG5cdH1cblxuXHRmdW5jdGlvbiBoYW5kbGVMZWZ0Q2xpY2soKSB7XG5cdFx0c2V0SXNOb3RpZmljYXRpb25DZW50ZXJWaXNpYmxlKChwcmV2KSA9PiAhcHJldik7XG5cdH1cblxuXHRmdW5jdGlvbiBoYW5kbGVSaWdodENsaWNrKCkge1xuXHRcdG5vdGlmZC5zZXRfZG9udF9kaXN0dXJiKCFub3RpZmQuZG9udERpc3R1cmIpO1xuXHR9XG5cblx0ZnVuY3Rpb24gaGFuZGxlTWlkZGxlQ2xpY2soKSB7XG5cdFx0Y29uc3Qgbm90aWZpY2F0aW9ucyA9IG5vdGlmZC5nZXRfbm90aWZpY2F0aW9ucygpO1xuXG5cdFx0Zm9yIChjb25zdCBub3RpZmljYXRpb24gb2Ygbm90aWZpY2F0aW9ucykge1xuXHRcdFx0bm90aWZpY2F0aW9uLmRpc21pc3MoKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gKFxuXHRcdDxib3hcblx0XHRcdGNsYXNzPXtjbGFzc05hbWV9XG5cdFx0XHRjdXJzb3I9e0dkay5DdXJzb3IubmV3X2Zyb21fbmFtZShcInBvaW50ZXJcIiwgbnVsbCl9XG5cdFx0PlxuXHRcdFx0PEd0ay5HZXN0dXJlQ2xpY2tcblx0XHRcdFx0YnV0dG9uPXtHZGsuQlVUVE9OX1BSSU1BUll9XG5cdFx0XHRcdG9uUHJlc3NlZD17aGFuZGxlTGVmdENsaWNrfVxuXHRcdFx0Lz5cblxuXHRcdFx0PEd0ay5HZXN0dXJlQ2xpY2tcblx0XHRcdFx0YnV0dG9uPXtHZGsuQlVUVE9OX1NFQ09OREFSWX1cblx0XHRcdFx0b25QcmVzc2VkPXtoYW5kbGVSaWdodENsaWNrfVxuXHRcdFx0Lz5cblxuXHRcdFx0PEd0ay5HZXN0dXJlQ2xpY2tcblx0XHRcdFx0YnV0dG9uPXtHZGsuQlVUVE9OX01JRERMRX1cblx0XHRcdFx0b25QcmVzc2VkPXtoYW5kbGVNaWRkbGVDbGlja31cblx0XHRcdC8+XG5cblx0XHRcdDxib3hcblx0XHRcdFx0Y2xhc3M9e25vdGlmcygobm90aWZpY2F0aW9ucykgPT5cblx0XHRcdFx0XHRub3RpZmljYXRpb25zLmxlbmd0aCA+IDBcblx0XHRcdFx0XHRcdD8gXCJub3RpZmljYXRpb24taWNvbiB1bnJlYWRcIlxuXHRcdFx0XHRcdFx0OiBcIm5vdGlmaWNhdGlvbi1pY29uXCIsXG5cdFx0XHRcdCl9XG5cdFx0XHQ+XG5cdFx0XHRcdDxpbWFnZSBpY29uTmFtZT17ZG9udERpc3R1cmIodHJhbnNmb3JtSWNvbil9IGNsYXNzPVwiaWNvblwiIC8+XG5cblx0XHRcdFx0PFdpdGggdmFsdWU9e25vdGlmc30+XG5cdFx0XHRcdFx0eyhub3RpZmljYXRpb25zKSA9PlxuXHRcdFx0XHRcdFx0bm90aWZpY2F0aW9ucy5sZW5ndGggPiAwICYmIChcblx0XHRcdFx0XHRcdFx0PGltYWdlXG5cdFx0XHRcdFx0XHRcdFx0aWNvbk5hbWU9XCJtaS1jaXJjbGUtc3ltYm9saWNcIlxuXHRcdFx0XHRcdFx0XHRcdGNsYXNzPVwidW5yZWFkXCJcblx0XHRcdFx0XHRcdFx0XHRwaXhlbFNpemU9ezh9XG5cdFx0XHRcdFx0XHRcdC8+XG5cdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHQ8L1dpdGg+XG5cdFx0XHQ8L2JveD5cblxuXHRcdFx0PGxhYmVsIGxhYmVsPXtub3RpZnModHJhbnNmb3JtTGFiZWwpfSAvPlxuXHRcdDwvYm94PlxuXHQpO1xufVxuIiwgImltcG9ydCB7IGNyZWF0ZUJpbmRpbmcsIGNyZWF0ZUNvbXB1dGVkLCBjcmVhdGVTdGF0ZSwgdHlwZSBBY2Nlc3NvciB9IGZyb20gXCJhZ3NcIjtcbmltcG9ydCB7IGRlZmF1bHRDb25maWcgfSBmcm9tIFwiQC9jb25zdGFudHMvY29uZmlnXCI7XG5pbXBvcnQgeyBjb25maWcgfSBmcm9tIFwiQC91dGlsL2NvbmZpZ1wiO1xuaW1wb3J0IHsgR3RrIH0gZnJvbSBcImFncy9ndGs0XCI7XG5pbXBvcnQgV3AgZnJvbSBcImdpOi8vQXN0YWxXcFwiO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuXHRjbGFzcz86IHN0cmluZyB8IEFjY2Vzc29yPHN0cmluZz47XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIE1pY3JvcGhvbmUoeyBjbGFzczogY2xhc3NOYW1lIH06IFByb3BzKSB7XG5cdGNvbnN0IHdwID0gV3AuZ2V0X2RlZmF1bHQoKTtcblx0Y29uc3QgbWljcm9waG9uZSA9IHdwPy5hdWRpby5kZWZhdWx0TWljcm9waG9uZTtcblxuXHRpZiAoIXdwIHx8ICFtaWNyb3Bob25lKVxuXHRcdHJldHVybiAoXG5cdFx0XHQ8Ym94IGNsYXNzPXtjbGFzc05hbWV9PlxuXHRcdFx0XHQ8bGFiZWwgbGFiZWw9XCJJbmFjY2Vzc2libGUgTWljcm9waG9uZVwiIC8+XG5cdFx0XHQ8L2JveD5cblx0XHQpO1xuXG5cdGNvbnN0IHZvbHVtZSA9IGNyZWF0ZUJpbmRpbmcobWljcm9waG9uZSwgXCJ2b2x1bWVcIik7XG5cdGNvbnN0IGljb25OYW1lID0gY3JlYXRlQmluZGluZyhtaWNyb3Bob25lLCBcInZvbHVtZV9pY29uXCIpO1xuXHRjb25zdCBkZXZpY2UgPSBjcmVhdGVCaW5kaW5nKG1pY3JvcGhvbmUsIFwiZGVzY3JpcHRpb25cIik7XG5cblx0Y29uc3QgW2lzQmx1ZXRvb3RoLCBzZXRJc0JsdWV0b290aF0gPSBjcmVhdGVTdGF0ZShcblx0XHRtaWNyb3Bob25lLmdldF9wd19wcm9wZXJ0eShcImRldmljZS5hcGlcIikgPT09IFwiYmx1ZXo1XCIsXG5cdCk7XG5cblx0Y29uc3QgaWNvbiA9IGNyZWF0ZUNvbXB1dGVkKFtpY29uTmFtZSwgdm9sdW1lXSwgdHJhbnNmb3JtSWNvbik7XG5cblx0ZGV2aWNlLnN1YnNjcmliZSgoKSA9PiB7XG5cdFx0c2V0SXNCbHVldG9vdGgobWljcm9waG9uZS5nZXRfcHdfcHJvcGVydHkoXCJkZXZpY2UuYXBpXCIpID09PSBcImJsdWV6NVwiKTtcblx0fSk7XG5cblx0ZnVuY3Rpb24gdHJhbnNmb3JtTGFiZWwodm9sdW1lOiBudW1iZXIpIHtcblx0XHRyZXR1cm4gYCR7TWF0aC5yb3VuZCh2b2x1bWUgKiAxMDApfSVgO1xuXHR9XG5cblx0ZnVuY3Rpb24gdHJhbnNmb3JtVG9vbHRpcChkZXZpY2U6IHN0cmluZykge1xuXHRcdHJldHVybiBgRGV2aWNlOiAke2RldmljZX1gO1xuXHR9XG5cblx0ZnVuY3Rpb24gdHJhbnNmb3JtSWNvbihpY29uTmFtZTogc3RyaW5nLCB2b2x1bWU6IG51bWJlcikge1xuXHRcdGlmICh2b2x1bWUgPT09IDApIHJldHVybiBcIm1pY3JvcGhvbmUtc2Vuc2l0aXZpdHktbXV0ZWQtc3ltYm9saWNcIjtcblx0XHRyZXR1cm4gaWNvbk5hbWU7XG5cdH1cblxuXHRmdW5jdGlvbiBoYW5kbGVTY3JvbGwoXG5cdFx0X2V2ZW50OiBHdGsuRXZlbnRDb250cm9sbGVyU2Nyb2xsLFxuXHRcdF9kZWx0YVg6IG51bWJlcixcblx0XHRkZWx0YVk6IG51bWJlcixcblx0KSB7XG5cdFx0Y29uc3Qgd3AgPSBXcC5nZXRfZGVmYXVsdCgpO1xuXHRcdGNvbnN0IG1pY3JvcGhvbmUgPSB3cD8uYXVkaW8uZGVmYXVsdE1pY3JvcGhvbmU7XG5cblx0XHRpZiAoZGVsdGFZIDwgMCkge1xuXHRcdFx0bWljcm9waG9uZT8uc2V0X3ZvbHVtZShcblx0XHRcdFx0bWljcm9waG9uZS52b2x1bWUgK1xuXHRcdFx0XHRcdChjb25maWcuZ2V0KCkudm9sdW1lU3RlcD8ubWljcm9waG9uZSA/P1xuXHRcdFx0XHRcdFx0ZGVmYXVsdENvbmZpZy52b2x1bWVTdGVwLm1pY3JvcGhvbmUpLFxuXHRcdFx0KTtcblx0XHR9IGVsc2UgaWYgKGRlbHRhWSA+IDApIHtcblx0XHRcdG1pY3JvcGhvbmU/LnNldF92b2x1bWUoXG5cdFx0XHRcdG1pY3JvcGhvbmUudm9sdW1lIC1cblx0XHRcdFx0XHQoY29uZmlnLmdldCgpLnZvbHVtZVN0ZXA/Lm1pY3JvcGhvbmUgPz9cblx0XHRcdFx0XHRcdGRlZmF1bHRDb25maWcudm9sdW1lU3RlcC5taWNyb3Bob25lKSxcblx0XHRcdCk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIChcblx0XHQ8Ym94IGNsYXNzPXtjbGFzc05hbWV9IHRvb2x0aXBNYXJrdXA9e2RldmljZSh0cmFuc2Zvcm1Ub29sdGlwKX0+XG5cdFx0XHQ8R3RrLkV2ZW50Q29udHJvbGxlclNjcm9sbFxuXHRcdFx0XHRmbGFncz17R3RrLkV2ZW50Q29udHJvbGxlclNjcm9sbEZsYWdzLlZFUlRJQ0FMfVxuXHRcdFx0XHRvblNjcm9sbD17aGFuZGxlU2Nyb2xsfVxuXHRcdFx0Lz5cblxuXHRcdFx0PGltYWdlXG5cdFx0XHRcdGljb25OYW1lPVwibWktYmx1ZXRvb3RoLWNvbm5lY3RlZC1zeW1ib2xpY1wiXG5cdFx0XHRcdHZpc2libGU9e2lzQmx1ZXRvb3RofVxuXHRcdFx0XHRjbGFzcz1cIm1pY3JvcGhvbmUtYmx1ZXRvb3RoLWljb25cIlxuXHRcdFx0Lz5cblxuXHRcdFx0PGltYWdlIGljb25OYW1lPXtpY29ufSBjbGFzcz1cIm1pY3JvcGhvbmUtaWNvblwiIC8+XG5cblx0XHRcdDxsYWJlbCBsYWJlbD17dm9sdW1lKHRyYW5zZm9ybUxhYmVsKX0gLz5cblx0XHQ8L2JveD5cblx0KTtcbn1cbiIsICJpbXBvcnQgR0xpYiBmcm9tIFwiZ2k6Ly9HTGliXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXRTZWNvbmRzKHNlY29uZHM6IG51bWJlcik6IHN0cmluZyB7XG5cdGlmICghTnVtYmVyLmlzRmluaXRlKHNlY29uZHMpIHx8IHNlY29uZHMgPCAwKSByZXR1cm4gXCIwc1wiO1xuXG5cdGNvbnN0IGggPSBNYXRoLmZsb29yKHNlY29uZHMgLyAzNjAwKTtcblx0Y29uc3QgbSA9IE1hdGguZmxvb3IoKHNlY29uZHMgJSAzNjAwKSAvIDYwKTtcblx0Y29uc3QgcyA9IE1hdGguZmxvb3Ioc2Vjb25kcyAlIDYwKTtcblxuXHRjb25zdCBwYXJ0cyA9IFtdO1xuXHRpZiAoaCA+IDApIHBhcnRzLnB1c2goYCR7aH1oYCk7XG5cdGlmIChtID4gMCkgcGFydHMucHVzaChgJHttfW1gKTtcblx0aWYgKHMgPiAwIHx8IHBhcnRzLmxlbmd0aCA9PT0gMCkgcGFydHMucHVzaChgJHtzfXNgKTtcblxuXHRyZXR1cm4gcGFydHMuam9pbihcIiBcIik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0aW1lKHRpbWU6IG51bWJlciwgZm9ybWF0ID0gXCIlSDolTVwiKSB7XG5cdHJldHVybiBHTGliLkRhdGVUaW1lLm5ld19mcm9tX3VuaXhfbG9jYWwodGltZSkuZm9ybWF0KGZvcm1hdCkhO1xufVxuIiwgImltcG9ydCB7IGNyZWF0ZVN0YXRlLCBjcmVhdGVDb21wdXRlZCwgY3JlYXRlQmluZGluZyB9IGZyb20gXCJhZ3NcIjtcbmltcG9ydCB7IGZvcm1hdFNlY29uZHMgfSBmcm9tIFwiQC91dGlsL2Zvcm1hdFRpbWVcIjtcbmltcG9ydCBBc3RhbEJhdHRlcnkgZnJvbSBcImdpOi8vQXN0YWxCYXR0ZXJ5XCI7XG5pbXBvcnQgeyBleGVjQXN5bmMgfSBmcm9tIFwiYWdzL3Byb2Nlc3NcIjtcbmltcG9ydCB0eXBlIHsgQWNjZXNzb3IgfSBmcm9tIFwiYWdzXCI7XG5pbXBvcnQgeyBHZGssIEd0ayB9IGZyb20gXCJhZ3MvZ3RrNFwiO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuXHRjbGFzcz86IHN0cmluZyB8IEFjY2Vzc29yPHN0cmluZz47XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEJhdHRlcnkoeyBjbGFzczogY2xhc3NOYW1lIH06IFByb3BzKSB7XG5cdGNvbnN0IGJhdHRlcnkgPSBBc3RhbEJhdHRlcnkuZ2V0X2RlZmF1bHQoKTtcblxuXHRjb25zdCBwZXJjZW50YWdlID0gY3JlYXRlQmluZGluZyhiYXR0ZXJ5LCBcInBlcmNlbnRhZ2VcIik7XG5cdGNvbnN0IGlzQ2hhcmdpbmcgPSBjcmVhdGVCaW5kaW5nKGJhdHRlcnksIFwiY2hhcmdpbmdcIik7XG5cdGNvbnN0IHRpbWVUb0Z1bGwgPSBjcmVhdGVCaW5kaW5nKGJhdHRlcnksIFwidGltZV90b19mdWxsXCIpO1xuXHRjb25zdCB0aW1lVG9FbXB0eSA9IGNyZWF0ZUJpbmRpbmcoYmF0dGVyeSwgXCJ0aW1lX3RvX2VtcHR5XCIpO1xuXHRjb25zdCBlbmVyZ3lSYXRlID0gY3JlYXRlQmluZGluZyhiYXR0ZXJ5LCBcImVuZXJneV9yYXRlXCIpO1xuXHRjb25zdCBpY29uTmFtZSA9IGNyZWF0ZUJpbmRpbmcoYmF0dGVyeSwgXCJiYXR0ZXJ5X2ljb25fbmFtZVwiKTtcblxuXHRjb25zdCBbc2hvd0FsdCwgc2V0U2hvd0FsdF0gPSBjcmVhdGVTdGF0ZTxib29sZWFuPihmYWxzZSk7XG5cblx0Y29uc3QgbGFiZWwgPSBjcmVhdGVDb21wdXRlZChcblx0XHRbc2hvd0FsdCwgcGVyY2VudGFnZSwgaXNDaGFyZ2luZywgdGltZVRvRW1wdHksIHRpbWVUb0Z1bGxdLFxuXHRcdHRyYW5zZm9ybUxhYmVsLFxuXHQpO1xuXHRjb25zdCB0b29sdGlwID0gY3JlYXRlQ29tcHV0ZWQoXG5cdFx0W3BlcmNlbnRhZ2UsIGlzQ2hhcmdpbmcsIHRpbWVUb0VtcHR5LCB0aW1lVG9GdWxsLCBlbmVyZ3lSYXRlXSxcblx0XHR0cmFuc2Zvcm1Ub29sdGlwLFxuXHQpO1xuXG5cdHBlcmNlbnRhZ2Uuc3Vic2NyaWJlKCgpID0+IHtcblx0XHRjb25zdCBwZXJjID0gTWF0aC5yb3VuZChwZXJjZW50YWdlLmdldCgpICogMTAwKTtcblx0XHRjb25zdCBjaGFyZ2luZyA9IGlzQ2hhcmdpbmcuZ2V0KCk7XG5cdFx0Y29uc3QgaWNvbiA9IGljb25OYW1lLmdldCgpO1xuXG5cdFx0Y29uc3QgYmFzZUNvbW1hbmQgPSBgbm90aWZ5LXNlbmQgLWEgJ0JhdHRlcnkgTWFuYWdlcicgLWkgJHtpY29ufWA7XG5cblx0XHRpZiAoY2hhcmdpbmcgJiYgcGVyYyA9PT0gMTAwKVxuXHRcdFx0cmV0dXJuIGV4ZWNBc3luYyhcblx0XHRcdFx0YCR7YmFzZUNvbW1hbmR9ICdDaGFyZ2UgQ29tcGxldGVkJyAnQmF0dGVyeSBpcyBhdCAxMDAlLlxcblVucGx1ZyB0aGUgY2hhcmdlci4nYCxcblx0XHRcdCk7XG5cblx0XHRpZiAoY2hhcmdpbmcpIHJldHVybjtcblxuXHRcdGlmIChwZXJjID09PSAxNSB8fCBwZXJjID09PSAxMClcblx0XHRcdHJldHVybiBleGVjQXN5bmMoXG5cdFx0XHRcdGAke2Jhc2VDb21tYW5kfSAnQmF0dGVyeSBMb3cnICdCYXR0ZXJ5IGlzIGF0ICR7cGVyY30lLlxcblBsdWcgdGhlIGNoYXJnZXIuJ2AsXG5cdFx0XHQpO1xuXHRcdGlmIChwZXJjIDw9IDUpXG5cdFx0XHRyZXR1cm4gZXhlY0FzeW5jKFxuXHRcdFx0XHRgJHtiYXNlQ29tbWFuZH0gJ0JhdHRlcnkgQ3JpdGljYWwnICdCYXR0ZXJ5IGlzIGF0ICR7cGVyY30lLlxcblBsdWcgdGhlIGNoYXJnZXIuJ2AsXG5cdFx0XHQpO1xuXHR9KTtcblxuXHRmdW5jdGlvbiB0cmFuc2Zvcm1MYWJlbChcblx0XHRzaG93QWx0OiBib29sZWFuLFxuXHRcdHBlcmNlbnRhZ2U6IG51bWJlcixcblx0XHRpc0NoYXJnaW5nOiBib29sZWFuLFxuXHRcdHRpbWVUb0VtcHR5OiBudW1iZXIsXG5cdFx0dGltZVRvRnVsbDogbnVtYmVyLFxuXHQpIHtcblx0XHRpZiAoc2hvd0FsdCkge1xuXHRcdFx0aWYgKGlzQ2hhcmdpbmcpIHtcblx0XHRcdFx0cmV0dXJuIE1hdGgucm91bmQocGVyY2VudGFnZSAqIDEwMCkgPT09IDEwMFxuXHRcdFx0XHRcdD8gYEZ1bGxgXG5cdFx0XHRcdFx0OiBgJHtmb3JtYXRTZWNvbmRzKHRpbWVUb0Z1bGwpfWA7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBgICR7Zm9ybWF0U2Vjb25kcyh0aW1lVG9FbXB0eSl9YDtcblx0XHR9XG5cblx0XHRyZXR1cm4gTWF0aC5yb3VuZChwZXJjZW50YWdlICogMTAwKSA9PT0gMTAwXG5cdFx0XHQ/IGBGdWxsYFxuXHRcdFx0OiBgJHtNYXRoLnJvdW5kKHBlcmNlbnRhZ2UgKiAxMDApfSVgO1xuXHR9XG5cblx0ZnVuY3Rpb24gdHJhbnNmb3JtVG9vbHRpcChcblx0XHRwZXJjZW50YWdlOiBudW1iZXIsXG5cdFx0aXNDaGFyZ2luZzogYm9vbGVhbixcblx0XHR0aW1lVG9FbXB0eTogbnVtYmVyLFxuXHRcdHRpbWVUb0Z1bGw6IG51bWJlcixcblx0XHRlbmVyZ3lSYXRlOiBudW1iZXIsXG5cdCkge1xuXHRcdHJldHVybiBbXG5cdFx0XHRgJHtcblx0XHRcdFx0aXNDaGFyZ2luZ1xuXHRcdFx0XHRcdD8gTWF0aC5yb3VuZChwZXJjZW50YWdlICogMTAwKSA9PT0gMTAwXG5cdFx0XHRcdFx0XHQ/IFwiRnVsbFwiXG5cdFx0XHRcdFx0XHQ6IGBUaW1lIHRvIGZ1bGw6ICR7Zm9ybWF0U2Vjb25kcyh0aW1lVG9GdWxsKX1gXG5cdFx0XHRcdFx0OiBgVGltZSB0byBlbXB0eTogJHtmb3JtYXRTZWNvbmRzKHRpbWVUb0VtcHR5KX1gXG5cdFx0XHR9YCxcblx0XHRcdGBQb3dlciBEcmFpbjogJHtlbmVyZ3lSYXRlfVdgLFxuXHRcdF0uam9pbihcIlxcblwiKTtcblx0fVxuXG5cdGZ1bmN0aW9uIGxlZnRDbGlja0hhbmRsZXIoKSB7XG5cdFx0c2V0U2hvd0FsdCgocHJldikgPT4gIXByZXYpO1xuXHR9XG5cblx0cmV0dXJuIChcblx0XHQ8Ym94XG5cdFx0XHRjbGFzcz17Y2xhc3NOYW1lfVxuXHRcdFx0Y3Vyc29yPXtHZGsuQ3Vyc29yLm5ld19mcm9tX25hbWUoXCJwb2ludGVyXCIsIG51bGwpfVxuXHRcdFx0dG9vbHRpcE1hcmt1cD17dG9vbHRpcH1cblx0XHQ+XG5cdFx0XHQ8Ym94PlxuXHRcdFx0XHQ8R3RrLkdlc3R1cmVDbGlja1xuXHRcdFx0XHRcdGJ1dHRvbj17R2RrLkJVVFRPTl9QUklNQVJZfVxuXHRcdFx0XHRcdG9uUHJlc3NlZD17bGVmdENsaWNrSGFuZGxlcn1cblx0XHRcdFx0Lz5cblxuXHRcdFx0XHQ8aW1hZ2UgaWNvbk5hbWU9e2ljb25OYW1lfSBjbGFzcz1cImJhdHRlcnktaWNvblwiIC8+XG5cblx0XHRcdFx0PGxhYmVsIGxhYmVsPXtsYWJlbH0gLz5cblx0XHRcdDwvYm94PlxuXHRcdDwvYm94PlxuXHQpO1xufVxuIiwgImltcG9ydCB7IGNyZWF0ZUJpbmRpbmcsIGNyZWF0ZUNvbXB1dGVkLCBjcmVhdGVTdGF0ZSwgdHlwZSBBY2Nlc3NvciB9IGZyb20gXCJhZ3NcIjtcbmltcG9ydCB7IGRlZmF1bHRDb25maWcgfSBmcm9tIFwiQC9jb25zdGFudHMvY29uZmlnXCI7XG5pbXBvcnQgeyBjb25maWcgfSBmcm9tIFwiQC91dGlsL2NvbmZpZ1wiO1xuaW1wb3J0IHsgR3RrIH0gZnJvbSBcImFncy9ndGs0XCI7XG5pbXBvcnQgV3AgZnJvbSBcImdpOi8vQXN0YWxXcFwiO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuXHRjbGFzcz86IHN0cmluZyB8IEFjY2Vzc29yPHN0cmluZz47XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFNwZWFrZXIoeyBjbGFzczogY2xhc3NOYW1lIH06IFByb3BzKSB7XG5cdGNvbnN0IHdwID0gV3AuZ2V0X2RlZmF1bHQoKTtcblx0Y29uc3Qgc3BlYWtlciA9IHdwPy5hdWRpby5kZWZhdWx0U3BlYWtlcjtcblxuXHRpZiAoIXdwIHx8ICFzcGVha2VyKVxuXHRcdHJldHVybiAoXG5cdFx0XHQ8Ym94IGNsYXNzPXtjbGFzc05hbWV9PlxuXHRcdFx0XHQ8bGFiZWwgbGFiZWw9XCJJbmFjY2Vzc2libGUgU3BlYWtlclwiIC8+XG5cdFx0XHQ8L2JveD5cblx0XHQpO1xuXG5cdGNvbnN0IHZvbHVtZSA9IGNyZWF0ZUJpbmRpbmcoc3BlYWtlciwgXCJ2b2x1bWVcIik7XG5cdGNvbnN0IGlzTXV0ZWQgPSBjcmVhdGVCaW5kaW5nKHNwZWFrZXIsIFwibXV0ZVwiKTtcblx0Y29uc3QgaWNvbk5hbWUgPSBjcmVhdGVCaW5kaW5nKHNwZWFrZXIsIFwidm9sdW1lX2ljb25cIik7XG5cdGNvbnN0IGRldmljZSA9IGNyZWF0ZUJpbmRpbmcoc3BlYWtlciwgXCJkZXNjcmlwdGlvblwiKTtcblxuXHRjb25zdCBbaXNCbHVldG9vdGgsIHNldElzQmx1ZXRvb3RoXSA9IGNyZWF0ZVN0YXRlKFxuXHRcdHNwZWFrZXIuZ2V0X3B3X3Byb3BlcnR5KFwiZGV2aWNlLmFwaVwiKSA9PT0gXCJibHVlejVcIixcblx0KTtcblxuXHRjb25zdCBpY29uID0gY3JlYXRlQ29tcHV0ZWQoW2ljb25OYW1lLCB2b2x1bWUsIGlzTXV0ZWRdLCB0cmFuc2Zvcm1JY29uKTtcblxuXHRkZXZpY2Uuc3Vic2NyaWJlKCgpID0+IHtcblx0XHRzZXRJc0JsdWV0b290aChzcGVha2VyLmdldF9wd19wcm9wZXJ0eShcImRldmljZS5hcGlcIikgPT09IFwiYmx1ZXo1XCIpO1xuXHR9KTtcblxuXHRmdW5jdGlvbiB0cmFuc2Zvcm1MYWJlbCh2b2x1bWU6IG51bWJlcikge1xuXHRcdHJldHVybiBgJHtNYXRoLnJvdW5kKHZvbHVtZSAqIDEwMCl9JWA7XG5cdH1cblxuXHRmdW5jdGlvbiB0cmFuc2Zvcm1Ub29sdGlwKGRldmljZTogc3RyaW5nKSB7XG5cdFx0cmV0dXJuIGBEZXZpY2U6ICR7ZGV2aWNlfWA7XG5cdH1cblxuXHRmdW5jdGlvbiB0cmFuc2Zvcm1JY29uKGljb25OYW1lOiBzdHJpbmcsIHZvbHVtZTogbnVtYmVyLCBpc011dGVkOiBib29sZWFuKSB7XG5cdFx0aWYgKHZvbHVtZSA9PT0gMCkgcmV0dXJuIFwiYXVkaW8tdm9sdW1lLW11dGVkLXN5bWJvbGljXCI7XG5cdFx0ZWxzZSBpZiAoTWF0aC5yb3VuZCh2b2x1bWUgKiAxMDApID09PSAxMDAgJiYgIWlzTXV0ZWQpXG5cdFx0XHRyZXR1cm4gXCJhdWRpby12b2x1bWUtaGlnaC1zeW1ib2xpY1wiO1xuXHRcdHJldHVybiBpY29uTmFtZTtcblx0fVxuXG5cdGZ1bmN0aW9uIGhhbmRsZVNjcm9sbChcblx0XHRfZXZlbnQ6IEd0ay5FdmVudENvbnRyb2xsZXJTY3JvbGwsXG5cdFx0X2RlbHRhWDogbnVtYmVyLFxuXHRcdGRlbHRhWTogbnVtYmVyLFxuXHQpIHtcblx0XHRpZiAoZGVsdGFZIDwgMClcblx0XHRcdHNwZWFrZXI/LnNldF92b2x1bWUoXG5cdFx0XHRcdHNwZWFrZXIudm9sdW1lICtcblx0XHRcdFx0XHQoY29uZmlnLmdldCgpLnZvbHVtZVN0ZXA/LnNwZWFrZXIgPz9cblx0XHRcdFx0XHRcdGRlZmF1bHRDb25maWcudm9sdW1lU3RlcC5zcGVha2VyKSxcblx0XHRcdCk7XG5cdFx0ZWxzZSBpZiAoZGVsdGFZID4gMClcblx0XHRcdHNwZWFrZXI/LnNldF92b2x1bWUoXG5cdFx0XHRcdHNwZWFrZXIudm9sdW1lIC1cblx0XHRcdFx0XHQoY29uZmlnLmdldCgpLnZvbHVtZVN0ZXA/LnNwZWFrZXIgPz9cblx0XHRcdFx0XHRcdGRlZmF1bHRDb25maWcudm9sdW1lU3RlcC5zcGVha2VyKSxcblx0XHRcdCk7XG5cdH1cblxuXHRyZXR1cm4gKFxuXHRcdDxib3ggY2xhc3M9e2NsYXNzTmFtZX0gdG9vbHRpcE1hcmt1cD17ZGV2aWNlKHRyYW5zZm9ybVRvb2x0aXApfT5cblx0XHRcdDxHdGsuRXZlbnRDb250cm9sbGVyU2Nyb2xsXG5cdFx0XHRcdGZsYWdzPXtHdGsuRXZlbnRDb250cm9sbGVyU2Nyb2xsRmxhZ3MuVkVSVElDQUx9XG5cdFx0XHRcdG9uU2Nyb2xsPXtoYW5kbGVTY3JvbGx9XG5cdFx0XHQvPlxuXG5cdFx0XHQ8aW1hZ2Vcblx0XHRcdFx0aWNvbk5hbWU9XCJtaS1ibHVldG9vdGgtY29ubmVjdGVkLXN5bWJvbGljXCJcblx0XHRcdFx0dmlzaWJsZT17aXNCbHVldG9vdGh9XG5cdFx0XHRcdHBpeGVsU2l6ZT17MTh9XG5cdFx0XHRcdGNsYXNzPVwic3BlYWtlci1ibHVldG9vdGgtaWNvblwiXG5cdFx0XHQvPlxuXG5cdFx0XHQ8aW1hZ2UgaWNvbk5hbWU9e2ljb259IGNsYXNzPVwic3BlYWtlci1pY29uXCIgLz5cblxuXHRcdFx0PGxhYmVsIGxhYmVsPXt2b2x1bWUodHJhbnNmb3JtTGFiZWwpfSAvPlxuXHRcdDwvYm94PlxuXHQpO1xufVxuIiwgIi8qXG5cdE1vZGlmaWVkIHZlcnNpb24gb2Y6XG5cdGh0dHBzOi8vZ2l0aHViLmNvbS9NYWJpMTkvZGVza3RvcC1zaGVsbC9ibG9iL2Q3MDE4OWIyMzU1YTQxNzNhOGVhNmQ1Njk5ZjM0MGZlNzM0OTc5NDUvdXRpbHMvc3lzdGVtLXN0YXRzLnRzXG4qL1xuXG5pbXBvcnQgeyBkZWZhdWx0Q29uZmlnIH0gZnJvbSBcIkAvY29uc3RhbnRzL2NvbmZpZ1wiO1xuaW1wb3J0IHsgcmVhZEZpbGVBc3luYyB9IGZyb20gXCJhZ3MvZmlsZVwiO1xuaW1wb3J0IE5ldHdvcmsgZnJvbSBcImdpOi8vQXN0YWxOZXR3b3JrXCI7XG5pbXBvcnQgeyBjb25maWcgfSBmcm9tIFwiQC91dGlsL2NvbmZpZ1wiO1xuaW1wb3J0IHsgaW50ZXJ2YWwgfSBmcm9tIFwiYWdzL3RpbWVcIjtcbmltcG9ydCB7IGV4ZWMgfSBmcm9tIFwiYWdzL3Byb2Nlc3NcIjtcbmltcG9ydCB7IGNyZWF0ZVN0YXRlIH0gZnJvbSBcImFnc1wiO1xuaW1wb3J0IHR5cGUge1xuXHROZXR3b3JrU3RhdCxcblx0TWVtb3J5U3RhdCxcblx0Q29yZUluZm8sXG5cdERpc2tTdGF0LFxuXHRDUFVJbmZvLFxufSBmcm9tIFwiQC90eXBlcy9zeXN0ZW1TdGF0c1wiO1xuXG5leHBvcnQgY29uc3QgW2NwdVVzYWdlLCBzZXRDcHVVc2FnZV0gPSBjcmVhdGVTdGF0ZTxDUFVJbmZvPih7XG5cdHRvdGFsOiB7XG5cdFx0aWRsZTogMCxcblx0XHR0b3RhbDogMCxcblx0XHRwZXJjZW50YWdlOiAwLFxuXHR9LFxufSk7XG5cbmV4cG9ydCBjb25zdCBbbWVtb3J5VXNhZ2UsIHNldE1lbW9yeVVzYWdlXSA9IGNyZWF0ZVN0YXRlPE1lbW9yeVN0YXQ+KHtcblx0bWVtb3J5OiB7XG5cdFx0YXZhaWxhYmxlOiBcIjBCXCIsXG5cdFx0dG90YWw6IFwiMEJcIixcblx0XHRmcmVlOiBcIjBCXCIsXG5cdFx0dXNlZDogXCIwQlwiLFxuXHRcdHVzYWdlOiAwLFxuXHR9LFxuXHRzd2FwOiB7XG5cdFx0dG90YWw6IFwiMEJcIixcblx0XHRmcmVlOiBcIjBCXCIsXG5cdFx0dXNlZDogXCIwQlwiLFxuXHRcdHVzYWdlOiAwLFxuXHR9LFxufSk7XG5cbmV4cG9ydCBjb25zdCBbbmV0d29ya1VzYWdlLCBzZXROZXR3b3JrVXNhZ2VdID0gY3JlYXRlU3RhdGU8TmV0d29ya1N0YXQ+KHtcblx0cng6IDAsXG5cdHR4OiAwLFxuXHRpbnRlcmZhY2U6IFwiVW5rbm93blwiLFxuXHRpc1dpZmk6IGZhbHNlLFxuXHRpc1dpcmVkOiBmYWxzZSxcblx0aWNvbjogXCJuZXR3b3JrLW9mZmxpbmUtc3ltYm9saWNcIixcbn0pO1xuXG5leHBvcnQgY29uc3QgW2Rpc2tVc2FnZSwgc2V0RGlza1VzYWdlXSA9IGNyZWF0ZVN0YXRlPERpc2tTdGF0Pih7XG5cdGRldmljZTogXCJVbmtvbnduXCIsXG5cdHRvdGFsU2l6ZTogXCIwQlwiLFxuXHR1c2VkU2l6ZTogXCIwQlwiLFxuXHRhdmFpbGFibGVTaXplOiBcIjBCXCIsXG5cdHVzYWdlUGVyY2VudDogXCIwQlwiLFxuXHRwYXRoOiBcIjBCXCIsXG59KTtcblxuY29uc3QgbGFzdENwdUluZm86IENQVUluZm8gPSB7fTtcblxuZnVuY3Rpb24gZ2V0Q29yZUluZm8oY29yZTogc3RyaW5nLCBjb3JlRGF0YTogbnVtYmVyW10pOiBDb3JlSW5mbyB8IG51bGwge1xuXHRjb25zdCBpZGxlID0gY29yZURhdGFbM10gKyBjb3JlRGF0YVs0XTtcblx0Y29uc3QgdG90YWwgPSBjb3JlRGF0YS5yZWR1Y2UoKHN1YnRvdGFsLCBjdXJyKSA9PiBzdWJ0b3RhbCArIGN1cnIsIDApO1xuXG5cdGNvbnN0IHByZXZDb3JlRGF0YTogQ29yZUluZm8gfCB1bmRlZmluZWQgPSBsYXN0Q3B1SW5mb1tjb3JlXTtcblxuXHRpZiAocHJldkNvcmVEYXRhKSB7XG5cdFx0Y29uc3QgZGVsdGFJZGxlID0gaWRsZSAtIHByZXZDb3JlRGF0YS5pZGxlO1xuXHRcdGNvbnN0IGRlbHRhVG90YWwgPSB0b3RhbCAtIHByZXZDb3JlRGF0YS50b3RhbDtcblxuXHRcdHJldHVybiB7XG5cdFx0XHRpZGxlOiBkZWx0YUlkbGUsXG5cdFx0XHR0b3RhbDogZGVsdGFUb3RhbCxcblx0XHRcdHBlcmNlbnRhZ2U6IDEwMCAqICgxIC0gZGVsdGFJZGxlIC8gZGVsdGFUb3RhbCksXG5cdFx0fTtcblx0fVxuXG5cdGxhc3RDcHVJbmZvW2NvcmVdID0ge1xuXHRcdGlkbGUsXG5cdFx0dG90YWwsXG5cdFx0cGVyY2VudGFnZTogMCxcblx0fTtcblxuXHRyZXR1cm4gbnVsbDtcbn1cblxuYXN5bmMgZnVuY3Rpb24gcmVjYWxjdWxhdGVDcHVVc2FnZSgpIHtcblx0Y29uc3Qgc3RhdEZpbGUgPSBhd2FpdCByZWFkRmlsZUFzeW5jKFwiL3Byb2Mvc3RhdFwiKTtcblxuXHRjb25zb2xlLmFzc2VydChzdGF0RmlsZS5zdGFydHNXaXRoKFwiY3B1IFwiKSwgXCJjb3VsZG4ndCBwYXJzZSAvcHJvYy9zdGF0XCIpO1xuXG5cdGNvbnN0IGNwdVN0YXRzID0gc3RhdEZpbGVcblx0XHQuc3BsaXQoXCJcXG5cIilcblx0XHQuZmlsdGVyKChwYXJ0KSA9PiBwYXJ0LnN0YXJ0c1dpdGgoXCJjcHVcIikpO1xuXG5cdGNvbnN0IGNwdVN0YXRzRGF0YTogQ1BVSW5mbyA9IHt9O1xuXG5cdGZvciAoY29uc3QgY3B1U3RhdCBvZiBjcHVTdGF0cykge1xuXHRcdGNvbnN0IGNwdURhdGEgPSBjcHVTdGF0LnNwbGl0KFwiIFwiKTtcblxuXHRcdGNvbnN0IGNvcmVOdW1iZXIgPSBjcHVEYXRhLnNoaWZ0KCk/LnJlcGxhY2UoXCJjcHVcIiwgXCJcIikgfHwgXCJ0b3RhbFwiO1xuXHRcdGNvbnN0IGNvcmVWYWx1ZXMgPSBjcHVEYXRhXG5cdFx0XHQuZmlsdGVyKEJvb2xlYW4pXG5cdFx0XHQubWFwKCh2YWx1ZSkgPT4gcGFyc2VJbnQodmFsdWUpKTtcblxuXHRcdGNvbnN0IGNvcmVEYXRhID0gZ2V0Q29yZUluZm8oY29yZU51bWJlciwgY29yZVZhbHVlcyk7XG5cblx0XHRpZiAoY29yZURhdGEpIGNwdVN0YXRzRGF0YVtjb3JlTnVtYmVyXSA9IGNvcmVEYXRhO1xuXHR9XG5cblx0aWYgKE9iamVjdC5rZXlzKGNwdVN0YXRzRGF0YSkubGVuZ3RoID4gMCkgc2V0Q3B1VXNhZ2UoY3B1U3RhdHNEYXRhKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gcmVjYWxjdWxhdGVNZW1vcnlVc2FnZSgpIHtcblx0Y29uc3QgbWVtb3J5SW5mbyA9IGV4ZWMoXCJmcmVlIC1oXCIpO1xuXG5cdGNvbnN0IFtcblx0XHQsXG5cdFx0dG90YWxSYW0sXG5cdFx0dXNlZFJhbSxcblx0XHRmcmVlUmFtLFxuXHRcdF9zaGFyZWRSYW0sXG5cdFx0X2J1ZmZlckNhY2hlUmFtLFxuXHRcdGF2YWlsYWJsZVJhbSxcblx0XSA9IG1lbW9yeUluZm8uc3BsaXQoXCJcXG5cIilbMV0uc3BsaXQoL1xccysvKTtcblx0Y29uc3QgWywgdG90YWxTd2FwLCB1c2VkU3dhcCwgZnJlZVN3YXBdID0gbWVtb3J5SW5mb1xuXHRcdC5zcGxpdChcIlxcblwiKVsyXVxuXHRcdC5zcGxpdCgvXFxzKy8pO1xuXG5cdHNldE1lbW9yeVVzYWdlKHtcblx0XHRtZW1vcnk6IHtcblx0XHRcdGF2YWlsYWJsZTogYXZhaWxhYmxlUmFtLnJlcGxhY2UoXCIsXCIsIFwiLlwiKSxcblx0XHRcdHRvdGFsOiB0b3RhbFJhbS5yZXBsYWNlKFwiLFwiLCBcIi5cIiksXG5cdFx0XHRmcmVlOiBmcmVlUmFtLnJlcGxhY2UoXCIsXCIsIFwiLlwiKSxcblx0XHRcdHVzZWQ6IHVzZWRSYW0ucmVwbGFjZShcIixcIiwgXCIuXCIpLFxuXHRcdFx0dXNhZ2U6XG5cdFx0XHRcdChwYXJzZUZsb2F0KHVzZWRSYW0ucmVwbGFjZShcIixcIiwgXCIuXCIpKSAvXG5cdFx0XHRcdFx0cGFyc2VGbG9hdCh0b3RhbFJhbS5yZXBsYWNlKFwiLFwiLCBcIi5cIikpKSAqXG5cdFx0XHRcdDEwMCxcblx0XHR9LFxuXHRcdHN3YXA6IHtcblx0XHRcdHRvdGFsOiB0b3RhbFN3YXAucmVwbGFjZShcIixcIiwgXCIuXCIpLFxuXHRcdFx0dXNlZDogdXNlZFN3YXAucmVwbGFjZShcIixcIiwgXCIuXCIpLFxuXHRcdFx0ZnJlZTogZnJlZVN3YXAucmVwbGFjZShcIixcIiwgXCIuXCIpLFxuXHRcdFx0dXNhZ2U6XG5cdFx0XHRcdChwYXJzZUZsb2F0KHVzZWRTd2FwLnJlcGxhY2UoXCIsXCIsIFwiLlwiKSkgL1xuXHRcdFx0XHRcdHBhcnNlRmxvYXQodG90YWxTd2FwLnJlcGxhY2UoXCIsXCIsIFwiLlwiKSkpICpcblx0XHRcdFx0MTAwLFxuXHRcdH0sXG5cdH0pO1xufVxuXG5sZXQgbGFzdE5ldHdvcmtJbmZvOiBOZXR3b3JrU3RhdCB8IG51bGwgPSBudWxsO1xubGV0IGxhc3RJbnRlcmZhY2U6IHN0cmluZyB8IG51bGwgPSBudWxsO1xuXG5mdW5jdGlvbiBnZXRNYWluTmV0d29ya0ludGVyZmFjZSgpOiBzdHJpbmcgfCB1bmRlZmluZWQge1xuXHRjb25zdCBpZmNvbmZpZyA9IGV4ZWMoXCJpZmNvbmZpZ1wiKTtcblx0Y29uc3QgYmxvY2tzID0gaWZjb25maWcuc3BsaXQoL1xcblxccypcXG4vKTtcblxuXHRmb3IgKGNvbnN0IGJsb2NrIG9mIGJsb2Nrcykge1xuXHRcdGNvbnN0IGxpbmVzID0gYmxvY2tcblx0XHRcdC5zcGxpdChcIlxcblwiKVxuXHRcdFx0Lm1hcCgobGluZSkgPT4gbGluZS50cmltKCkpXG5cdFx0XHQuZmlsdGVyKEJvb2xlYW4pO1xuXG5cdFx0aWYgKGxpbmVzLmxlbmd0aCA9PT0gMCkgY29udGludWU7XG5cblx0XHRjb25zdCBoZWFkZXIgPSBsaW5lc1swXTtcblx0XHRjb25zdCBuYW1lID0gaGVhZGVyLnNwbGl0KC9cXHMrLylbMF07XG5cblx0XHRpZiAobmFtZSA9PT0gXCJsb1wiKSBjb250aW51ZTsgLy8gc2tpcCBsb29wYmFja1xuXG5cdFx0Y29uc3QgaGFzSW5ldCA9IGxpbmVzLnNvbWUoKGxpbmUpID0+IC9pbmV0IGFkZHI6Ly50ZXN0KGxpbmUpKTtcblxuXHRcdGlmIChoYXNJbmV0KSByZXR1cm4gbmFtZTtcblx0fVxuXG5cdHJldHVybiB1bmRlZmluZWQ7XG59XG5cbmNvbnN0IG5ldHdvcmsgPSBOZXR3b3JrLmdldF9kZWZhdWx0KCk7XG5cbm5ldHdvcmsuY29ubmVjdChcIm5vdGlmeTo6cHJpbWFyeVwiLCAoc291cmNlKSA9PiB7XG5cdHNldE5ldHdvcmtVc2FnZSgocHJldikgPT4ge1xuXHRcdGxldCBpY29uID0gcHJldi5pY29uO1xuXG5cdFx0aWYgKHNvdXJjZS5wcmltYXJ5ID09PSBOZXR3b3JrLlByaW1hcnkuV0lGSSkge1xuXHRcdFx0aWNvbiA9IG5ldHdvcmsud2lmaS5pY29uTmFtZTtcblx0XHR9IGVsc2UgaWYgKHNvdXJjZS5wcmltYXJ5ID09PSBOZXR3b3JrLlByaW1hcnkuV0lSRUQpIHtcblx0XHRcdGljb24gPSBuZXR3b3JrLndpcmVkLmljb25OYW1lO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRpY29uID0gXCJuZXR3b3JrLW9mZmxpbmUtc3ltYm9saWNcIjtcblx0XHR9XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0Li4ucHJldixcblx0XHRcdGlzV2lmaTogc291cmNlLnByaW1hcnkgPT09IE5ldHdvcmsuUHJpbWFyeS5XSUZJLFxuXHRcdFx0aXNXaXJlZDogc291cmNlLnByaW1hcnkgPT09IE5ldHdvcmsuUHJpbWFyeS5XSVJFRCxcblx0XHRcdHNzaWQ6IHNvdXJjZS53aWZpPy5zc2lkLFxuXHRcdFx0ZnJlcXVlbmN5OiBzb3VyY2Uud2lmaT8uZnJlcXVlbmN5LFxuXHRcdFx0c3RyZW5ndGg6IHNvdXJjZS53aWZpPy5zdHJlbmd0aCxcblx0XHRcdGljb24sXG5cdFx0fTtcblx0fSk7XG59KTtcblxuYXN5bmMgZnVuY3Rpb24gcmVjYWxjdWxhdGVOZXR3b3JrVXNhZ2UoKSB7XG5cdGNvbnN0IG5ldEZpbGUgPSBhd2FpdCByZWFkRmlsZUFzeW5jKFwiL3Byb2MvbmV0L2RldlwiKTtcblx0Y29uc3QgbWFpbkludGVyZmFjZSA9IGdldE1haW5OZXR3b3JrSW50ZXJmYWNlKCk7XG5cblx0aWYgKCFtYWluSW50ZXJmYWNlKSByZXR1cm47XG5cblx0Y29uc3QgbGluZXMgPSBuZXRGaWxlLnNwbGl0KFwiXFxuXCIpLnNsaWNlKDIpO1xuXHRmb3IgKGNvbnN0IGxpbmUgb2YgbGluZXMpIHtcblx0XHRpZiAoIWxpbmUudHJpbSgpKSBjb250aW51ZTtcblxuXHRcdGNvbnN0IFtpZmFjZSwgLi4uZmllbGRzXSA9IGxpbmUudHJpbSgpLnNwbGl0KC86fFxccysvKS5maWx0ZXIoQm9vbGVhbik7XG5cblx0XHRpZiAoaWZhY2UgPT09IG1haW5JbnRlcmZhY2UpIHtcblx0XHRcdGNvbnN0IHJ4ID0gcGFyc2VJbnQoZmllbGRzWzBdLCAxMCk7XG5cdFx0XHRjb25zdCB0eCA9IHBhcnNlSW50KGZpZWxkc1s4XSwgMTApO1xuXG5cdFx0XHRsZXQgaWNvbiA9IFwibmV0d29yay1vZmZsaW5lLXN5bWJvbGljXCI7XG5cblx0XHRcdGlmIChuZXR3b3JrLnByaW1hcnkgPT09IE5ldHdvcmsuUHJpbWFyeS5XSUZJKSB7XG5cdFx0XHRcdGljb24gPSBuZXR3b3JrLndpZmkuaWNvbk5hbWU7XG5cdFx0XHR9IGVsc2UgaWYgKG5ldHdvcmsucHJpbWFyeSA9PT0gTmV0d29yay5QcmltYXJ5LldJUkVEKSB7XG5cdFx0XHRcdGljb24gPSBuZXR3b3JrLndpcmVkLmljb25OYW1lO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aWNvbiA9IFwibmV0d29yay1vZmZsaW5lLXN5bWJvbGljXCI7XG5cdFx0XHR9XG5cblx0XHRcdGNvbnN0IG5ldHdvcmtJbmZvOiBOZXR3b3JrU3RhdCA9IHtcblx0XHRcdFx0cngsXG5cdFx0XHRcdHR4LFxuXHRcdFx0XHRpbnRlcmZhY2U6IG1haW5JbnRlcmZhY2UsXG5cdFx0XHRcdGlzV2lmaTogbmV0d29yay5wcmltYXJ5ID09PSBOZXR3b3JrLlByaW1hcnkuV0lGSSxcblx0XHRcdFx0aXNXaXJlZDogbmV0d29yay5wcmltYXJ5ID09PSBOZXR3b3JrLlByaW1hcnkuV0lSRUQsXG5cdFx0XHRcdHNzaWQ6IG5ldHdvcmsud2lmaT8uc3NpZCxcblx0XHRcdFx0ZnJlcXVlbmN5OiBuZXR3b3JrLndpZmk/LmZyZXF1ZW5jeSxcblx0XHRcdFx0c3RyZW5ndGg6IG5ldHdvcmsud2lmaT8uc3RyZW5ndGgsXG5cdFx0XHRcdGljb24sXG5cdFx0XHR9O1xuXG5cdFx0XHRpZiAobGFzdE5ldHdvcmtJbmZvICYmIG1haW5JbnRlcmZhY2UgPT09IGxhc3RJbnRlcmZhY2UpIHtcblx0XHRcdFx0Y29uc3QgbmV3TmV0U3RhdHM6IE5ldHdvcmtTdGF0ID0ge1xuXHRcdFx0XHRcdHJ4OiBuZXR3b3JrSW5mby5yeCAtIGxhc3ROZXR3b3JrSW5mby5yeCxcblx0XHRcdFx0XHR0eDogbmV0d29ya0luZm8udHggLSBsYXN0TmV0d29ya0luZm8udHgsXG5cdFx0XHRcdFx0aW50ZXJmYWNlOiBtYWluSW50ZXJmYWNlLFxuXHRcdFx0XHRcdGlzV2lmaTogbmV0d29yay5wcmltYXJ5ID09PSBOZXR3b3JrLlByaW1hcnkuV0lGSSxcblx0XHRcdFx0XHRpc1dpcmVkOiBuZXR3b3JrLnByaW1hcnkgPT09IE5ldHdvcmsuUHJpbWFyeS5XSVJFRCxcblx0XHRcdFx0XHRzc2lkOiBuZXR3b3JrLndpZmk/LnNzaWQsXG5cdFx0XHRcdFx0ZnJlcXVlbmN5OiBuZXR3b3JrLndpZmk/LmZyZXF1ZW5jeSxcblx0XHRcdFx0XHRzdHJlbmd0aDogbmV0d29yay53aWZpPy5zdHJlbmd0aCxcblx0XHRcdFx0XHRpY29uLFxuXHRcdFx0XHR9O1xuXG5cdFx0XHRcdHNldE5ldHdvcmtVc2FnZShuZXdOZXRTdGF0cyk7XG5cdFx0XHR9XG5cblx0XHRcdGxhc3ROZXR3b3JrSW5mbyA9IG5ldHdvcmtJbmZvO1xuXHRcdFx0bGFzdEludGVyZmFjZSA9IG1haW5JbnRlcmZhY2UgPz8gbnVsbDtcblxuXHRcdFx0YnJlYWs7XG5cdFx0fVxuXHR9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXROZXR3b3JrVGhyb3VnaHB1dCh2YWx1ZTogbnVtYmVyLCB1bml0SW5kZXggPSAwKSB7XG5cdC8vIEkgZG9uJ3QgdGhpbmsgYW55b25lIGhhcyBleGFiaXQgaW50ZXJuZXQgeWV0XG5cdGNvbnN0IFVOSVRTID0gW1wiQlwiLCBcImtCXCIsIFwiTUJcIiwgXCJHQlwiLCBcIlRCXCJdO1xuXG5cdC8vIG5ldmVyIHNob3cgaW4gYnl0ZXMsIHNpbmNlIGl0J3Mgb25lIGxldHRlclxuXG5cdHVuaXRJbmRleCArPSAxO1xuXHR2YWx1ZSAvPSAxMDAwO1xuXG5cdGlmICh2YWx1ZSA8IDEwKSB7XG5cdFx0cmV0dXJuIGAke3ZhbHVlLnRvRml4ZWQoMil9ICR7VU5JVFNbdW5pdEluZGV4XX0vc2A7XG5cdH1cblxuXHRpZiAodmFsdWUgPCAxMDApIHtcblx0XHRyZXR1cm4gYCR7dmFsdWUudG9GaXhlZCgxKX0gJHtVTklUU1t1bml0SW5kZXhdfS9zYDtcblx0fVxuXG5cdGlmICh2YWx1ZSA8IDEwMDApIHtcblx0XHRyZXR1cm4gYCR7KHZhbHVlIC8gMTAwMCkudG9GaXhlZCgyKX0gJHtVTklUU1t1bml0SW5kZXggKyAxXX0vc2A7XG5cdH1cblxuXHQvLyBkbyBub3QgaW5jcmVhc2UgaGVyZSBzaW5jZSBpdCdzIGRvbmUgYXQgdGhlIHN0YXJ0IG9mIHRoZSBmdW5jdGlvblxuXHRyZXR1cm4gZm9ybWF0TmV0d29ya1Rocm91Z2hwdXQodmFsdWUsIHVuaXRJbmRleCk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHJlY2FsY3VsYXRlRGlza1VzYWdlKCkge1xuXHRjb25zdCByYXdEaXNrRGF0YSA9IGV4ZWMoXCJkZiAtaCAvXCIpO1xuXG5cdGNvbnN0IFtkZXZpY2UsIHRvdGFsU2l6ZSwgdXNlZFNpemUsIGF2YWlsYWJsZVNpemUsIHVzYWdlUGVyY2VudCwgcGF0aF0gPVxuXHRcdHJhd0Rpc2tEYXRhLnNwbGl0KFwiXFxuXCIpWzFdLnNwbGl0KC9cXHMrL2cpO1xuXG5cdHNldERpc2tVc2FnZSh7XG5cdFx0ZGV2aWNlLFxuXHRcdHRvdGFsU2l6ZSxcblx0XHR1c2VkU2l6ZSxcblx0XHRhdmFpbGFibGVTaXplLFxuXHRcdHVzYWdlUGVyY2VudCxcblx0XHRwYXRoLFxuXHR9KTtcbn1cblxuZnVuY3Rpb24gaGFuZGxlSW50ZXJ2YWwoKSB7XG5cdHJlY2FsY3VsYXRlQ3B1VXNhZ2UoKTtcblx0cmVjYWxjdWxhdGVEaXNrVXNhZ2UoKTtcblx0cmVjYWxjdWxhdGVNZW1vcnlVc2FnZSgpO1xuXHRyZWNhbGN1bGF0ZU5ldHdvcmtVc2FnZSgpO1xufVxuXG5sZXQgY3VycmVudEludGVydmFsID1cblx0Y29uZmlnLmdldCgpPy5zeXN0ZW1TdGF0c1VwZGF0ZUludGVydmFsIHx8XG5cdGRlZmF1bHRDb25maWcuc3lzdGVtU3RhdHNVcGRhdGVJbnRlcnZhbDtcbmxldCBzeXN0ZW1TdGF0c0ludGVydmFsID0gaW50ZXJ2YWwoY3VycmVudEludGVydmFsLCBoYW5kbGVJbnRlcnZhbCk7XG5cbmNvbmZpZy5zdWJzY3JpYmUoKCkgPT4ge1xuXHRjb25zdCBuZXdDb25maWcgPSBjb25maWcuZ2V0KCk7XG5cblx0aWYgKG5ld0NvbmZpZy5zeXN0ZW1TdGF0c1VwZGF0ZUludGVydmFsICE9PSBjdXJyZW50SW50ZXJ2YWwpIHtcblx0XHRzeXN0ZW1TdGF0c0ludGVydmFsLmNhbmNlbCgpO1xuXG5cdFx0Y3VycmVudEludGVydmFsID1cblx0XHRcdG5ld0NvbmZpZz8uc3lzdGVtU3RhdHNVcGRhdGVJbnRlcnZhbCB8fFxuXHRcdFx0ZGVmYXVsdENvbmZpZy5zeXN0ZW1TdGF0c1VwZGF0ZUludGVydmFsO1xuXHRcdHN5c3RlbVN0YXRzSW50ZXJ2YWwgPSBpbnRlcnZhbChjdXJyZW50SW50ZXJ2YWwsIGhhbmRsZUludGVydmFsKTtcblx0fVxufSk7XG4iLCAiaW1wb3J0IEFzdGFsSU8gZnJvbSBcImdpOi8vQXN0YWxJT1wiXG5pbXBvcnQgeyBBY2Nlc3NvciB9IGZyb20gXCIuLi9nbmltL3NyYy9qc3gvaW5kZXguanNcIlxuaW1wb3J0IHsgZXhlY0FzeW5jIH0gZnJvbSBcIi4vcHJvY2Vzcy5qc1wiXG5cbmV4cG9ydCB0eXBlIFRpbWUgPSBBc3RhbElPLlRpbWVcbmV4cG9ydCBjb25zdCBUaW1lID0gQXN0YWxJTy5UaW1lXG5cbmV4cG9ydCBmdW5jdGlvbiBpbnRlcnZhbChpbnRlcnZhbDogbnVtYmVyLCBjYWxsYmFjaz86ICgpID0+IHZvaWQpIHtcbiAgICByZXR1cm4gQXN0YWxJTy5UaW1lLmludGVydmFsKGludGVydmFsLCAoKSA9PiB2b2lkIGNhbGxiYWNrPy4oKSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRpbWVvdXQodGltZW91dDogbnVtYmVyLCBjYWxsYmFjaz86ICgpID0+IHZvaWQpIHtcbiAgICByZXR1cm4gQXN0YWxJTy5UaW1lLnRpbWVvdXQodGltZW91dCwgKCkgPT4gdm9pZCBjYWxsYmFjaz8uKCkpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpZGxlKGNhbGxiYWNrPzogKCkgPT4gdm9pZCkge1xuICAgIHJldHVybiBBc3RhbElPLlRpbWUuaWRsZSgoKSA9PiB2b2lkIGNhbGxiYWNrPy4oKSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVBvbGwoXG4gICAgaW5pdDogc3RyaW5nLFxuICAgIGludGVydmFsOiBudW1iZXIsXG4gICAgZXhlYzogc3RyaW5nIHwgc3RyaW5nW10sXG4pOiBBY2Nlc3NvcjxzdHJpbmc+XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVQb2xsPFQ+KFxuICAgIGluaXQ6IFQsXG4gICAgaW50ZXJ2YWw6IG51bWJlcixcbiAgICBleGVjOiBzdHJpbmcgfCBzdHJpbmdbXSxcbiAgICB0cmFuc2Zvcm06IChzdGRvdXQ6IHN0cmluZywgcHJldjogVCkgPT4gVCxcbik6IEFjY2Vzc29yPFQ+XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVQb2xsPFQ+KFxuICAgIGluaXQ6IFQsXG4gICAgaW50ZXJ2YWw6IG51bWJlcixcbiAgICBmbjogKHByZXY6IFQpID0+IFQgfCBQcm9taXNlPFQ+LFxuKTogQWNjZXNzb3I8VD5cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVBvbGw8VD4oXG4gICAgaW5pdDogVCxcbiAgICBpdmFsOiBudW1iZXIsXG4gICAgZXhlY09yRm46IHN0cmluZyB8IHN0cmluZ1tdIHwgKChwcmV2OiBUKSA9PiBUIHwgUHJvbWlzZTxUPiksXG4gICAgdHJhbnNmb3JtPzogKHN0ZG91dDogc3RyaW5nLCBwcmV2OiBUKSA9PiBULFxuKTogQWNjZXNzb3I8VD4ge1xuICAgIGxldCBjdXJyZW50VmFsdWUgPSBpbml0XG4gICAgbGV0IHRpbWVyOiBBc3RhbElPLlRpbWUgfCBudWxsID0gbnVsbFxuICAgIGNvbnN0IHN1YnNjcmliZXJzID0gbmV3IFNldDwoKSA9PiB2b2lkPigpXG5cbiAgICBmdW5jdGlvbiBzdWJzY3JpYmUoY2FsbGJhY2s6ICgpID0+IHZvaWQpOiAoKSA9PiB2b2lkIHtcbiAgICAgICAgZnVuY3Rpb24gc2V0KHZhbHVlOiBUKSB7XG4gICAgICAgICAgICBpZiAodmFsdWUgIT09IGN1cnJlbnRWYWx1ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRWYWx1ZSA9IHZhbHVlXG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlcnMuZm9yRWFjaCgoY2IpID0+IGNiKCkpXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3Vic2NyaWJlcnMuc2l6ZSA9PT0gMCkge1xuICAgICAgICAgICAgdGltZXIgPSBpbnRlcnZhbChpdmFsLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBleGVjT3JGbiA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gZXhlY09yRm4oY3VycmVudFZhbHVlKVxuICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBQcm9taXNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZS50aGVuKHNldClcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldCh2YWx1ZSlcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGV4ZWNBc3luYyhleGVjT3JGbikudGhlbigoc3Rkb3V0KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXQodHJhbnNmb3JtID8gdHJhbnNmb3JtKHN0ZG91dCwgY3VycmVudFZhbHVlKSA6IChzdGRvdXQgYXMgVCkpXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuXG4gICAgICAgIHN1YnNjcmliZXJzLmFkZChjYWxsYmFjaylcblxuICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgc3Vic2NyaWJlcnMuZGVsZXRlKGNhbGxiYWNrKVxuICAgICAgICAgICAgaWYgKHN1YnNjcmliZXJzLnNpemUgPT09IDApIHtcbiAgICAgICAgICAgICAgICB0aW1lcj8uY2FuY2VsKClcbiAgICAgICAgICAgICAgICB0aW1lciA9IG51bGxcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBuZXcgQWNjZXNzb3IoKCkgPT4gY3VycmVudFZhbHVlLCBzdWJzY3JpYmUpXG59XG4iLCAiaW1wb3J0IHsgZm9ybWF0TmV0d29ya1Rocm91Z2hwdXQsIG5ldHdvcmtVc2FnZSB9IGZyb20gXCJAL3V0aWwvc3lzdGVtU3RhdHNcIjtcbmltcG9ydCB0eXBlIHsgTmV0d29ya1N0YXQgfSBmcm9tIFwiQC90eXBlcy9zeXN0ZW1TdGF0c1wiO1xuaW1wb3J0IHR5cGUgeyBBY2Nlc3NvciB9IGZyb20gXCJhZ3NcIjtcblxuaW50ZXJmYWNlIFByb3BzIHtcblx0Y2xhc3M/OiBzdHJpbmcgfCBBY2Nlc3NvcjxzdHJpbmc+O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBOZXR3b3JrKHsgY2xhc3M6IGNsYXNzTmFtZSB9OiBQcm9wcykge1xuXHRmdW5jdGlvbiB0cmFuc2Zvcm1MYWJlbChzdGF0OiBOZXR3b3JrU3RhdCkge1xuXHRcdGlmIChzdGF0LmlzV2lmaSkge1xuXHRcdFx0cmV0dXJuIGAke3N0YXQuc3RyZW5ndGh9JWA7XG5cdFx0fVxuXG5cdFx0aWYgKHN0YXQuaXNXaXJlZCkge1xuXHRcdFx0cmV0dXJuIFwiV2lyZWRcIjtcblx0XHR9XG5cblx0XHRyZXR1cm4gXCJcIjtcblx0fVxuXG5cdGZ1bmN0aW9uIHRyYW5zZm9ybVRvb2x0aXAoc3RhdDogTmV0d29ya1N0YXQpIHtcblx0XHRpZiAoc3RhdC5pc1dpZmkpIHtcblx0XHRcdHJldHVybiBbXG5cdFx0XHRcdGBVcDogJHtmb3JtYXROZXR3b3JrVGhyb3VnaHB1dChzdGF0LnR4KX1gLFxuXHRcdFx0XHRgRG93bjogJHtmb3JtYXROZXR3b3JrVGhyb3VnaHB1dChzdGF0LnJ4KX1gLFxuXHRcdFx0XHRgU1NJRDogJHtzdGF0LnNzaWR9YCxcblx0XHRcdFx0YEZyZXF1ZW5jeTogJHtzdGF0LmZyZXF1ZW5jeX0gR0h6YCxcblx0XHRcdFx0YEludGVyZmFjZTogJHtzdGF0LmludGVyZmFjZX1gLFxuXHRcdFx0XS5qb2luKFwiXFxuXCIpO1xuXHRcdH1cblxuXHRcdGlmIChzdGF0LmlzV2lyZWQpIHtcblx0XHRcdHJldHVybiBbXG5cdFx0XHRcdGBVcDogJHtmb3JtYXROZXR3b3JrVGhyb3VnaHB1dChzdGF0LnR4KX1gLFxuXHRcdFx0XHRgRG93bjogJHtmb3JtYXROZXR3b3JrVGhyb3VnaHB1dChzdGF0LnJ4KX1gLFxuXHRcdFx0XHRgSW50ZXJmYWNlOiAke3N0YXQuaW50ZXJmYWNlfWAsXG5cdFx0XHRdLmpvaW4oXCJcXG5cIik7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIFwiXCI7XG5cdH1cblxuXHRmdW5jdGlvbiB0cmFuc2Zvcm1JY29uKHN0YXQ6IE5ldHdvcmtTdGF0KSB7XG5cdFx0cmV0dXJuIHN0YXQuaWNvbjtcblx0fVxuXG5cdHJldHVybiAoXG5cdFx0PGJveCBjbGFzcz17Y2xhc3NOYW1lfSB0b29sdGlwTWFya3VwPXtuZXR3b3JrVXNhZ2UodHJhbnNmb3JtVG9vbHRpcCl9PlxuXHRcdFx0PGltYWdlXG5cdFx0XHRcdGljb25OYW1lPXtuZXR3b3JrVXNhZ2UodHJhbnNmb3JtSWNvbil9XG5cdFx0XHRcdGNsYXNzPVwibmV0d29yay1pY29uXCJcblx0XHRcdC8+XG5cblx0XHRcdDxsYWJlbCBsYWJlbD17bmV0d29ya1VzYWdlKHRyYW5zZm9ybUxhYmVsKX0gLz5cblx0XHQ8L2JveD5cblx0KTtcbn1cbiIsICJpbXBvcnQgdHlwZSB7IE1lbW9yeVN0YXQgfSBmcm9tIFwiQC90eXBlcy9zeXN0ZW1TdGF0c1wiO1xuaW1wb3J0IHsgbWVtb3J5VXNhZ2UgfSBmcm9tIFwiQC91dGlsL3N5c3RlbVN0YXRzXCI7XG5pbXBvcnQgdHlwZSB7IEFjY2Vzc29yIH0gZnJvbSBcImFnc1wiO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuXHRjbGFzcz86IHN0cmluZyB8IEFjY2Vzc29yPHN0cmluZz47XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIE1lbW9yeSh7IGNsYXNzOiBjbGFzc05hbWUgfTogUHJvcHMpIHtcblx0ZnVuY3Rpb24gZm9ybWF0TGFiZWwodXNhZ2U6IE1lbW9yeVN0YXQpIHtcblx0XHRyZXR1cm4gYCR7dXNhZ2UubWVtb3J5LnVzYWdlLnRvRml4ZWQoMSl9JWA7XG5cdH1cblxuXHRmdW5jdGlvbiBmb3JtYXRUb29sdGlwKHVzYWdlOiBNZW1vcnlTdGF0KSB7XG5cdFx0cmV0dXJuIFtcblx0XHRcdGBSQU06ICR7dXNhZ2UubWVtb3J5LnVzZWR9LyR7dXNhZ2UubWVtb3J5LnRvdGFsfSAoJHt1c2FnZS5tZW1vcnkudXNhZ2UudG9GaXhlZCgxKX0lKWAsXG5cdFx0XHRgU1dBUDogJHt1c2FnZS5zd2FwLnVzZWR9LyR7dXNhZ2Uuc3dhcC50b3RhbH0gKCR7dXNhZ2Uuc3dhcC51c2FnZS50b0ZpeGVkKDEpfSUpYCxcblx0XHRdLmpvaW4oXCJcXG5cIik7XG5cdH1cblxuXHRyZXR1cm4gKFxuXHRcdDxib3ggY2xhc3M9e2NsYXNzTmFtZX0+XG5cdFx0XHQ8aW1hZ2UgaWNvbk5hbWU9XCJtaS1tZW1vcnktYWx0LXN5bWJvbGljXCIgY2xhc3M9XCJyYW0taWNvblwiIC8+XG5cblx0XHRcdDxsYWJlbFxuXHRcdFx0XHRsYWJlbD17bWVtb3J5VXNhZ2UoZm9ybWF0TGFiZWwpfVxuXHRcdFx0XHR0b29sdGlwTWFya3VwPXttZW1vcnlVc2FnZShmb3JtYXRUb29sdGlwKX1cblx0XHRcdC8+XG5cdFx0PC9ib3g+XG5cdCk7XG59XG4iLCAiaW1wb3J0IHsgdHlwZSBBY2Nlc3NvciwgY3JlYXRlU3RhdGUgfSBmcm9tIFwiYWdzXCI7XG5pbXBvcnQgeyBzZXRJc1Nlc3Npb25NZW51VmlzaWJsZSB9IGZyb20gXCJAL2FwcFwiO1xuaW1wb3J0IHsgZXhlY0FzeW5jIH0gZnJvbSBcImFncy9wcm9jZXNzXCI7XG5pbXBvcnQgeyBHZGssIEd0ayB9IGZyb20gXCJhZ3MvZ3RrNFwiO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuXHRjbGFzcz86IHN0cmluZyB8IEFjY2Vzc29yPHN0cmluZz47XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFBvd2VyKHsgY2xhc3M6IGNsYXNzTmFtZSB9OiBQcm9wcykge1xuXHRsZXQgcG9wb3ZlcjogR3RrLlBvcG92ZXIgfCBudWxsID0gbnVsbDtcblx0Y29uc3QgW2lzUG9wb3Zlck9wZW4sIHNldElzUG9wb3Zlck9wZW5dID0gY3JlYXRlU3RhdGUoZmFsc2UpO1xuXG5cdGZ1bmN0aW9uIGhhbmRsZUxlZnRDbGljaygpIHtcblx0XHRzZXRJc1Nlc3Npb25NZW51VmlzaWJsZSgocHJldikgPT4gIXByZXYpO1xuXHR9XG5cblx0ZnVuY3Rpb24gaGFuZGxlUmlnaHRDbGljaygpIHtcblx0XHRpZiAocG9wb3Zlcikge1xuXHRcdFx0aWYgKGlzUG9wb3Zlck9wZW4uZ2V0KCkpIHtcblx0XHRcdFx0c2V0SXNQb3BvdmVyT3BlbihmYWxzZSk7XG5cdFx0XHRcdHBvcG92ZXIucG9wZG93bigpO1xuXHRcdFx0XHRwb3BvdmVyLnNldF9jc3NfY2xhc3Nlcyhcblx0XHRcdFx0XHRwb3BvdmVyLmNzc0NsYXNzZXMuZmlsdGVyKFxuXHRcdFx0XHRcdFx0KGNsYXNzTmFtZSkgPT4gY2xhc3NOYW1lICE9PSBcIm9wZW5cIixcblx0XHRcdFx0XHQpLFxuXHRcdFx0XHQpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0c2V0SXNQb3BvdmVyT3Blbih0cnVlKTtcblx0XHRcdFx0cG9wb3Zlci5wb3B1cCgpO1xuXHRcdFx0XHRwb3BvdmVyLnNldF9jc3NfY2xhc3NlcyhbLi4ucG9wb3Zlci5jc3NDbGFzc2VzLCBcIm9wZW5cIl0pO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiAoXG5cdFx0PGJveFxuXHRcdFx0Y2xhc3M9e2NsYXNzTmFtZX1cblx0XHRcdGN1cnNvcj17R2RrLkN1cnNvci5uZXdfZnJvbV9uYW1lKFwicG9pbnRlclwiLCBudWxsKX1cblx0XHRcdHRvb2x0aXBNYXJrdXA9XCJQb3dlciBBY3Rpb25zXCJcblx0XHQ+XG5cdFx0XHQ8R3RrLkdlc3R1cmVDbGlja1xuXHRcdFx0XHRidXR0b249e0dkay5CVVRUT05fUFJJTUFSWX1cblx0XHRcdFx0b25QcmVzc2VkPXtoYW5kbGVMZWZ0Q2xpY2t9XG5cdFx0XHQvPlxuXG5cdFx0XHQ8R3RrLkdlc3R1cmVDbGlja1xuXHRcdFx0XHRidXR0b249e0dkay5CVVRUT05fU0VDT05EQVJZfVxuXHRcdFx0XHRvblByZXNzZWQ9e2hhbmRsZVJpZ2h0Q2xpY2t9XG5cdFx0XHQvPlxuXG5cdFx0XHQ8aW1hZ2UgaWNvbk5hbWU9XCJzeXN0ZW0tc2h1dGRvd24tc3ltYm9saWNcIiBwaXhlbFNpemU9ezE2fSAvPlxuXG5cdFx0XHQ8cG9wb3ZlclxuXHRcdFx0XHQkPXsoc2VsZikgPT4ge1xuXHRcdFx0XHRcdHBvcG92ZXIgPSBzZWxmIGFzIEd0ay5Qb3BvdmVyO1xuXHRcdFx0XHR9fVxuXHRcdFx0XHRvbkNsb3NlZD17KHNlbGYpID0+IHtcblx0XHRcdFx0XHRzZXRJc1BvcG92ZXJPcGVuKGZhbHNlKTtcblx0XHRcdFx0XHRzZWxmLnNldF9jc3NfY2xhc3Nlcyhcblx0XHRcdFx0XHRcdHNlbGYuY3NzQ2xhc3Nlcy5maWx0ZXIoXG5cdFx0XHRcdFx0XHRcdChjbGFzc05hbWUpID0+IGNsYXNzTmFtZSAhPT0gXCJvcGVuXCIsXG5cdFx0XHRcdFx0XHQpLFxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH19XG5cdFx0XHQ+XG5cdFx0XHRcdDxib3ggc3BhY2luZz17Nn0gb3JpZW50YXRpb249e0d0ay5PcmllbnRhdGlvbi5WRVJUSUNBTH0+XG5cdFx0XHRcdFx0PGJveCBzcGFjaW5nPXs2fT5cblx0XHRcdFx0XHRcdDxidXR0b25cblx0XHRcdFx0XHRcdFx0dG9vbHRpcE1hcmt1cD1cIkxvY2tcIlxuXHRcdFx0XHRcdFx0XHRjdXJzb3I9e0dkay5DdXJzb3IubmV3X2Zyb21fbmFtZShcInBvaW50ZXJcIiwgbnVsbCl9XG5cdFx0XHRcdFx0XHRcdG9uQ2xpY2tlZD17KCkgPT4ge1xuXHRcdFx0XHRcdFx0XHRcdGV4ZWNBc3luYyhcImxvZ2luY3RsIGxvY2stc2Vzc2lvblwiKTtcblx0XHRcdFx0XHRcdFx0XHRwb3BvdmVyPy5wb3Bkb3duKCk7XG5cdFx0XHRcdFx0XHRcdH19XG5cdFx0XHRcdFx0XHQ+XG5cdFx0XHRcdFx0XHRcdDxpbWFnZVxuXHRcdFx0XHRcdFx0XHRcdGljb25OYW1lPVwibWktbG9jay1zeW1ib2xpY1wiXG5cdFx0XHRcdFx0XHRcdFx0cGl4ZWxfc2l6ZT17MTZ9XG5cdFx0XHRcdFx0XHRcdC8+XG5cdFx0XHRcdFx0XHQ8L2J1dHRvbj5cblxuXHRcdFx0XHRcdFx0PGJ1dHRvblxuXHRcdFx0XHRcdFx0XHR0b29sdGlwTWFya3VwPVwiU2xlZXBcIlxuXHRcdFx0XHRcdFx0XHRjdXJzb3I9e0dkay5DdXJzb3IubmV3X2Zyb21fbmFtZShcInBvaW50ZXJcIiwgbnVsbCl9XG5cdFx0XHRcdFx0XHRcdG9uQ2xpY2tlZD17KCkgPT4ge1xuXHRcdFx0XHRcdFx0XHRcdGV4ZWNBc3luYyhcInN5c3RlbWN0bCBzdXNwZW5kXCIpO1xuXHRcdFx0XHRcdFx0XHRcdHBvcG92ZXI/LnBvcGRvd24oKTtcblx0XHRcdFx0XHRcdFx0fX1cblx0XHRcdFx0XHRcdD5cblx0XHRcdFx0XHRcdFx0PGltYWdlXG5cdFx0XHRcdFx0XHRcdFx0aWNvbk5hbWU9XCJtaS1kYXJrLW1vZGUtc3ltYm9saWNcIlxuXHRcdFx0XHRcdFx0XHRcdHBpeGVsX3NpemU9ezE2fVxuXHRcdFx0XHRcdFx0XHQvPlxuXHRcdFx0XHRcdFx0PC9idXR0b24+XG5cblx0XHRcdFx0XHRcdDxidXR0b25cblx0XHRcdFx0XHRcdFx0dG9vbHRpcE1hcmt1cD1cIkxvZ291dFwiXG5cdFx0XHRcdFx0XHRcdGN1cnNvcj17R2RrLkN1cnNvci5uZXdfZnJvbV9uYW1lKFwicG9pbnRlclwiLCBudWxsKX1cblx0XHRcdFx0XHRcdFx0b25DbGlja2VkPXsoKSA9PiB7XG5cdFx0XHRcdFx0XHRcdFx0ZXhlY0FzeW5jKFwicGtpbGwgSHlwcmxhbmRcIik7XG5cdFx0XHRcdFx0XHRcdFx0cG9wb3Zlcj8ucG9wZG93bigpO1xuXHRcdFx0XHRcdFx0XHR9fVxuXHRcdFx0XHRcdFx0PlxuXHRcdFx0XHRcdFx0XHQ8aW1hZ2Vcblx0XHRcdFx0XHRcdFx0XHRpY29uTmFtZT1cIm1pLWxvZ291dC1zeW1ib2xpY1wiXG5cdFx0XHRcdFx0XHRcdFx0cGl4ZWxfc2l6ZT17MTZ9XG5cdFx0XHRcdFx0XHRcdC8+XG5cdFx0XHRcdFx0XHQ8L2J1dHRvbj5cblxuXHRcdFx0XHRcdFx0PGJ1dHRvblxuXHRcdFx0XHRcdFx0XHR0b29sdGlwTWFya3VwPVwiVGFzayBNYW5hZ2VyXCJcblx0XHRcdFx0XHRcdFx0Y3Vyc29yPXtHZGsuQ3Vyc29yLm5ld19mcm9tX25hbWUoXCJwb2ludGVyXCIsIG51bGwpfVxuXHRcdFx0XHRcdFx0XHRvbkNsaWNrZWQ9eygpID0+IHtcblx0XHRcdFx0XHRcdFx0XHRleGVjQXN5bmMoXCJraXR0eSBidG9wXCIpO1xuXHRcdFx0XHRcdFx0XHRcdHBvcG92ZXI/LnBvcGRvd24oKTtcblx0XHRcdFx0XHRcdFx0fX1cblx0XHRcdFx0XHRcdD5cblx0XHRcdFx0XHRcdFx0PGltYWdlXG5cdFx0XHRcdFx0XHRcdFx0aWNvbk5hbWU9XCJtaS1icm93c2UtYWN0aXZpdHktc3ltYm9saWNcIlxuXHRcdFx0XHRcdFx0XHRcdHBpeGVsX3NpemU9ezE2fVxuXHRcdFx0XHRcdFx0XHQvPlxuXHRcdFx0XHRcdFx0PC9idXR0b24+XG5cdFx0XHRcdFx0PC9ib3g+XG5cblx0XHRcdFx0XHQ8Ym94IHNwYWNpbmc9ezZ9PlxuXHRcdFx0XHRcdFx0PGJ1dHRvblxuXHRcdFx0XHRcdFx0XHR0b29sdGlwTWFya3VwPVwiSGliZXJuYXRlXCJcblx0XHRcdFx0XHRcdFx0Y3Vyc29yPXtHZGsuQ3Vyc29yLm5ld19mcm9tX25hbWUoXCJwb2ludGVyXCIsIG51bGwpfVxuXHRcdFx0XHRcdFx0XHRvbkNsaWNrZWQ9eygpID0+IHtcblx0XHRcdFx0XHRcdFx0XHRleGVjQXN5bmMoXCJzeXN0ZW1jdGwgaGliZXJuYXRlXCIpO1xuXHRcdFx0XHRcdFx0XHRcdHBvcG92ZXI/LnBvcGRvd24oKTtcblx0XHRcdFx0XHRcdFx0fX1cblx0XHRcdFx0XHRcdD5cblx0XHRcdFx0XHRcdFx0PGltYWdlXG5cdFx0XHRcdFx0XHRcdFx0aWNvbk5hbWU9XCJtaS1kb3dubG9hZGluZy1zeW1ib2xpY1wiXG5cdFx0XHRcdFx0XHRcdFx0cGl4ZWxfc2l6ZT17MTZ9XG5cdFx0XHRcdFx0XHRcdC8+XG5cdFx0XHRcdFx0XHQ8L2J1dHRvbj5cblxuXHRcdFx0XHRcdFx0PGJ1dHRvblxuXHRcdFx0XHRcdFx0XHR0b29sdGlwTWFya3VwPVwiU2h1dGRvd25cIlxuXHRcdFx0XHRcdFx0XHRjdXJzb3I9e0dkay5DdXJzb3IubmV3X2Zyb21fbmFtZShcInBvaW50ZXJcIiwgbnVsbCl9XG5cdFx0XHRcdFx0XHRcdG9uQ2xpY2tlZD17KCkgPT4ge1xuXHRcdFx0XHRcdFx0XHRcdGV4ZWNBc3luYyhcInN5c3RlbWN0bCBwb3dlcm9mZlwiKTtcblx0XHRcdFx0XHRcdFx0XHRwb3BvdmVyPy5wb3Bkb3duKCk7XG5cdFx0XHRcdFx0XHRcdH19XG5cdFx0XHRcdFx0XHQ+XG5cdFx0XHRcdFx0XHRcdDxpbWFnZVxuXHRcdFx0XHRcdFx0XHRcdGljb25OYW1lPVwibWktcG93ZXItc2V0dGluZ3MtbmV3LXN5bWJvbGljXCJcblx0XHRcdFx0XHRcdFx0XHRwaXhlbF9zaXplPXsxNn1cblx0XHRcdFx0XHRcdFx0Lz5cblx0XHRcdFx0XHRcdDwvYnV0dG9uPlxuXG5cdFx0XHRcdFx0XHQ8YnV0dG9uXG5cdFx0XHRcdFx0XHRcdHRvb2x0aXBNYXJrdXA9XCJSZWJvb3RcIlxuXHRcdFx0XHRcdFx0XHRjdXJzb3I9e0dkay5DdXJzb3IubmV3X2Zyb21fbmFtZShcInBvaW50ZXJcIiwgbnVsbCl9XG5cdFx0XHRcdFx0XHRcdG9uQ2xpY2tlZD17KCkgPT4ge1xuXHRcdFx0XHRcdFx0XHRcdGV4ZWNBc3luYyhcInJlYm9vdFwiKTtcblx0XHRcdFx0XHRcdFx0XHRwb3BvdmVyPy5wb3Bkb3duKCk7XG5cdFx0XHRcdFx0XHRcdH19XG5cdFx0XHRcdFx0XHQ+XG5cdFx0XHRcdFx0XHRcdDxpbWFnZVxuXHRcdFx0XHRcdFx0XHRcdGljb25OYW1lPVwibWktcmVzdGFydC1hbHQtc3ltYm9saWNcIlxuXHRcdFx0XHRcdFx0XHRcdHBpeGVsX3NpemU9ezE2fVxuXHRcdFx0XHRcdFx0XHQvPlxuXHRcdFx0XHRcdFx0PC9idXR0b24+XG5cblx0XHRcdFx0XHRcdDxidXR0b25cblx0XHRcdFx0XHRcdFx0dG9vbHRpcE1hcmt1cD1cIlJlYm9vdCB0byBGaXJtd2FyZSBTZXR0aW5nc1wiXG5cdFx0XHRcdFx0XHRcdGN1cnNvcj17R2RrLkN1cnNvci5uZXdfZnJvbV9uYW1lKFwicG9pbnRlclwiLCBudWxsKX1cblx0XHRcdFx0XHRcdFx0b25DbGlja2VkPXsoKSA9PiB7XG5cdFx0XHRcdFx0XHRcdFx0ZXhlY0FzeW5jKFwic3lzdGVtY3RsIHJlYm9vdCAtLWZpcm13YXJlLXNldHVwXCIpO1xuXHRcdFx0XHRcdFx0XHRcdHBvcG92ZXI/LnBvcGRvd24oKTtcblx0XHRcdFx0XHRcdFx0fX1cblx0XHRcdFx0XHRcdD5cblx0XHRcdFx0XHRcdFx0PGltYWdlXG5cdFx0XHRcdFx0XHRcdFx0aWNvbk5hbWU9XCJtaS1zZXR0aW5ncy1hcHBsaWNhdGlvbnMtc3ltYm9saWNcIlxuXHRcdFx0XHRcdFx0XHRcdHBpeGVsX3NpemU9ezE2fVxuXHRcdFx0XHRcdFx0XHQvPlxuXHRcdFx0XHRcdFx0PC9idXR0b24+XG5cdFx0XHRcdFx0PC9ib3g+XG5cdFx0XHRcdDwvYm94PlxuXHRcdFx0PC9wb3BvdmVyPlxuXHRcdDwvYm94PlxuXHQpO1xufVxuIiwgImV4cG9ydCBjb25zdCByb3Nld2F0ZXIgPSBcIiNmNGRiZDZcIjtcbmV4cG9ydCBjb25zdCBmbGFtaW5nbyA9IFwiI2YwYzZjNlwiO1xuZXhwb3J0IGNvbnN0IHBpbmsgPSBcIiNmNWJkZTZcIjtcbmV4cG9ydCBjb25zdCBtYXV2cmUgPSBcIiNjNmEwZjZcIjtcbmV4cG9ydCBjb25zdCByZWQgPSBcIiNlZDg3OTZcIjtcbmV4cG9ydCBjb25zdCBtYXJvb24gPSBcIiNlZTk5YTBcIjtcbmV4cG9ydCBjb25zdCBwZWFjaCA9IFwiI2Y1YTk3ZlwiO1xuZXhwb3J0IGNvbnN0IHllbGxvdyA9IFwiI2VlZDQ5ZlwiO1xuZXhwb3J0IGNvbnN0IGdyZWVuID0gXCIjYTZkYTk1XCI7XG5leHBvcnQgY29uc3QgdGVhbCA9IFwiIzhiZDVjYVwiO1xuZXhwb3J0IGNvbnN0IHNreSA9IFwiIzkxZDdlM1wiO1xuZXhwb3J0IGNvbnN0IHNhcHBoaXJlID0gXCIjN2RjNGU0XCI7XG5leHBvcnQgY29uc3QgYmx1ZSA9IFwiIzhhYWRmNFwiO1xuZXhwb3J0IGNvbnN0IGxhdmVuZGVyID0gXCIjYjdiZGY4XCI7XG5leHBvcnQgY29uc3QgdGV4dCA9IFwiI2NhZDNmNVwiO1xuZXhwb3J0IGNvbnN0IHN1YnRleHQxID0gXCIjYjhjMGUwXCI7XG5leHBvcnQgY29uc3Qgc3VidGV4dDAgPSBcIiNhNWFkY2JcIjtcbmV4cG9ydCBjb25zdCBvdmVybGF5MiA9IFwiIzkzOWFiN1wiO1xuZXhwb3J0IGNvbnN0IG92ZXJsYXkxID0gXCIjODA4N2EyXCI7XG5leHBvcnQgY29uc3Qgb3ZlcmxheTAgPSBcIiM2ZTczOGRcIjtcbmV4cG9ydCBjb25zdCBzdXJmYWNlMiA9IFwiIzViNjA3OFwiO1xuZXhwb3J0IGNvbnN0IHN1cmZhY2UxID0gXCIjNDk0ZDY0XCI7XG5leHBvcnQgY29uc3Qgc3VyZmFjZTAgPSBcIiMzNjNhNGZcIjtcbmV4cG9ydCBjb25zdCBiYXNlID0gXCIjMjQyNzNhXCI7XG5leHBvcnQgY29uc3QgbWFudGxlID0gXCIjMWUyMDMwXCI7XG5leHBvcnQgY29uc3QgY3J1c3QgPSBcIiMxODE5MjZcIjtcblxuZXhwb3J0IGNvbnN0IHRvb2x0aXBDdXJyZW50U29uZyA9IG1hdXZyZTtcbmV4cG9ydCBjb25zdCBseXJpY3NTb3VyY2VDb2xvciA9IHNhcHBoaXJlO1xuZXhwb3J0IGNvbnN0IHVybCA9IGJsdWU7XG4iLCAiaW1wb3J0IHsgdXJsIGFzIHVybENvbG9yIH0gZnJvbSBcIkAvY29uc3RhbnRzL2NvbG9yc1wiO1xuaW1wb3J0IHsgY3JlYXRlU3RhdGUgfSBmcm9tIFwiYWdzXCI7XG5cbmNvbnN0IFtjdXJyZW50TWFycXVlZSwgc2V0Q3VycmVudE1hcnF1ZWVdID0gY3JlYXRlU3RhdGU8e1xuXHR0ZXh0OiBzdHJpbmc7XG5cdGluZGV4OiBudW1iZXI7XG59Pih7XG5cdHRleHQ6IFwiXCIsXG5cdGluZGV4OiAwLFxufSk7XG5cbmV4cG9ydCBmdW5jdGlvbiBtYXJxdWVlKHRleHQ6IHN0cmluZywgd2lkdGg6IG51bWJlcik6IHN0cmluZyB7XG5cdGlmICh0ZXh0Lmxlbmd0aCA8PSB3aWR0aCkgcmV0dXJuIHRleHQ7XG5cblx0Y29uc3QgbWFycXVlZURhdGEgPSBjdXJyZW50TWFycXVlZS5nZXQoKTtcblxuXHRpZiAobWFycXVlZURhdGEudGV4dCAhPT0gdGV4dCkge1xuXHRcdHNldEN1cnJlbnRNYXJxdWVlKHtcblx0XHRcdHRleHQsXG5cdFx0XHRpbmRleDogMCxcblx0XHR9KTtcblx0fVxuXG5cdGlmICh0ZXh0Lmxlbmd0aCA8IG1hcnF1ZWVEYXRhLmluZGV4KSB7XG5cdFx0c2V0Q3VycmVudE1hcnF1ZWUoe1xuXHRcdFx0dGV4dCxcblx0XHRcdGluZGV4OiAwLFxuXHRcdH0pO1xuXHR9XG5cblx0Y29uc3QgZGl2aWRlZFRleHQgPSBgJHt0ZXh0fSBcdUY0NDQgYDtcblx0Y29uc3QgbWFycXVlZVRleHQgPVxuXHRcdGRpdmlkZWRUZXh0LnNsaWNlKG1hcnF1ZWVEYXRhLmluZGV4KSArXG5cdFx0ZGl2aWRlZFRleHQuc2xpY2UoMCwgbWFycXVlZURhdGEuaW5kZXgpO1xuXG5cdHNldEN1cnJlbnRNYXJxdWVlKChtYXJxdWVlRGF0YSkgPT4ge1xuXHRcdHJldHVybiB7XG5cdFx0XHR0ZXh0OiBtYXJxdWVlRGF0YS50ZXh0LFxuXHRcdFx0aW5kZXg6IChtYXJxdWVlRGF0YS5pbmRleCArIDEpICUgZGl2aWRlZFRleHQubGVuZ3RoLFxuXHRcdH07XG5cdH0pO1xuXG5cdHJldHVybiBtYXJxdWVlVGV4dC5zbGljZSgwLCB3aWR0aCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb2xvclRleHQodGV4dDogc3RyaW5nLCBjb2xvcjogc3RyaW5nKTogc3RyaW5nIHtcblx0cmV0dXJuIGA8c3BhbiBjb2xvcj1cIiR7Y29sb3J9XCI+JHt0ZXh0fTwvc3Bhbj5gO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZXNjYXBlTWFya3VwKHRleHQ6IHN0cmluZyk6IHN0cmluZyB7XG5cdHJldHVybiB0ZXh0XG5cdFx0LnJlcGxhY2UoLyYvZywgXCImYW1wO1wiKVxuXHRcdC5yZXBsYWNlKC88L2csIFwiJmx0O1wiKVxuXHRcdC5yZXBsYWNlKC8+L2csIFwiJmd0O1wiKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlTWFya2Rvd24obWVzc2FnZTogc3RyaW5nKTogc3RyaW5nIHtcblx0bGV0IG91dHB1dCA9IG1lc3NhZ2U7XG5cblx0Y29uc3QgdXJsUmVnZXggPVxuXHRcdC9cXFsoW15cXF1dKylcXF1cXCgoKDx8Jmx0Oyk/KGh0dHBzPzpcXC9cXC9bYS16QS1aMC05Li1dK1xcLlthLXpBLVpdezIsfSg/OlteXFxzPjxdKikpKD58Jmd0Oyk/XFwpKXxcXGIoaHR0cHM/OlxcL1xcL1thLXpBLVowLTkuLV0rXFwuW2EtekEtWl17Mix9KD86W15cXHM8PigpXSopXFxiKS9nO1xuXHRjb25zdCBib2xkUmVnZXggPSAvXFwqXFwqKC4qPylcXCpcXCovZztcblx0Y29uc3QgaXRhbGljUmVnZXggPSAvKFxcKnxfKSguKj8pXFwxL2c7XG5cdGNvbnN0IHVuZGVybGluZVJlZ2V4ID0gL19fKC4qPylfXy9nO1xuXHRjb25zdCBtb25vY29kZVJlZ2V4ID0gL2AoW15gXSspYC9nO1xuXHRjb25zdCB0cmlwbGVCYWNrdGljayA9IC9gYGAvZztcblxuXHRvdXRwdXQgPSBtZXNzYWdlXG5cdFx0LnJlcGxhY2UoYm9sZFJlZ2V4LCAoX21hdGNoLCB0ZXh0KSA9PiBgPGI+JHt0ZXh0fTwvYj5gKVxuXHRcdC5yZXBsYWNlKHVuZGVybGluZVJlZ2V4LCAoX21hdGNoLCB0ZXh0KSA9PiBgPHU+JHt0ZXh0fTwvdT5gKVxuXHRcdC5yZXBsYWNlKGl0YWxpY1JlZ2V4LCAoX21hdGNoLCB0ZXh0KSA9PiBgPGk+JHt0ZXh0fTwvaT5gKVxuXHRcdC5yZXBsYWNlKHRyaXBsZUJhY2t0aWNrLCAoKSA9PiBcImBcIilcblx0XHQucmVwbGFjZShtb25vY29kZVJlZ2V4LCAoX21hdGNoLCB0ZXh0KSA9PiBgPHR0PiR7dGV4dH08L3R0PmApXG5cdFx0LnJlcGxhY2UodXJsUmVnZXgsIChtYXRjaCwgdGV4dCwgX2x0LCB1cmwpID0+IHtcblx0XHRcdGlmICh1cmwpXG5cdFx0XHRcdHJldHVybiBjb2xvclRleHQoXG5cdFx0XHRcdFx0YDxhIGhyZWY9XCIke3VybH1cIj4ke3RleHQgfHwgdXJsfTwvYT5gLFxuXHRcdFx0XHRcdHVybENvbG9yLFxuXHRcdFx0XHQpO1xuXG5cdFx0XHRyZXR1cm4gY29sb3JUZXh0KGA8YSBocmVmPVwiJHttYXRjaH1cIj4ke21hdGNofTwvYT5gLCB1cmxDb2xvcik7XG5cdFx0fSk7XG5cblx0cmV0dXJuIG91dHB1dDtcbn1cbiIsICJpbXBvcnQgeyBlc2NhcGVNYXJrdXAsIG1hcnF1ZWUgfSBmcm9tIFwiQC91dGlsL3RleHRcIjtcbmltcG9ydCB7IGRlZmF1bHRDb25maWcgfSBmcm9tIFwiQC9jb25zdGFudHMvY29uZmlnXCI7XG5pbXBvcnQgdHlwZSB7IFNvbmdEYXRhIH0gZnJvbSBcIkAvdHlwZXMvbHlyaWNzXCI7XG5pbXBvcnQgeyBmaWxlRXhpc3RzIH0gZnJvbSBcIkAvdXRpbC9maWxlXCI7XG5pbXBvcnQgeyBleGVjQXN5bmMgfSBmcm9tIFwiYWdzL3Byb2Nlc3NcIjtcbmltcG9ydCB7IGNvbmZpZyB9IGZyb20gXCJAL3V0aWwvY29uZmlnXCI7XG5pbXBvcnQgeyB3cml0ZUZpbGUgfSBmcm9tIFwiYWdzL2ZpbGVcIjtcbmltcG9ydCB7IEdkaywgR3RrIH0gZnJvbSBcImFncy9ndGs0XCI7XG5pbXBvcnQgTXByaXMgZnJvbSBcImdpOi8vQXN0YWxNcHJpc1wiO1xuaW1wb3J0IEdpbyBmcm9tIFwiZ2k6Ly9HaW9cIjtcbmltcG9ydCB7XG5cdGNvbnZlcnRUb0xyYyxcblx0Zm9ybWF0THlyaWNzVG9vbHRpcCxcblx0cGFyc2VMeXJpY3NEYXRhLFxuXHR1c2VTb25nLFxufSBmcm9tIFwiQC91dGlsL2x5cmljc1wiO1xuaW1wb3J0IHtcblx0Y3JlYXRlQmluZGluZyxcblx0Y3JlYXRlQ29tcHV0ZWQsXG5cdGNyZWF0ZVJvb3QsXG5cdGpzeCxcblx0dHlwZSBBY2Nlc3Nvcixcbn0gZnJvbSBcImFnc1wiO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuXHRjbGFzcz86IHN0cmluZyB8IEFjY2Vzc29yPHN0cmluZz47XG5cdG1lZGlhQ2xhc3M/OiBzdHJpbmcgfCBBY2Nlc3NvcjxzdHJpbmc+O1xuXHRseXJpY3NDbGFzcz86IHN0cmluZyB8IEFjY2Vzc29yPHN0cmluZz47XG5cdGNvdmVyQ2xhc3M/OiBzdHJpbmcgfCBBY2Nlc3NvcjxzdHJpbmc+O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBNZWRpYSh7XG5cdGNsYXNzOiBjbGFzc05hbWUsXG5cdG1lZGlhQ2xhc3MsXG5cdGx5cmljc0NsYXNzLFxuXHRjb3ZlckNsYXNzLFxufTogUHJvcHMpIHtcblx0bGV0IG1lZGlhRGlzcG9zZTogKCgpID0+IHZvaWQpIHwgbnVsbCA9IG51bGw7XG5cdGxldCBseXJpY3NEaXNwb3NlOiAoKCkgPT4gdm9pZCkgfCBudWxsID0gbnVsbDtcblxuXHRjb25zdCBzcG90aWZ5ID0gTXByaXMuUGxheWVyLm5ldyhcInNwb3RpZnlcIik7XG5cdGNvbnN0IHNvbmcgPSB1c2VTb25nKHNwb3RpZnkpO1xuXG5cdGNvbnN0IHBvc2l0aW9uID0gY3JlYXRlQmluZGluZyhzcG90aWZ5LCBcInBvc2l0aW9uXCIpO1xuXHRjb25zdCB2b2x1bWUgPSBjcmVhdGVCaW5kaW5nKHNwb3RpZnksIFwidm9sdW1lXCIpO1xuXHRjb25zdCBhcnRpc3QgPSBjcmVhdGVCaW5kaW5nKHNwb3RpZnksIFwiYXJ0aXN0XCIpO1xuXHRjb25zdCB0cmFjayA9IGNyZWF0ZUJpbmRpbmcoc3BvdGlmeSwgXCJ0aXRsZVwiKTtcblx0Y29uc3QgYWxidW0gPSBjcmVhdGVCaW5kaW5nKHNwb3RpZnksIFwiYWxidW1cIik7XG5cdGNvbnN0IGNvdmVyQXJ0ID0gY3JlYXRlQmluZGluZyhzcG90aWZ5LCBcImNvdmVyX2FydFwiKTtcblx0Y29uc3QgYXZhaWxhYmxlID0gY3JlYXRlQmluZGluZyhzcG90aWZ5LCBcImF2YWlsYWJsZVwiKTtcblxuXHRjb25zdCBtYWluTWV0YWRhdGEgPSBjcmVhdGVDb21wdXRlZChbXG5cdFx0dHJhY2ssXG5cdFx0YXJ0aXN0LFxuXHRcdGFsYnVtLFxuXHRcdHZvbHVtZSxcblx0XHRwb3NpdGlvbixcblx0XHRhdmFpbGFibGVcblx0XSk7XG5cblx0Y29uc3QgbHlyaWNzU3RhdGUgPSBjcmVhdGVDb21wdXRlZChbc29uZywgcG9zaXRpb25dKTtcblxuXHRjb25zdCBjb3ZlclZpc2libGVTdGF0ZSA9IGNyZWF0ZUNvbXB1dGVkKFtjb3ZlckFydCwgYXZhaWxhYmxlXSwgdHJhbnNmb3JtQ292ZXJWaXNpYmxlKVxuXG5cdGZ1bmN0aW9uIHRyYW5zZm9ybUNvdmVyVmlzaWJsZShjb3ZlckFydDogc3RyaW5nLCBhdmFpbGFibGU6IGJvb2xlYW4pIHtcblx0XHRyZXR1cm4gYXZhaWxhYmxlICYmICEhY292ZXJBcnQgJiYgZmlsZUV4aXN0cyhjb3ZlckFydCk7XG5cdH1cblxuXHRmdW5jdGlvbiB0cmFuc2Zvcm1NZWRpYUxhYmVsKFt0cmFjaywgYXJ0aXN0LCwsLCBpc0F2YWlsYWJsZV06IFtcblx0XHRzdHJpbmcsXG5cdFx0c3RyaW5nLFxuXHRcdHN0cmluZyxcblx0XHRudW1iZXIsXG5cdFx0bnVtYmVyLFxuXHRcdGJvb2xlYW4sXG5cdF0pIHtcblx0XHRpZiAoIXRyYWNrIHx8ICFhcnRpc3QgfHwgIWlzQXZhaWxhYmxlKSByZXR1cm4gXCJObyBNZWRpYSBQbGF5aW5nXCI7XG5cblx0XHRyZXR1cm4gYCR7bWFycXVlZShgJHthcnRpc3R9IC0gJHt0cmFja31gLCBjb25maWcuZ2V0KCk/Lm1lZGlhTWF4TGVuZ3RoID8/IGRlZmF1bHRDb25maWcubWVkaWFNYXhMZW5ndGgpfWA7XG5cdH1cblxuXHRmdW5jdGlvbiB0cmFuc2Zvcm1NZWRpYVRvb2x0aXAoW3RyYWNrLCBhcnRpc3QsIGFsYnVtLCB2b2x1bWUsLCBpc0F2YWlsYWJsZV06IFtcblx0XHRzdHJpbmcsXG5cdFx0c3RyaW5nLFxuXHRcdHN0cmluZyxcblx0XHRudW1iZXIsXG5cdFx0bnVtYmVyLFxuXHRcdGJvb2xlYW4sXG5cdF0pIHtcblx0XHRpZiAoIXRyYWNrIHx8ICFhcnRpc3QgfHwgIWFsYnVtIHx8ICFpc0F2YWlsYWJsZSkgcmV0dXJuIFwiXCI7XG5cblx0XHRyZXR1cm4gW1xuXHRcdFx0YEFydGlzdDogJHtlc2NhcGVNYXJrdXAoYXJ0aXN0KX1gLFxuXHRcdFx0YFRyYWNrOiAke2VzY2FwZU1hcmt1cCh0cmFjayl9YCxcblx0XHRcdGBBbGJ1bTogJHtlc2NhcGVNYXJrdXAoYWxidW0pfWAsXG5cdFx0XHRgVm9sdW1lOiAke01hdGgucm91bmQodm9sdW1lICogMTAwKX0lYCxcblx0XHRdLmpvaW4oXCJcXG5cIik7XG5cdH1cblxuXHRmdW5jdGlvbiB0cmFuc2Zvcm1NZWRpYUhhc1Rvb2x0aXAoW3RyYWNrLCBhcnRpc3QsIGFsYnVtLCwsIGlzQXZhaWxhYmxlXTogW1xuXHRcdHN0cmluZyxcblx0XHRzdHJpbmcsXG5cdFx0c3RyaW5nLFxuXHRcdG51bWJlcixcblx0XHRudW1iZXIsXG5cdFx0Ym9vbGVhbixcblx0XSkge1xuXHRcdGlmICghdHJhY2sgfHwgIWFydGlzdCB8fCAhYWxidW0gfHwgIWlzQXZhaWxhYmxlKSByZXR1cm4gZmFsc2U7XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXG5cdGZ1bmN0aW9uIHRyYW5zZm9ybUx5cmljc0xhYmVsKFtzb25nLCBwb3NpdGlvbl06IFtTb25nRGF0YSB8IG51bGwsIG51bWJlcl0pIHtcblx0XHRjb25zdCBub01lZGlhTXNnID0gXCJObyBMeXJpY3MgQXZhaWxhYmxlXCI7XG5cblx0XHRpZiAoIXNvbmcgfHwgIXNvbmcubHlyaWNzIHx8ICFzb25nLnNvdXJjZSkgcmV0dXJuIG5vTWVkaWFNc2c7XG5cblx0XHRjb25zdCBwYXJzZWRMeXJpY3MgPSBwYXJzZUx5cmljc0RhdGEoXG5cdFx0XHRzb25nLmx5cmljcyxcblx0XHRcdHBvc2l0aW9uLFxuXHRcdFx0c29uZy5zb3VyY2UsXG5cdFx0KT8uY3VycmVudDtcblxuXHRcdGlmICghcGFyc2VkTHlyaWNzKSByZXR1cm4gbm9NZWRpYU1zZztcblxuXHRcdHJldHVybiBgJHtwYXJzZWRMeXJpY3N9YDtcblx0fVxuXG5cdGZ1bmN0aW9uIHRyYW5zZm9ybUx5cmljc1Rvb2x0aXAoW3NvbmcsIHBvc2l0aW9uXTogW1xuXHRcdFNvbmdEYXRhIHwgbnVsbCxcblx0XHRudW1iZXIsXG5cdF0pIHtcblx0XHRpZiAoIXNvbmcgfHwgIXNvbmcubHlyaWNzIHx8ICFzb25nLnNvdXJjZSkgcmV0dXJuIFwiXCI7XG5cblx0XHRjb25zdCBseXJpY3NEYXRhID0gcGFyc2VMeXJpY3NEYXRhKHNvbmcubHlyaWNzLCBwb3NpdGlvbiwgc29uZy5zb3VyY2UpO1xuXG5cdFx0aWYgKCFseXJpY3NEYXRhKSByZXR1cm4gXCJcIjtcblxuXHRcdHJldHVybiBmb3JtYXRMeXJpY3NUb29sdGlwKHNvbmcsIGx5cmljc0RhdGEpO1xuXHR9XG5cblx0ZnVuY3Rpb24gdHJhbnNmb3JtTHlyaWNzSGFzVG9vbHRpcChbc29uZywgcG9zaXRpb25dOiBbXG5cdFx0U29uZ0RhdGEgfCBudWxsLFxuXHRcdG51bWJlcixcblx0XSkge1xuXHRcdGlmICghc29uZyB8fCAhc29uZy5seXJpY3MgfHwgIXNvbmcuc291cmNlKSByZXR1cm4gZmFsc2U7XG5cblx0XHRjb25zdCBseXJpY3NEYXRhID0gcGFyc2VMeXJpY3NEYXRhKHNvbmcubHlyaWNzLCBwb3NpdGlvbiwgc29uZy5zb3VyY2UpO1xuXG5cdFx0aWYgKCFseXJpY3NEYXRhKSByZXR1cm4gZmFsc2U7XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXG5cdGZ1bmN0aW9uIHRyYW5zZm9ybU1lZGlhSWNvbihbdHJhY2ssIGFydGlzdCwsLCwgaXNBdmFpbGFibGVdOiBbXG5cdFx0c3RyaW5nLFxuXHRcdHN0cmluZyxcblx0XHRzdHJpbmcsXG5cdFx0bnVtYmVyLFxuXHRcdG51bWJlcixcblx0XHRib29sZWFuLFxuXHRdKSB7XG5cdFx0aWYgKCF0cmFjayB8fCAhYXJ0aXN0IHx8ICFpc0F2YWlsYWJsZSkgcmV0dXJuIFwibWktbXVzaWMtb2ZmLXN5bWJvbGljXCI7XG5cblx0XHRyZXR1cm4gXCJtaS1tdXNpYy1ub3RlLXN5bWJvbGljXCI7XG5cdH1cblxuXHRmdW5jdGlvbiBoYW5kbGVJY29uTGVmdENsaWNrKCkge1xuXHRcdGNvbnN0IGNvdmVyID0gY292ZXJBcnQuZ2V0KCk7XG5cblx0XHRpZiAoIWNvdmVyIHx8ICFmaWxlRXhpc3RzKGNvdmVyKSkgcmV0dXJuO1xuXG5cdFx0ZXhlY0FzeW5jKGB4ZGctb3BlbiBcIiR7Y292ZXJ9XCJgKTtcblx0fVxuXG5cdGZ1bmN0aW9uIGhhbmRsZUljb25NaWRkbGVDbGljaygpIHtcblx0XHRjb25zdCBjb3ZlciA9IGNvdmVyQXJ0LmdldCgpO1xuXG5cdFx0aWYgKCFjb3ZlciB8fCAhZmlsZUV4aXN0cyhjb3ZlcikgfHwgIXNwb3RpZnkuYXZhaWxhYmxlKSByZXR1cm47XG5cblx0XHRpZiAoXG5cdFx0XHQhZmlsZUV4aXN0cyhcblx0XHRcdFx0Y29uZmlnLmdldCgpLnBhdGhzPy5zYXZlRm9sZGVyID8/XG5cdFx0XHRcdFx0ZGVmYXVsdENvbmZpZy5wYXRocy5zYXZlRm9sZGVyLFxuXHRcdFx0XHR0cnVlLFxuXHRcdFx0KVxuXHRcdClcblx0XHRcdEdpby5GaWxlLm5ld19mb3JfcGF0aChcblx0XHRcdFx0Y29uZmlnLmdldCgpLnBhdGhzPy5zYXZlRm9sZGVyID8/XG5cdFx0XHRcdFx0ZGVmYXVsdENvbmZpZy5wYXRocy5zYXZlRm9sZGVyLFxuXHRcdFx0KS5tYWtlX2RpcmVjdG9yeV93aXRoX3BhcmVudHMobnVsbCk7XG5cblx0XHRjb25zdCBkZXN0RmlsZSA9IEdpby5GaWxlLm5ld19mb3JfcGF0aChcblx0XHRcdGAke2NvbmZpZy5nZXQoKS5wYXRocz8uc2F2ZUZvbGRlciA/PyBkZWZhdWx0Q29uZmlnLnBhdGhzLnNhdmVGb2xkZXJ9LyR7c3BvdGlmeS50cmFja2lkPy5zcGxpdChcIi9cIikucG9wKCl9LnBuZ2AsXG5cdFx0KTtcblx0XHRHaW8uRmlsZS5uZXdfZm9yX3BhdGgoY292ZXIpLmNvcHkoXG5cdFx0XHRkZXN0RmlsZSxcblx0XHRcdEdpby5GaWxlQ29weUZsYWdzLk9WRVJXUklURSxcblx0XHRcdG51bGwsXG5cdFx0XHRudWxsLFxuXHRcdCk7XG5cdH1cblxuXHRmdW5jdGlvbiBoYW5kbGVNZWRpYVNjcm9sbChcblx0XHRfZXZlbnQ6IEd0ay5FdmVudENvbnRyb2xsZXJTY3JvbGwsXG5cdFx0X2RlbHRhWDogbnVtYmVyLFxuXHRcdGRlbHRhWTogbnVtYmVyLFxuXHQpIHtcblx0XHRpZiAoIXNwb3RpZnkuYXZhaWxhYmxlKSByZXR1cm47XG5cblx0XHRpZiAoZGVsdGFZIDwgMCkge1xuXHRcdFx0c3BvdGlmeS5zZXRfdm9sdW1lKFxuXHRcdFx0XHRzcG90aWZ5LnZvbHVtZSArXG5cdFx0XHRcdFx0KGNvbmZpZy5nZXQoKS52b2x1bWVTdGVwPy5tZWRpYSA/P1xuXHRcdFx0XHRcdFx0ZGVmYXVsdENvbmZpZy52b2x1bWVTdGVwLm1lZGlhKSxcblx0XHRcdCk7XG5cdFx0fSBlbHNlIGlmIChkZWx0YVkgPiAwKSB7XG5cdFx0XHRzcG90aWZ5Py5zZXRfdm9sdW1lKFxuXHRcdFx0XHRzcG90aWZ5LnZvbHVtZSAtXG5cdFx0XHRcdFx0KGNvbmZpZy5nZXQoKS52b2x1bWVTdGVwPy5tZWRpYSA/P1xuXHRcdFx0XHRcdFx0ZGVmYXVsdENvbmZpZy52b2x1bWVTdGVwLm1lZGlhKSxcblx0XHRcdCk7XG5cdFx0fVxuXHR9XG5cblx0ZnVuY3Rpb24gaGFuZGxlTWVkaWFMZWZ0Q2xpY2soKSB7XG5cdFx0aWYgKCFzcG90aWZ5LmF2YWlsYWJsZSkgcmV0dXJuO1xuXG5cdFx0c3BvdGlmeS5wbGF5X3BhdXNlKCk7XG5cdH1cblxuXHRmdW5jdGlvbiBoYW5kbGVNZWRpYVJpZ2h0Q2xpY2soKSB7XG5cdFx0aWYgKCFzcG90aWZ5LmF2YWlsYWJsZSkgcmV0dXJuO1xuXG5cdFx0ZXhlY0FzeW5jKGB3bC1jb3B5ICR7c3BvdGlmeS50cmFja2lkLnNwbGl0KFwiL1wiKS5wb3AoKX1gKTtcblx0XHRleGVjQXN5bmMoXG5cdFx0XHRgbm90aWZ5LXNlbmQgXCJTdGVmIFNoZWxsIE1lZGlhXCIgXCJUaGUgdHJhY2sgSUQgb2YgdGhlIHNvbmcgaGFzIGJlZW4gY29waWVkXCJgLFxuXHRcdCk7XG5cdH1cblxuXHRmdW5jdGlvbiBoYW5kbGVNZWRpYU1pZGRsZUNsaWNrKCkge1xuXHRcdGlmICghc3BvdGlmeS5hdmFpbGFibGUpIHJldHVybjtcblxuXHRcdHNwb3RpZnkucmFpc2UoKTtcblx0fVxuXG5cdGZ1bmN0aW9uIGhhbmRsZUx5cmljc0xlZnRDbGljaygpIHtcblx0XHRjb25zdCBzb25nRGF0YSA9IHNvbmcuZ2V0KCk7XG5cblx0XHRpZiAoIXNvbmdEYXRhKSByZXR1cm47XG5cblx0XHRjb25zdCBseXJpY3MgPSBjb252ZXJ0VG9McmMoc29uZ0RhdGEpO1xuXG5cdFx0aWYgKCFseXJpY3MpIHJldHVybjtcblxuXHRcdGNvbnN0IHBhdGggPSBgL3RtcC9seXJpY3MubHJjYDtcblxuXHRcdGlmIChmaWxlRXhpc3RzKHBhdGgpKSB7XG5cdFx0XHRHaW8uRmlsZS5uZXdfZm9yX3BhdGgocGF0aCkuZGVsZXRlKG51bGwpO1xuXHRcdH1cblxuXHRcdHdyaXRlRmlsZShwYXRoLCBseXJpY3MpO1xuXG5cdFx0ZXhlY0FzeW5jKGB4ZGctb3BlbiBcIiR7cGF0aH1cImApO1xuXHR9XG5cblx0ZnVuY3Rpb24gaGFuZGxlTHlyaWNzTWlkZGxlQ2xpY2soKSB7XG5cdFx0Y29uc3Qgc29uZ0RhdGEgPSBzb25nLmdldCgpO1xuXG5cdFx0aWYgKCFzb25nRGF0YSkgcmV0dXJuO1xuXG5cdFx0Y29uc3QgbHlyaWNzID0gY29udmVydFRvTHJjKHNvbmdEYXRhKTtcblxuXHRcdGlmICghbHlyaWNzKSByZXR1cm47XG5cblx0XHRjb25zdCBwYXRoID0gYCR7Y29uZmlnLmdldCgpLnBhdGhzPy5zYXZlRm9sZGVyID8/IGRlZmF1bHRDb25maWcucGF0aHMuc2F2ZUZvbGRlcn0vJHtzb25nRGF0YS50cmFja0lkLnNwbGl0KFwiL1wiKS5wb3AoKX0ubHJjYDtcblxuXHRcdGlmIChcblx0XHRcdCFmaWxlRXhpc3RzKFxuXHRcdFx0XHRjb25maWcuZ2V0KCkucGF0aHM/LnNhdmVGb2xkZXIgPz9cblx0XHRcdFx0XHRkZWZhdWx0Q29uZmlnLnBhdGhzLnNhdmVGb2xkZXIsXG5cdFx0XHRcdHRydWUsXG5cdFx0XHQpXG5cdFx0KVxuXHRcdFx0R2lvLkZpbGUubmV3X2Zvcl9wYXRoKFxuXHRcdFx0XHRjb25maWcuZ2V0KCkucGF0aHM/LnNhdmVGb2xkZXIgPz9cblx0XHRcdFx0XHRkZWZhdWx0Q29uZmlnLnBhdGhzLnNhdmVGb2xkZXIsXG5cdFx0XHQpLm1ha2VfZGlyZWN0b3J5X3dpdGhfcGFyZW50cyhudWxsKTtcblxuXHRcdGlmIChmaWxlRXhpc3RzKHBhdGgpKSB7XG5cdFx0XHRHaW8uRmlsZS5uZXdfZm9yX3BhdGgocGF0aCkuZGVsZXRlKG51bGwpO1xuXHRcdH1cblxuXHRcdHdyaXRlRmlsZShwYXRoLCBseXJpY3MpO1xuXG5cdFx0ZXhlY0FzeW5jKGB4ZGctb3BlbiBcIiR7cGF0aH1cImApO1xuXHR9XG5cblx0cmV0dXJuIChcblx0XHQ8Ym94IGNsYXNzPXtjbGFzc05hbWV9PlxuXHRcdFx0PGJveCBjdXJzb3I9e0dkay5DdXJzb3IubmV3X2Zyb21fbmFtZShcInBvaW50ZXJcIiwgbnVsbCl9PlxuXHRcdFx0XHQ8aW1hZ2Vcblx0XHRcdFx0XHRjbGFzcz17Y292ZXJDbGFzc31cblx0XHRcdFx0XHR2YWxpZ249e0d0ay5BbGlnbi5DRU5URVJ9XG5cdFx0XHRcdFx0dmlzaWJsZT17Y292ZXJWaXNpYmxlU3RhdGV9XG5cdFx0XHRcdFx0ZmlsZT17Y292ZXJBcnR9XG5cdFx0XHRcdFx0b3ZlcmZsb3c9e0d0ay5PdmVyZmxvdy5ISURERU59XG5cdFx0XHRcdC8+XG5cblx0XHRcdFx0PEd0ay5HZXN0dXJlQ2xpY2tcblx0XHRcdFx0XHRidXR0b249e0dkay5CVVRUT05fUFJJTUFSWX1cblx0XHRcdFx0XHRvblByZXNzZWQ9e2hhbmRsZUljb25MZWZ0Q2xpY2t9XG5cdFx0XHRcdC8+XG5cblx0XHRcdFx0PEd0ay5HZXN0dXJlQ2xpY2tcblx0XHRcdFx0XHRidXR0b249e0dkay5CVVRUT05fTUlERExFfVxuXHRcdFx0XHRcdG9uUHJlc3NlZD17aGFuZGxlSWNvbk1pZGRsZUNsaWNrfVxuXHRcdFx0XHQvPlxuXHRcdFx0PC9ib3g+XG5cblx0XHRcdDxib3hcblx0XHRcdFx0Y2xhc3M9e21lZGlhQ2xhc3N9XG5cdFx0XHRcdGN1cnNvcj17YXZhaWxhYmxlKChpc0F2YWlsYWJsZSkgPT5cblx0XHRcdFx0XHRpc0F2YWlsYWJsZVxuXHRcdFx0XHRcdFx0PyBHZGsuQ3Vyc29yLm5ld19mcm9tX25hbWUoXCJwb2ludGVyXCIsIG51bGwpXG5cdFx0XHRcdFx0XHQ6IEdkay5DdXJzb3IubmV3X2Zyb21fbmFtZShcImRlZmF1bHRcIiwgbnVsbCksXG5cdFx0XHRcdCl9XG5cdFx0XHRcdGhhc1Rvb2x0aXA9e21haW5NZXRhZGF0YSh0cmFuc2Zvcm1NZWRpYUhhc1Rvb2x0aXApfVxuXHRcdFx0XHRvblF1ZXJ5VG9vbHRpcD17KF9sYWJlbCwgX3gsIF95LCBfa2V5Ym9hcmRNb2RlLCB0b29sdGlwKSA9PiB7XG5cdFx0XHRcdFx0aWYgKG1lZGlhRGlzcG9zZSkgbWVkaWFEaXNwb3NlKCk7XG5cblx0XHRcdFx0XHRjcmVhdGVSb290KChkaXNwb3NlKSA9PiB7XG5cdFx0XHRcdFx0XHRtZWRpYURpc3Bvc2UgPSBkaXNwb3NlO1xuXG5cdFx0XHRcdFx0XHR0b29sdGlwLnNldF9jdXN0b20oXG5cdFx0XHRcdFx0XHRcdGpzeChHdGsuTGFiZWwsIHtcblx0XHRcdFx0XHRcdFx0XHRqdXN0aWZ5OiBHdGsuSnVzdGlmaWNhdGlvbi5DRU5URVIsXG5cdFx0XHRcdFx0XHRcdFx0dXNlTWFya3VwOiB0cnVlLFxuXHRcdFx0XHRcdFx0XHRcdGxhYmVsOiBtYWluTWV0YWRhdGEodHJhbnNmb3JtTWVkaWFUb29sdGlwKSxcblx0XHRcdFx0XHRcdFx0fSksXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdH0pO1xuXG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH19XG5cdFx0XHQ+XG5cdFx0XHRcdDxpbWFnZVxuXHRcdFx0XHRcdGljb25OYW1lPXttYWluTWV0YWRhdGEodHJhbnNmb3JtTWVkaWFJY29uKX1cblx0XHRcdFx0XHRjbGFzcz1cIm1lZGlhLWljb25cIlxuXHRcdFx0XHQvPlxuXG5cdFx0XHRcdDxsYWJlbCBsYWJlbD17bWFpbk1ldGFkYXRhKHRyYW5zZm9ybU1lZGlhTGFiZWwpfSAvPlxuXG5cdFx0XHRcdDxHdGsuRXZlbnRDb250cm9sbGVyU2Nyb2xsXG5cdFx0XHRcdFx0ZmxhZ3M9e0d0ay5FdmVudENvbnRyb2xsZXJTY3JvbGxGbGFncy5WRVJUSUNBTH1cblx0XHRcdFx0XHRvblNjcm9sbD17aGFuZGxlTWVkaWFTY3JvbGx9XG5cdFx0XHRcdC8+XG5cblx0XHRcdFx0PEd0ay5HZXN0dXJlQ2xpY2tcblx0XHRcdFx0XHRidXR0b249e0dkay5CVVRUT05fUFJJTUFSWX1cblx0XHRcdFx0XHRvblByZXNzZWQ9e2hhbmRsZU1lZGlhTGVmdENsaWNrfVxuXHRcdFx0XHQvPlxuXG5cdFx0XHRcdDxHdGsuR2VzdHVyZUNsaWNrXG5cdFx0XHRcdFx0YnV0dG9uPXtHZGsuQlVUVE9OX1NFQ09OREFSWX1cblx0XHRcdFx0XHRvblByZXNzZWQ9e2hhbmRsZU1lZGlhUmlnaHRDbGlja31cblx0XHRcdFx0Lz5cblxuXHRcdFx0XHQ8R3RrLkdlc3R1cmVDbGlja1xuXHRcdFx0XHRcdGJ1dHRvbj17R2RrLkJVVFRPTl9NSURETEV9XG5cdFx0XHRcdFx0b25QcmVzc2VkPXtoYW5kbGVNZWRpYU1pZGRsZUNsaWNrfVxuXHRcdFx0XHQvPlxuXHRcdFx0PC9ib3g+XG5cblx0XHRcdDxib3hcblx0XHRcdFx0Y2xhc3M9e2x5cmljc0NsYXNzfVxuXHRcdFx0XHRjdXJzb3I9e2x5cmljc1N0YXRlKChbc29uZ0RhdGFdKSA9PlxuXHRcdFx0XHRcdHNvbmdEYXRhPy5seXJpY3Ncblx0XHRcdFx0XHRcdD8gR2RrLkN1cnNvci5uZXdfZnJvbV9uYW1lKFwicG9pbnRlclwiLCBudWxsKVxuXHRcdFx0XHRcdFx0OiBHZGsuQ3Vyc29yLm5ld19mcm9tX25hbWUoXCJkZWZhdWx0XCIsIG51bGwpLFxuXHRcdFx0XHQpfVxuXHRcdFx0XHRoYXNUb29sdGlwPXtseXJpY3NTdGF0ZSh0cmFuc2Zvcm1MeXJpY3NIYXNUb29sdGlwKX1cblx0XHRcdFx0b25RdWVyeVRvb2x0aXA9eyhfbGFiZWwsIF94LCBfeSwgX2tleWJvYXJkTW9kZSwgdG9vbHRpcCkgPT4ge1xuXHRcdFx0XHRcdGlmIChseXJpY3NEaXNwb3NlKSBseXJpY3NEaXNwb3NlKCk7XG5cblx0XHRcdFx0XHRjcmVhdGVSb290KChkaXNwb3NlKSA9PiB7XG5cdFx0XHRcdFx0XHRseXJpY3NEaXNwb3NlID0gZGlzcG9zZTtcblxuXHRcdFx0XHRcdFx0dG9vbHRpcC5zZXRfY3VzdG9tKFxuXHRcdFx0XHRcdFx0XHRqc3goR3RrLkxhYmVsLCB7XG5cdFx0XHRcdFx0XHRcdFx0anVzdGlmeTogR3RrLkp1c3RpZmljYXRpb24uQ0VOVEVSLFxuXHRcdFx0XHRcdFx0XHRcdHVzZU1hcmt1cDogdHJ1ZSxcblx0XHRcdFx0XHRcdFx0XHRsYWJlbDogbHlyaWNzU3RhdGUodHJhbnNmb3JtTHlyaWNzVG9vbHRpcCksXG5cdFx0XHRcdFx0XHRcdH0pLFxuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHR9KTtcblxuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9fVxuXHRcdFx0PlxuXHRcdFx0XHQ8aW1hZ2UgaWNvbk5hbWU9XCJtaS1seXJpY3Mtc3ltYm9saWNcIiBjbGFzcz1cImx5cmljcy1pY29uXCIgLz5cblxuXHRcdFx0XHQ8bGFiZWwgbGFiZWw9e2x5cmljc1N0YXRlKHRyYW5zZm9ybUx5cmljc0xhYmVsKX0gLz5cblxuXHRcdFx0XHQ8R3RrLkdlc3R1cmVDbGlja1xuXHRcdFx0XHRcdGJ1dHRvbj17R2RrLkJVVFRPTl9QUklNQVJZfVxuXHRcdFx0XHRcdG9uUHJlc3NlZD17aGFuZGxlTHlyaWNzTGVmdENsaWNrfVxuXHRcdFx0XHQvPlxuXG5cdFx0XHRcdDxHdGsuR2VzdHVyZUNsaWNrXG5cdFx0XHRcdFx0YnV0dG9uPXtHZGsuQlVUVE9OX01JRERMRX1cblx0XHRcdFx0XHRvblByZXNzZWQ9e2hhbmRsZUx5cmljc01pZGRsZUNsaWNrfVxuXHRcdFx0XHQvPlxuXHRcdFx0PC9ib3g+XG5cdFx0PC9ib3g+XG5cdCk7XG59XG4iLCAiaW1wb3J0IEdMaWIgZnJvbSBcImdpOi8vR0xpYlwiXG5pbXBvcnQgR2lvIGZyb20gXCJnaTovL0dpb1wiXG5pbXBvcnQgU291cCBmcm9tIFwiZ2k6Ly9Tb3VwP3ZlcnNpb249My4wXCJcblxudHlwZSBSZXNwb25zZVR5cGUgPSBcImJhc2ljXCIgfCBcImNvcnNcIiB8IFwiZGVmYXVsdFwiIHwgXCJlcnJvclwiIHwgXCJvcGFxdWVcIiB8IFwib3BhcXVlcmVkaXJlY3RcIlxuZXhwb3J0IHR5cGUgSGVhZGVyc0luaXQgPSBIZWFkZXJzIHwgUmVjb3JkPHN0cmluZywgc3RyaW5nPiB8IFtzdHJpbmcsIHN0cmluZ11bXVxuZXhwb3J0IHR5cGUgUmVzcG9uc2VJbml0ID0ge1xuICAgIGhlYWRlcnM/OiBIZWFkZXJzSW5pdFxuICAgIHN0YXR1cz86IG51bWJlclxuICAgIHN0YXR1c1RleHQ/OiBzdHJpbmdcbn1cbmV4cG9ydCB0eXBlIFJlcXVlc3RJbml0ID0ge1xuICAgIGJvZHk/OiBzdHJpbmdcbiAgICBoZWFkZXJzPzogSGVhZGVyc0luaXRcbiAgICBtZXRob2Q/OiBzdHJpbmdcbiAgICBmbGFncz86IFNvdXAuTWVzc2FnZUZsYWdzXG59XG5cbmV4cG9ydCBjbGFzcyBIZWFkZXJzIHtcbiAgICBwcml2YXRlIGhlYWRlcnM6IE1hcDxzdHJpbmcsIHN0cmluZ1tdPiA9IG5ldyBNYXAoKVxuXG4gICAgY29uc3RydWN0b3IoaW5pdDogSGVhZGVyc0luaXQgPSB7fSkge1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShpbml0KSkge1xuICAgICAgICAgICAgZm9yIChjb25zdCBbbmFtZSwgdmFsdWVdIG9mIGluaXQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFwcGVuZChuYW1lLCB2YWx1ZSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChpbml0IGluc3RhbmNlb2YgSGVhZGVycykge1xuICAgICAgICAgICAgaW5pdC5mb3JFYWNoKCh2YWx1ZSwgbmFtZSkgPT4gdGhpcy5zZXQobmFtZSwgdmFsdWUpKVxuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBpbml0ID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IG5hbWUgaW4gaW5pdCkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0KG5hbWUsIGluaXRbbmFtZV0pXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhcHBlbmQobmFtZTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIG5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKClcbiAgICAgICAgaWYgKCF0aGlzLmhlYWRlcnMuaGFzKG5hbWUpKSB7XG4gICAgICAgICAgICB0aGlzLmhlYWRlcnMuc2V0KG5hbWUsIFtdKVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuaGVhZGVycy5nZXQobmFtZSkhLnB1c2godmFsdWUpXG4gICAgfVxuXG4gICAgZGVsZXRlKG5hbWU6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICB0aGlzLmhlYWRlcnMuZGVsZXRlKG5hbWUudG9Mb3dlckNhc2UoKSlcbiAgICB9XG5cbiAgICBnZXQobmFtZTogc3RyaW5nKTogc3RyaW5nIHwgbnVsbCB7XG4gICAgICAgIGNvbnN0IHZhbHVlcyA9IHRoaXMuaGVhZGVycy5nZXQobmFtZS50b0xvd2VyQ2FzZSgpKVxuICAgICAgICByZXR1cm4gdmFsdWVzID8gdmFsdWVzLmpvaW4oXCIsIFwiKSA6IG51bGxcbiAgICB9XG5cbiAgICBnZXRBbGwobmFtZTogc3RyaW5nKTogc3RyaW5nW10ge1xuICAgICAgICByZXR1cm4gdGhpcy5oZWFkZXJzLmdldChuYW1lLnRvTG93ZXJDYXNlKCkpIHx8IFtdXG4gICAgfVxuXG4gICAgaGFzKG5hbWU6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5oZWFkZXJzLmhhcyhuYW1lLnRvTG93ZXJDYXNlKCkpXG4gICAgfVxuXG4gICAgc2V0KG5hbWU6IHN0cmluZywgdmFsdWU6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICB0aGlzLmhlYWRlcnMuc2V0KG5hbWUudG9Mb3dlckNhc2UoKSwgW3ZhbHVlXSlcbiAgICB9XG5cbiAgICBmb3JFYWNoKFxuICAgICAgICBjYWxsYmFja2ZuOiAodmFsdWU6IHN0cmluZywgbmFtZTogc3RyaW5nLCBwYXJlbnQ6IEhlYWRlcnMpID0+IHZvaWQsXG4gICAgICAgIHRoaXNBcmc/OiBhbnksXG4gICAgKTogdm9pZCB7XG4gICAgICAgIGZvciAoY29uc3QgW25hbWUsIHZhbHVlc10gb2YgdGhpcy5oZWFkZXJzLmVudHJpZXMoKSkge1xuICAgICAgICAgICAgY2FsbGJhY2tmbi5jYWxsKHRoaXNBcmcsIHZhbHVlcy5qb2luKFwiLCBcIiksIG5hbWUsIHRoaXMpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAqZW50cmllcygpOiBJdGVyYWJsZUl0ZXJhdG9yPFtzdHJpbmcsIHN0cmluZ10+IHtcbiAgICAgICAgZm9yIChjb25zdCBbbmFtZSwgdmFsdWVzXSBvZiB0aGlzLmhlYWRlcnMuZW50cmllcygpKSB7XG4gICAgICAgICAgICB5aWVsZCBbbmFtZSwgdmFsdWVzLmpvaW4oXCIsIFwiKV1cbiAgICAgICAgfVxuICAgIH1cblxuICAgICprZXlzKCk6IEl0ZXJhYmxlSXRlcmF0b3I8c3RyaW5nPiB7XG4gICAgICAgIGZvciAoY29uc3QgbmFtZSBvZiB0aGlzLmhlYWRlcnMua2V5cygpKSB7XG4gICAgICAgICAgICB5aWVsZCBuYW1lXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAqdmFsdWVzKCk6IEl0ZXJhYmxlSXRlcmF0b3I8c3RyaW5nPiB7XG4gICAgICAgIGZvciAoY29uc3QgdmFsdWVzIG9mIHRoaXMuaGVhZGVycy52YWx1ZXMoKSkge1xuICAgICAgICAgICAgeWllbGQgdmFsdWVzLmpvaW4oXCIsIFwiKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgW1N5bWJvbC5pdGVyYXRvcl0oKTogSXRlcmFibGVJdGVyYXRvcjxbc3RyaW5nLCBzdHJpbmddPiB7XG4gICAgICAgIHJldHVybiB0aGlzLmVudHJpZXMoKVxuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIFVSTFNlYXJjaFBhcmFtcyB7XG4gICAgcHJpdmF0ZSBwYXJhbXMgPSBuZXcgTWFwPHN0cmluZywgQXJyYXk8c3RyaW5nPj4oKVxuXG4gICAgY29uc3RydWN0b3IoaW5pdDogc3RyaW5nW11bXSB8IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gfCBzdHJpbmcgfCBVUkxTZWFyY2hQYXJhbXMgPSBcIlwiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaW5pdCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgdGhpcy5wYXJzZVN0cmluZyhpbml0KVxuICAgICAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoaW5pdCkpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIGluaXQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFwcGVuZChrZXksIHZhbHVlKVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGluaXQgaW5zdGFuY2VvZiBVUkxTZWFyY2hQYXJhbXMpIHtcbiAgICAgICAgICAgIGluaXQuZm9yRWFjaCgodmFsdWUsIGtleSkgPT4gdGhpcy5hcHBlbmQoa2V5LCB2YWx1ZSkpXG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGluaXQgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIGluaXQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldChrZXksIGluaXRba2V5XSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgcGFyc2VTdHJpbmcocXVlcnk6IHN0cmluZykge1xuICAgICAgICBxdWVyeVxuICAgICAgICAgICAgLnJlcGxhY2UoL15cXD8vLCBcIlwiKVxuICAgICAgICAgICAgLnNwbGl0KFwiJlwiKVxuICAgICAgICAgICAgLmZvckVhY2goKHBhaXIpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIXBhaXIpIHJldHVyblxuICAgICAgICAgICAgICAgIGNvbnN0IFtrZXksIHZhbHVlXSA9IHBhaXIuc3BsaXQoXCI9XCIpLm1hcChkZWNvZGVVUklDb21wb25lbnQpXG4gICAgICAgICAgICAgICAgdGhpcy5hcHBlbmQoa2V5LCB2YWx1ZSA/PyBcIlwiKVxuICAgICAgICAgICAgfSlcbiAgICB9XG5cbiAgICBnZXQgc2l6ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyYW1zLnNpemVcbiAgICB9XG5cbiAgICBhcHBlbmQobmFtZTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIGlmICghdGhpcy5wYXJhbXMuaGFzKG5hbWUpKSB7XG4gICAgICAgICAgICB0aGlzLnBhcmFtcy5zZXQobmFtZSwgW10pXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wYXJhbXMuZ2V0KG5hbWUpIS5wdXNoKHZhbHVlKVxuICAgIH1cblxuICAgIGRlbGV0ZShuYW1lOiBzdHJpbmcsIHZhbHVlPzogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLnBhcmFtcy5kZWxldGUobmFtZSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlcyA9IHRoaXMucGFyYW1zLmdldChuYW1lKSB8fCBbXVxuICAgICAgICAgICAgdGhpcy5wYXJhbXMuc2V0KFxuICAgICAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICAgICAgdmFsdWVzLmZpbHRlcigodikgPT4gdiAhPT0gdmFsdWUpLFxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgaWYgKHRoaXMucGFyYW1zLmdldChuYW1lKSEubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wYXJhbXMuZGVsZXRlKG5hbWUpXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXQobmFtZTogc3RyaW5nKTogc3RyaW5nIHwgbnVsbCB7XG4gICAgICAgIGNvbnN0IHZhbHVlcyA9IHRoaXMucGFyYW1zLmdldChuYW1lKVxuICAgICAgICByZXR1cm4gdmFsdWVzID8gdmFsdWVzWzBdIDogbnVsbFxuICAgIH1cblxuICAgIGdldEFsbChuYW1lOiBzdHJpbmcpOiBBcnJheTxzdHJpbmc+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyYW1zLmdldChuYW1lKSB8fCBbXVxuICAgIH1cblxuICAgIGhhcyhuYW1lOiBzdHJpbmcsIHZhbHVlPzogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgICAgIGlmICghdGhpcy5wYXJhbXMuaGFzKG5hbWUpKSByZXR1cm4gZmFsc2VcbiAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHJldHVybiB0cnVlXG4gICAgICAgIHJldHVybiB0aGlzLnBhcmFtcy5nZXQobmFtZSk/LmluY2x1ZGVzKHZhbHVlKSB8fCBmYWxzZVxuICAgIH1cblxuICAgIHNldChuYW1lOiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5wYXJhbXMuc2V0KG5hbWUsIFt2YWx1ZV0pXG4gICAgfVxuXG4gICAgc29ydCgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5wYXJhbXMgPSBuZXcgTWFwKFsuLi50aGlzLnBhcmFtcy5lbnRyaWVzKCldLnNvcnQoKSlcbiAgICB9XG5cbiAgICB0b1N0cmluZygpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gWy4uLnRoaXMucGFyYW1zLmVudHJpZXMoKV1cbiAgICAgICAgICAgIC5mbGF0TWFwKChba2V5LCB2YWx1ZXNdKSA9PlxuICAgICAgICAgICAgICAgIHZhbHVlcy5tYXAoKHZhbHVlKSA9PiBgJHtlbmNvZGVVUklDb21wb25lbnQoa2V5KX09JHtlbmNvZGVVUklDb21wb25lbnQodmFsdWUpfWApLFxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgLmpvaW4oXCImXCIpXG4gICAgfVxuXG4gICAgZm9yRWFjaChcbiAgICAgICAgY2FsbGJhY2tmbjogKHZhbHVlOiBzdHJpbmcsIGtleTogc3RyaW5nLCBwYXJlbnQ6IFVSTFNlYXJjaFBhcmFtcykgPT4gdm9pZCxcbiAgICAgICAgdGhpc0FyZz86IGFueSxcbiAgICApOiB2b2lkIHtcbiAgICAgICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZXNdIG9mIHRoaXMucGFyYW1zLmVudHJpZXMoKSkge1xuICAgICAgICAgICAgZm9yIChjb25zdCB2YWx1ZSBvZiB2YWx1ZXMpIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFja2ZuLmNhbGwodGhpc0FyZywgdmFsdWUsIGtleSwgdGhpcylcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIFtTeW1ib2wuaXRlcmF0b3JdKCk6IE1hcEl0ZXJhdG9yPFtzdHJpbmcsIEFycmF5PHN0cmluZz5dPiB7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcmFtcy5lbnRyaWVzKClcbiAgICB9XG59XG5cbi8vIFRPRE86IGltcGwgc2V0dGVyc1xuZXhwb3J0IGNsYXNzIFVSTCB7XG4gICAgcmVhZG9ubHkgdXJpOiBHTGliLlVyaVxuXG4gICAgcmVhZG9ubHkgc2VhcmNoUGFyYW1zOiBVUkxTZWFyY2hQYXJhbXNcblxuICAgIGNvbnN0cnVjdG9yKHVybDogc3RyaW5nIHwgVVJMLCBiYXNlPzogc3RyaW5nIHwgVVJMKSB7XG4gICAgICAgIGlmIChiYXNlKSB7XG4gICAgICAgICAgICB1cmwgPSBHTGliLlVyaS5yZXNvbHZlX3JlbGF0aXZlKFxuICAgICAgICAgICAgICAgIGJhc2UgaW5zdGFuY2VvZiBVUkwgPyBiYXNlLnRvU3RyaW5nKCkgOiBiYXNlLFxuICAgICAgICAgICAgICAgIHVybCBpbnN0YW5jZW9mIFVSTCA/IHVybC50b1N0cmluZygpIDogdXJsLFxuICAgICAgICAgICAgICAgIEdMaWIuVXJpRmxhZ3MuSEFTX1BBU1NXT1JEIHwgR0xpYi5VcmlGbGFncy5FTkNPREVELFxuICAgICAgICAgICAgKVxuICAgICAgICB9XG4gICAgICAgIHRoaXMudXJpID0gR0xpYi5VcmkucGFyc2UoXG4gICAgICAgICAgICB1cmwgaW5zdGFuY2VvZiBVUkwgPyB1cmwudG9TdHJpbmcoKSA6IHVybCxcbiAgICAgICAgICAgIEdMaWIuVXJpRmxhZ3MuSEFTX1BBU1NXT1JEIHwgR0xpYi5VcmlGbGFncy5FTkNPREVELFxuICAgICAgICApXG4gICAgICAgIHRoaXMuc2VhcmNoUGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyh0aGlzLnVyaS5nZXRfcXVlcnkoKSA/PyBcIlwiKVxuICAgIH1cblxuICAgIGdldCBocmVmKCk6IHN0cmluZyB7XG4gICAgICAgIGNvbnN0IHVyaSA9IEdMaWIuVXJpLmJ1aWxkX3dpdGhfdXNlcihcbiAgICAgICAgICAgIEdMaWIuVXJpRmxhZ3MuSEFTX1BBU1NXT1JEIHwgR0xpYi5VcmlGbGFncy5FTkNPREVELFxuICAgICAgICAgICAgdGhpcy51cmkuZ2V0X3NjaGVtZSgpLFxuICAgICAgICAgICAgdGhpcy51cmkuZ2V0X3VzZXIoKSxcbiAgICAgICAgICAgIHRoaXMudXJpLmdldF9wYXNzd29yZCgpLFxuICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgIHRoaXMudXJpLmdldF9ob3N0KCksXG4gICAgICAgICAgICB0aGlzLnVyaS5nZXRfcG9ydCgpLFxuICAgICAgICAgICAgdGhpcy51cmkuZ2V0X3BhdGgoKSxcbiAgICAgICAgICAgIHRoaXMuc2VhcmNoUGFyYW1zLnRvU3RyaW5nKCksXG4gICAgICAgICAgICB0aGlzLnVyaS5nZXRfZnJhZ21lbnQoKSxcbiAgICAgICAgKVxuXG4gICAgICAgIHJldHVybiB1cmkudG9fc3RyaW5nKClcbiAgICB9XG5cbiAgICBnZXQgb3JpZ2luKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBcIm51bGxcIiAvLyBUT0RPOlxuICAgIH1cblxuICAgIGdldCBwcm90b2NvbCgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gYCR7dGhpcy51cmkuZ2V0X3NjaGVtZSgpfTpgXG4gICAgfVxuXG4gICAgZ2V0IHVzZXJuYW1lKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLnVyaS5nZXRfdXNlcigpID8/IFwiXCJcbiAgICB9XG5cbiAgICBnZXQgcGFzc3dvcmQoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudXJpLmdldF9wYXNzd29yZCgpID8/IFwiXCJcbiAgICB9XG5cbiAgICBnZXQgaG9zdCgpOiBzdHJpbmcge1xuICAgICAgICBjb25zdCBob3N0ID0gdGhpcy5ob3N0bmFtZVxuICAgICAgICBjb25zdCBwb3J0ID0gdGhpcy5wb3J0XG4gICAgICAgIHJldHVybiBob3N0ID8gaG9zdCArIChwb3J0ID8gYDoke3BvcnR9YCA6IFwiXCIpIDogXCJcIlxuICAgIH1cblxuICAgIGdldCBob3N0bmFtZSgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy51cmkuZ2V0X2hvc3QoKSA/PyBcIlwiXG4gICAgfVxuXG4gICAgZ2V0IHBvcnQoKTogc3RyaW5nIHtcbiAgICAgICAgY29uc3QgcCA9IHRoaXMudXJpLmdldF9wb3J0KClcbiAgICAgICAgcmV0dXJuIHAgPj0gMCA/IHAudG9TdHJpbmcoKSA6IFwiXCJcbiAgICB9XG5cbiAgICBnZXQgcGF0aG5hbWUoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudXJpLmdldF9wYXRoKClcbiAgICB9XG5cbiAgICBnZXQgaGFzaCgpOiBzdHJpbmcge1xuICAgICAgICBjb25zdCBmcmFnID0gdGhpcy51cmkuZ2V0X2ZyYWdtZW50KClcbiAgICAgICAgcmV0dXJuIGZyYWcgPyBgIyR7ZnJhZ31gIDogXCJcIlxuICAgIH1cblxuICAgIGdldCBzZWFyY2goKTogc3RyaW5nIHtcbiAgICAgICAgY29uc3QgcSA9IHRoaXMuc2VhcmNoUGFyYW1zLnRvU3RyaW5nKClcbiAgICAgICAgcmV0dXJuIHEgPyBgPyR7cX1gIDogXCJcIlxuICAgIH1cblxuICAgIHRvU3RyaW5nKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLmhyZWZcbiAgICB9XG5cbiAgICB0b0pTT04oKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaHJlZlxuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIFJlc3BvbnNlIHtcbiAgICByZWFkb25seSBib2R5OiBHaW8uSW5wdXRTdHJlYW0gfCBudWxsID0gbnVsbFxuICAgIHJlYWRvbmx5IGJvZHlVc2VkOiBib29sZWFuID0gZmFsc2VcblxuICAgIHJlYWRvbmx5IGhlYWRlcnM6IEhlYWRlcnNcbiAgICByZWFkb25seSBvazogYm9vbGVhblxuICAgIHJlYWRvbmx5IHJlZGlyZWN0ZWQ6IGJvb2xlYW4gPSBmYWxzZVxuICAgIHJlYWRvbmx5IHN0YXR1czogbnVtYmVyXG4gICAgcmVhZG9ubHkgc3RhdHVzVGV4dDogc3RyaW5nXG4gICAgcmVhZG9ubHkgdHlwZTogUmVzcG9uc2VUeXBlID0gXCJkZWZhdWx0XCJcbiAgICByZWFkb25seSB1cmw6IHN0cmluZyA9IFwiXCJcblxuICAgIHN0YXRpYyBlcnJvcigpOiBSZXNwb25zZSB7XG4gICAgICAgIHRocm93IEVycm9yKFwiTm90IHlldCBpbXBsZW1lbnRlZFwiKVxuICAgIH1cblxuICAgIHN0YXRpYyBqc29uKF9kYXRhOiBhbnksIF9pbml0PzogUmVzcG9uc2VJbml0KTogUmVzcG9uc2Uge1xuICAgICAgICB0aHJvdyBFcnJvcihcIk5vdCB5ZXQgaW1wbGVtZW50ZWRcIilcbiAgICB9XG5cbiAgICBzdGF0aWMgcmVkaXJlY3QoX3VybDogc3RyaW5nIHwgVVJMLCBfc3RhdHVzPzogbnVtYmVyKTogUmVzcG9uc2Uge1xuICAgICAgICB0aHJvdyBFcnJvcihcIk5vdCB5ZXQgaW1wbGVtZW50ZWRcIilcbiAgICB9XG5cbiAgICBjb25zdHJ1Y3Rvcihib2R5OiBHaW8uSW5wdXRTdHJlYW0gfCBudWxsID0gbnVsbCwgb3B0aW9uczogUmVzcG9uc2VJbml0ID0ge30pIHtcbiAgICAgICAgdGhpcy5ib2R5ID0gYm9keVxuICAgICAgICB0aGlzLmhlYWRlcnMgPSBuZXcgSGVhZGVycyhvcHRpb25zLmhlYWRlcnMgPz8ge30pXG4gICAgICAgIHRoaXMuc3RhdHVzID0gb3B0aW9ucy5zdGF0dXMgPz8gMjAwXG4gICAgICAgIHRoaXMuc3RhdHVzVGV4dCA9IG9wdGlvbnMuc3RhdHVzVGV4dCA/PyBcIlwiXG4gICAgICAgIHRoaXMub2sgPSB0aGlzLnN0YXR1cyA+PSAyMDAgJiYgdGhpcy5zdGF0dXMgPCAzMDBcbiAgICB9XG5cbiAgICBhc3luYyBibG9iKCk6IFByb21pc2U8bmV2ZXI+IHtcbiAgICAgICAgdGhyb3cgRXJyb3IoXCJOb3QgaW1wbGVtZW50ZWRcIilcbiAgICB9XG5cbiAgICBhc3luYyBieXRlcygpIHtcbiAgICAgICAgY29uc3QgeyBDTE9TRV9TT1VSQ0UsIENMT1NFX1RBUkdFVCB9ID0gR2lvLk91dHB1dFN0cmVhbVNwbGljZUZsYWdzXG4gICAgICAgIGNvbnN0IG91dHB1dFN0cmVhbSA9IEdpby5NZW1vcnlPdXRwdXRTdHJlYW0ubmV3X3Jlc2l6YWJsZSgpXG4gICAgICAgIGlmICghdGhpcy5ib2R5KSByZXR1cm4gbnVsbFxuXG4gICAgICAgIGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIG91dHB1dFN0cmVhbS5zcGxpY2VfYXN5bmMoXG4gICAgICAgICAgICAgICAgdGhpcy5ib2R5ISxcbiAgICAgICAgICAgICAgICBDTE9TRV9UQVJHRVQgfCBDTE9TRV9TT1VSQ0UsXG4gICAgICAgICAgICAgICAgR0xpYi5QUklPUklUWV9ERUZBVUxULFxuICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgKF8sIHJlcykgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShvdXRwdXRTdHJlYW0uc3BsaWNlX2ZpbmlzaChyZXMpKVxuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIClcbiAgICAgICAgfSlcblxuICAgICAgICBPYmplY3QuYXNzaWduKHRoaXMsIHsgYm9keVVzZWQ6IHRydWUgfSlcbiAgICAgICAgcmV0dXJuIG91dHB1dFN0cmVhbS5zdGVhbF9hc19ieXRlcygpXG4gICAgfVxuXG4gICAgYXN5bmMgZm9ybURhdGEoKTogUHJvbWlzZTxuZXZlcj4ge1xuICAgICAgICB0aHJvdyBFcnJvcihcIk5vdCB5ZXQgaW1wbGVtZW50ZWRcIilcbiAgICB9XG5cbiAgICBhc3luYyBhcnJheUJ1ZmZlcigpIHtcbiAgICAgICAgY29uc3QgYmxvYiA9IGF3YWl0IHRoaXMuYnl0ZXMoKVxuICAgICAgICBpZiAoIWJsb2IpIHJldHVybiBudWxsXG5cbiAgICAgICAgcmV0dXJuIGJsb2IudG9BcnJheSgpLmJ1ZmZlclxuICAgIH1cblxuICAgIGFzeW5jIHRleHQoKSB7XG4gICAgICAgIGNvbnN0IGJsb2IgPSBhd2FpdCB0aGlzLmJ5dGVzKClcbiAgICAgICAgcmV0dXJuIGJsb2IgPyBuZXcgVGV4dERlY29kZXIoKS5kZWNvZGUoYmxvYi50b0FycmF5KCkpIDogXCJcIlxuICAgIH1cblxuICAgIGFzeW5jIGpzb24oKSB7XG4gICAgICAgIGNvbnN0IHRleHQgPSBhd2FpdCB0aGlzLnRleHQoKVxuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZSh0ZXh0KVxuICAgIH1cblxuICAgIGNsb25lKCk6IFJlc3BvbnNlIHtcbiAgICAgICAgdGhyb3cgRXJyb3IoXCJOb3QgeWV0IGltcGxlbWVudGVkXCIpXG4gICAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZmV0Y2godXJsOiBzdHJpbmcgfCBVUkwsIHsgbWV0aG9kLCBoZWFkZXJzLCBib2R5LCBmbGFncyB9OiBSZXF1ZXN0SW5pdCA9IHt9KSB7XG4gICAgY29uc3Qgc2Vzc2lvbiA9IG5ldyBTb3VwLlNlc3Npb24oKVxuXG4gICAgY29uc3QgbWVzc2FnZSA9IG5ldyBTb3VwLk1lc3NhZ2Uoe1xuICAgICAgICBtZXRob2Q6IG1ldGhvZCB8fCBcIkdFVFwiLFxuICAgICAgICB1cmk6IHVybCBpbnN0YW5jZW9mIFVSTCA/IHVybC51cmkgOiBHTGliLlVyaS5wYXJzZSh1cmwsIEdMaWIuVXJpRmxhZ3MuRU5DT0RFRCksXG4gICAgfSlcbiAgICBcbiAgICBpZiAoZmxhZ3MpIG1lc3NhZ2Uuc2V0X2ZsYWdzKGZsYWdzKVxuXG4gICAgaWYgKGhlYWRlcnMpIHtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBpZiAoaGVhZGVycyBpbnN0YW5jZW9mIEhlYWRlcnMpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgW25hbWUsIHZhbHVlXSBvZiBoZWFkZXJzLmVudHJpZXMoKSkge1xuICAgICAgICAgICAgICAgIG1lc3NhZ2UucmVxdWVzdF9oZWFkZXJzLmFwcGVuZChuYW1lLCBTdHJpbmcodmFsdWUpKVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZm9yIChjb25zdCBbbmFtZSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKGhlYWRlcnMpKSB7XG4gICAgICAgICAgICAgICAgbWVzc2FnZS5yZXF1ZXN0X2hlYWRlcnMuYXBwZW5kKG5hbWUsIFN0cmluZyh2YWx1ZSkpXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGJvZHkgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgbWVzc2FnZS5zZXRfcmVxdWVzdF9ib2R5X2Zyb21fYnl0ZXMobnVsbCwgbmV3IEdMaWIuQnl0ZXMobmV3IFRleHRFbmNvZGVyKCkuZW5jb2RlKGJvZHkpKSlcbiAgICB9XG5cbiAgICBjb25zdCBpbnB1dFN0cmVhbTogR2lvLklucHV0U3RyZWFtID0gYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICBzZXNzaW9uLnNlbmRfYXN5bmMobWVzc2FnZSwgMCwgbnVsbCwgKF8sIHJlcykgPT4ge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICByZXNvbHZlKHNlc3Npb24uc2VuZF9maW5pc2gocmVzKSlcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKVxuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgIH0pXG5cbiAgICBjb25zdCByZXNwb3NlSGVhZGVycyA9IG5ldyBIZWFkZXJzKClcbiAgICBtZXNzYWdlLmdldF9yZXNwb25zZV9oZWFkZXJzKCkuZm9yZWFjaCgobmFtZSwgdmFsdWUpID0+IHJlc3Bvc2VIZWFkZXJzLmFwcGVuZChuYW1lLCB2YWx1ZSkpXG5cbiAgICByZXR1cm4gbmV3IFJlc3BvbnNlKGlucHV0U3RyZWFtLCB7XG4gICAgICAgIHN0YXR1c1RleHQ6IG1lc3NhZ2UucmVhc29uX3BocmFzZSxcbiAgICAgICAgc3RhdHVzOiBtZXNzYWdlLnN0YXR1c19jb2RlLFxuICAgICAgICBoZWFkZXJzOiByZXNwb3NlSGVhZGVycyxcbiAgICB9KVxufVxuXG5leHBvcnQgZGVmYXVsdCBmZXRjaCIsICJpbXBvcnQgeyB0b29sdGlwQ3VycmVudFNvbmcsIGx5cmljc1NvdXJjZUNvbG9yIH0gZnJvbSBcIkAvY29uc3RhbnRzL2NvbG9yc1wiO1xuaW1wb3J0IHsgZmV0Y2gsIEhlYWRlcnMsIFVSTCwgVVJMU2VhcmNoUGFyYW1zIH0gZnJvbSBcIkAvdXRpbC9mZXRjaFwiO1xuaW1wb3J0IHsgY29sb3JUZXh0LCBlc2NhcGVNYXJrdXAgfSBmcm9tIFwiQC91dGlsL3RleHRcIjtcbmltcG9ydCB7IGRlZmF1bHRDb25maWcgfSBmcm9tIFwiQC9jb25zdGFudHMvY29uZmlnXCI7XG5pbXBvcnQgeyByZWFkRmlsZSwgd3JpdGVGaWxlIH0gZnJvbSBcImFncy9maWxlXCI7XG5pbXBvcnQgeyBjcmVhdGVTdGF0ZSwgb25DbGVhbnVwIH0gZnJvbSBcImFnc1wiO1xuaW1wb3J0IHsgZmlsZUV4aXN0cyB9IGZyb20gXCJAL3V0aWwvZmlsZVwiO1xuaW1wb3J0IHR5cGUgTXByaXMgZnJvbSBcImdpOi8vQXN0YWxNcHJpc1wiO1xuaW1wb3J0IHsgY29uZmlnIH0gZnJvbSBcIkAvdXRpbC9jb25maWdcIjtcbmltcG9ydCB7IHRpbWVvdXQgfSBmcm9tIFwiYWdzL3RpbWVcIjtcbmltcG9ydCBTb3VwIGZyb20gXCJnaTovL1NvdXBcIjtcbmltcG9ydCB0eXBlIHtcblx0TXVzaXhtYXRjaFNlYXJjaFJlc3VsdCxcblx0VXNlcnRva2VuUmVzcG9uc2UsXG5cdEZvcm1hdHRlZEx5cmljcyxcblx0Rm9ybWF0dGVkTHlyaWMsXG5cdEx5cmljc091dHB1dCxcblx0UGFyc2VkTHlyaWNzLFxuXHRUb2tlbkRhdGEsXG5cdFNvbmdEYXRhLFxuXHRTb3VyY2VzLFxufSBmcm9tIFwiQC90eXBlcy9seXJpY3NcIjtcblxuY29uc3Qgc2xlZXAgPSAobXM6IG51bWJlcikgPT5cblx0bmV3IFByb21pc2UoKHJlc29sdmUpID0+IHRpbWVvdXQobXMsICgpID0+IHJlc29sdmUobnVsbCkpKTtcblxuZnVuY3Rpb24gc2F2ZU11c2l4bWF0Y2hUb2tlbih0b2tlbjogVG9rZW5EYXRhKTogdm9pZCB7XG5cdHdyaXRlRmlsZShcblx0XHRjb25maWcuZ2V0KCkucGF0aHM/Lm11c2l4bWF0Y2hUb2tlbiA/P1xuXHRcdFx0ZGVmYXVsdENvbmZpZy5wYXRocy5tdXNpeG1hdGNoVG9rZW4sXG5cdFx0SlNPTi5zdHJpbmdpZnkodG9rZW4pLFxuXHQpO1xufVxuXG5mdW5jdGlvbiBnZXRNdXNpeG1hdGNoVG9rZW4oKTogVG9rZW5EYXRhIHwgbnVsbCB7XG5cdGlmIChcblx0XHQhZmlsZUV4aXN0cyhcblx0XHRcdGNvbmZpZy5nZXQoKS5wYXRocz8ubXVzaXhtYXRjaFRva2VuID8/XG5cdFx0XHRcdGRlZmF1bHRDb25maWcucGF0aHMubXVzaXhtYXRjaFRva2VuLFxuXHRcdClcblx0KVxuXHRcdHJldHVybiBudWxsO1xuXG5cdGNvbnN0IGNvbnRlbnQgPSByZWFkRmlsZShcblx0XHRjb25maWcuZ2V0KCkucGF0aHM/Lm11c2l4bWF0Y2hUb2tlbiA/P1xuXHRcdFx0ZGVmYXVsdENvbmZpZy5wYXRocy5tdXNpeG1hdGNoVG9rZW4sXG5cdCk7XG5cblx0aWYgKCFjb250ZW50KSByZXR1cm4gbnVsbDtcblxuXHRyZXR1cm4gSlNPTi5wYXJzZShjb250ZW50KTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gZ2V0TXVzaXhtYXRjaFVzZXJ0b2tlbihcblx0Y29va2llcz86IHN0cmluZyxcbik6IFByb21pc2U8VG9rZW5EYXRhIHwgbnVsbCB8IHVuZGVmaW5lZD4ge1xuXHRjb25zdCB0b2tlbkRhdGEgPSBnZXRNdXNpeG1hdGNoVG9rZW4oKTtcblxuXHRpZiAodG9rZW5EYXRhKSByZXR1cm4gdG9rZW5EYXRhO1xuXG5cdGNvbnN0IHVybCA9IG5ldyBVUkwoXG5cdFx0XCJodHRwczovL2FwaWMtZGVza3RvcC5tdXNpeG1hdGNoLmNvbS93cy8xLjEvdG9rZW4uZ2V0P3VzZXJfbGFuZ3VhZ2U9ZW4mYXBwX2lkPXdlYi1kZXNrdG9wLWFwcC12MS4wXCIsXG5cdCk7XG5cblx0dHJ5IHtcblx0XHRjb25zdCBoZWFkZXJzID0gbmV3IEhlYWRlcnMoKTtcblxuXHRcdGlmIChjb29raWVzKSBoZWFkZXJzLmFwcGVuZChcImNvb2tpZVwiLCBjb29raWVzKTtcblxuXHRcdGNvbnN0IHJlcyA9IGF3YWl0IGZldGNoKHVybCwge1xuXHRcdFx0aGVhZGVycyxcblx0XHRcdGZsYWdzOiBTb3VwLk1lc3NhZ2VGbGFncy5OT19SRURJUkVDVCxcblx0XHR9KTtcblxuXHRcdGlmIChyZXMuc3RhdHVzID09PSAzMDEpIHtcblx0XHRcdGNvbnN0IHNldENvb2tpZSA9IHJlcy5oZWFkZXJzXG5cdFx0XHRcdC5nZXRBbGwoXCJTZXQtQ29va2llXCIpXG5cdFx0XHRcdC5tYXAoKGNvb2tpZSkgPT4gY29va2llLnNwbGl0KFwiO1wiKS5zaGlmdCgpKVxuXHRcdFx0XHQuam9pbihcIjsgXCIpO1xuXG5cdFx0XHRyZXR1cm4gYXdhaXQgZ2V0TXVzaXhtYXRjaFVzZXJ0b2tlbihzZXRDb29raWUpO1xuXHRcdH1cblxuXHRcdGlmICghcmVzLm9rKSByZXR1cm4gbnVsbDtcblxuXHRcdGNvbnN0IGRhdGEgPSAoYXdhaXQgcmVzLmpzb24oKSkgYXMgVXNlcnRva2VuUmVzcG9uc2U7XG5cblx0XHRpZiAoXG5cdFx0XHQhZGF0YS5tZXNzYWdlLmJvZHkgfHxcblx0XHRcdChkYXRhLm1lc3NhZ2UuaGVhZGVyLnN0YXR1c19jb2RlID09PSA0MDEgJiZcblx0XHRcdFx0ZGF0YS5tZXNzYWdlLmhlYWRlci5oaW50ID09PSBcImNhcHRjaGFcIilcblx0XHQpIHtcblx0XHRcdGF3YWl0IHNsZWVwKDEwMDAwKTtcblxuXHRcdFx0cmV0dXJuIGF3YWl0IGdldE11c2l4bWF0Y2hVc2VydG9rZW4oY29va2llcyk7XG5cdFx0fVxuXG5cdFx0Y29uc3QgdXNlcnRva2VuID0gZGF0YS5tZXNzYWdlLmJvZHkudXNlcl90b2tlbjtcblxuXHRcdGlmICghdXNlcnRva2VuKSByZXR1cm4gbnVsbDtcblxuXHRcdGNvbnN0IGpzb246IFRva2VuRGF0YSA9IHtcblx0XHRcdGNvb2tpZXMsXG5cdFx0XHR1c2VydG9rZW4sXG5cdFx0XHRleHBpcmVzQXQ6IG5ldyBEYXRlKERhdGUubm93KCkgKyAxMCAqIDYwICogMTAwMCkuZ2V0VGltZSgpLCAvLyAxMCBtaW51dGVzXG5cdFx0fTtcblxuXHRcdHNhdmVNdXNpeG1hdGNoVG9rZW4oanNvbik7XG5cblx0XHRyZXR1cm4ganNvbjtcblx0fSBjYXRjaCAoX2UpIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxufVxuXG5hc3luYyBmdW5jdGlvbiBfc2VhcmNoTHlyaWNzTXVzaXhtYXRjaChcblx0cGxheWVyOiBNcHJpcy5QbGF5ZXIsXG5cdHRva2VuRGF0YTogVG9rZW5EYXRhLFxuKTogUHJvbWlzZTxNdXNpeG1hdGNoU2VhcmNoUmVzdWx0IHwgbnVsbD4ge1xuXHRpZiAoIXBsYXllci5hdmFpbGFibGUgfHwgIXRva2VuRGF0YSkgcmV0dXJuIG51bGw7XG5cblx0Y29uc3QgZHVyYXRpb24gPSBwbGF5ZXIubGVuZ3RoIC8gMTAwMDtcblxuXHRjb25zdCBzZWFyY2hQYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKHtcblx0XHRhcHBfaWQ6IFwid2ViLWRlc2t0b3AtYXBwLXYxLjBcIixcblx0XHR1c2VydG9rZW46IHRva2VuRGF0YS51c2VydG9rZW4sXG5cdFx0cV90cmFjazogcGxheWVyLnRpdGxlLFxuXHRcdHFfYXJ0aXN0OiBwbGF5ZXIuYXJ0aXN0LFxuXHRcdHFfYWxidW06IHBsYXllci5hbGJ1bSxcblx0XHRwYWdlX3NpemU6IFwiMjBcIixcblx0XHRwYWdlOiBcIjFcIixcblx0XHRxX2R1cmF0aW9uOiBkdXJhdGlvbi50b1N0cmluZygpLFxuXHRcdHNfdHJhY2tfcmF0aW5nOiBcImFzY1wiLFxuXHR9KTtcblxuXHRjb25zdCB1cmwgPSBuZXcgVVJMKFxuXHRcdGBodHRwczovL2FwaWMtZGVza3RvcC5tdXNpeG1hdGNoLmNvbS93cy8xLjEvdHJhY2suc2VhcmNoPyR7c2VhcmNoUGFyYW1zfWAsXG5cdCk7XG5cblx0dHJ5IHtcblx0XHRjb25zdCByZXMgPSBhd2FpdCBmZXRjaCh1cmwsIHtcblx0XHRcdGhlYWRlcnM6IHtcblx0XHRcdFx0Y29va2llOiB0b2tlbkRhdGEuY29va2llcyB8fCBcIlwiLFxuXHRcdFx0fSxcblx0XHR9KTtcblxuXHRcdGlmICghcmVzLm9rKSByZXR1cm4gbnVsbDtcblxuXHRcdGNvbnN0IGRhdGEgPSBhd2FpdCByZXMuanNvbigpO1xuXG5cdFx0aWYgKFxuXHRcdFx0ZGF0YT8ubWVzc2FnZT8uaGVhZGVyPy5zdGF0dXNfY29kZSA9PT0gNDAxICYmXG5cdFx0XHRkYXRhPy5tZXNzYWdlPy5oZWFkZXI/LmhpbnQgPT09IFwiY2FwdGNoYVwiXG5cdFx0KVxuXHRcdFx0cmV0dXJuIG51bGw7XG5cblx0XHRpZiAoZGF0YT8ubWVzc2FnZT8uYm9keT8udHJhY2tfbGlzdD8ubGVuZ3RoIDw9IDApIHJldHVybiBudWxsO1xuXG5cdFx0Y29uc3QgdHJhY2sgPSBkYXRhPy5tZXNzYWdlPy5ib2R5Py50cmFja19saXN0Py5maW5kKFxuXHRcdFx0KGxpc3RJdGVtOiBhbnkpID0+XG5cdFx0XHRcdGxpc3RJdGVtLnRyYWNrLnRyYWNrX25hbWU/LnRvTG93ZXJDYXNlKCkgPT09XG5cdFx0XHRcdFx0cGxheWVyLnRpdGxlLnRvTG93ZXJDYXNlKCkgJiZcblx0XHRcdFx0bGlzdEl0ZW0udHJhY2suYXJ0aXN0X25hbWVcblx0XHRcdFx0XHQ/LnRvTG93ZXJDYXNlKClcblx0XHRcdFx0XHQuaW5jbHVkZXMocGxheWVyLmFydGlzdC50b0xvd2VyQ2FzZSgpKSxcblx0XHQpO1xuXG5cdFx0aWYgKCF0cmFjaykgcmV0dXJuIG51bGw7XG5cblx0XHRjb25zdCBjb21tb25UcmFja0lkID0gdHJhY2s/LnRyYWNrPy5jb21tb250cmFja19pZDtcblx0XHRjb25zdCB0cmFja0lkID0gdHJhY2s/LnRyYWNrPy50cmFja19pZDtcblx0XHRjb25zdCBoYXNMaW5lU3luY2VkTHlyaWNzID0gdHJhY2s/LnRyYWNrPy5oYXNfc3VidGl0bGVzO1xuXG5cdFx0aWYgKCFoYXNMaW5lU3luY2VkTHlyaWNzKSByZXR1cm4gbnVsbDtcblxuXHRcdHJldHVybiB7XG5cdFx0XHRoYXNMaW5lU3luY2VkTHlyaWNzLFxuXHRcdFx0Y29tbW9uVHJhY2tJZCxcblx0XHRcdHRyYWNrSWQsXG5cdFx0fTtcblx0fSBjYXRjaCAoX2UpIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxufVxuXG5hc3luYyBmdW5jdGlvbiBfZmV0Y2hMaW5lU3luY2VkTHlyaWNzTXVzaXhtYXRjaChcblx0dG9rZW5EYXRhOiBUb2tlbkRhdGEsXG5cdGNvbW1vblRyYWNrSWQ6IHN0cmluZyxcbik6IFByb21pc2U8c3RyaW5nIHwgbnVsbD4ge1xuXHRpZiAoIXRva2VuRGF0YSB8fCAhY29tbW9uVHJhY2tJZCkgcmV0dXJuIG51bGw7XG5cblx0Y29uc3Qgc2VhcmNoUGFyYW1zOiBVUkxTZWFyY2hQYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKHtcblx0XHRhcHBfaWQ6IFwid2ViLWRlc2t0b3AtYXBwLXYxLjBcIixcblx0XHR1c2VydG9rZW46IHRva2VuRGF0YS51c2VydG9rZW4sXG5cdFx0Y29tbW9udHJhY2tfaWQ6IGNvbW1vblRyYWNrSWQsXG5cdH0pO1xuXG5cdGNvbnN0IHVybCA9IG5ldyBVUkwoXG5cdFx0YGh0dHBzOi8vYXBpYy1kZXNrdG9wLm11c2l4bWF0Y2guY29tL3dzLzEuMS90cmFjay5zdWJ0aXRsZS5nZXQ/JHtzZWFyY2hQYXJhbXN9YCxcblx0KTtcblxuXHR0cnkge1xuXHRcdGNvbnN0IHJlcyA9IGF3YWl0IGZldGNoKHVybCwge1xuXHRcdFx0aGVhZGVyczoge1xuXHRcdFx0XHRjb29raWU6IHRva2VuRGF0YS5jb29raWVzIHx8IFwiXCIsXG5cdFx0XHR9LFxuXHRcdH0pO1xuXG5cdFx0aWYgKCFyZXMub2spIHJldHVybiBudWxsO1xuXG5cdFx0Y29uc3QgZGF0YSA9IGF3YWl0IHJlcy5qc29uKCk7XG5cblx0XHRpZiAoXG5cdFx0XHRkYXRhPy5tZXNzYWdlPy5oZWFkZXI/LnN0YXR1c19jb2RlID09PSA0MDEgJiZcblx0XHRcdGRhdGE/Lm1lc3NhZ2U/LmhlYWRlcj8uaGludCA9PT0gXCJjYXB0Y2hhXCJcblx0XHQpXG5cdFx0XHRyZXR1cm4gbnVsbDtcblxuXHRcdGNvbnN0IGx5cmljcyA9IGRhdGE/Lm1lc3NhZ2U/LmJvZHk/LnN1YnRpdGxlPy5zdWJ0aXRsZV9ib2R5O1xuXG5cdFx0aWYgKCFseXJpY3MpIHJldHVybiBudWxsO1xuXG5cdFx0cmV0dXJuIGx5cmljcztcblx0fSBjYXRjaCAoX2UpIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxufVxuXG5hc3luYyBmdW5jdGlvbiBfZmV0Y2hMeXJpY3NNdXNpeG1hdGNoKFxuXHRwbGF5ZXI6IE1wcmlzLlBsYXllcixcblx0dG9rZW5EYXRhOiBUb2tlbkRhdGEsXG5cdHRyYWNrSWQ6IHN0cmluZyxcblx0Y29tbW9uVHJhY2tJZDogc3RyaW5nLFxuXHRoYXNMaW5lU3luY2VkTHlyaWNzOiBib29sZWFuLFxuKTogUHJvbWlzZTxzdHJpbmcgfCBudWxsPiB7XG5cdGlmIChcblx0XHQhcGxheWVyLmF2YWlsYWJsZSB8fFxuXHRcdCghY29tbW9uVHJhY2tJZCAmJiAhdHJhY2tJZCkgfHxcblx0XHQhdG9rZW5EYXRhIHx8XG5cdFx0IWhhc0xpbmVTeW5jZWRMeXJpY3Ncblx0KVxuXHRcdHJldHVybiBudWxsO1xuXG5cdGNvbnN0IGx5cmljc0RhdGEgPSBhd2FpdCBfZmV0Y2hMaW5lU3luY2VkTHlyaWNzTXVzaXhtYXRjaChcblx0XHR0b2tlbkRhdGEsXG5cdFx0Y29tbW9uVHJhY2tJZCxcblx0KTtcblxuXHRyZXR1cm4gbHlyaWNzRGF0YTtcbn1cblxuLypcbmFzeW5jIGZ1bmN0aW9uIF9zZWFyY2hMeXJpY3NOZXRlYXNlKFxuXHRtZXRhZGF0YTogTWV0YWRhdGEsXG4pOiBQcm9taXNlPHN0cmluZyB8IG51bGw+IHtcblx0Y29uc3Qgc2VhcmNoUGFyYW1zOiBVUkxTZWFyY2hQYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKHtcblx0XHRsaW1pdDogXCIxMFwiLFxuXHRcdHR5cGU6IFwiMVwiLFxuXHRcdGtleXdvcmRzOiBgJHttZXRhZGF0YS50cmFja30gJHttZXRhZGF0YS5hcnRpc3R9YCxcblx0fSk7XG5cblx0Y29uc3QgdXJsID0gbmV3IFVSTChcblx0XHRgaHR0cHM6Ly9tdXNpYy54aWFucWlhby53YW5nL25ldGVhc2VhcGl2Mi9zZWFyY2g/JHtzZWFyY2hQYXJhbXN9YCxcblx0KTtcblxuXHR0cnkge1xuXHRcdGNvbnN0IHJlcyA9IGF3YWl0IGZldGNoKHVybCwge1xuXHRcdFx0aGVhZGVyczoge1xuXHRcdFx0XHRcIlVzZXItQWdlbnRcIjpcblx0XHRcdFx0XHRcIk1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdpbjY0OyB4NjQ7IHJ2OjkzLjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvOTMuMFwiLFxuXHRcdFx0fSxcblx0XHR9KTtcblxuXHRcdGlmICghcmVzLm9rKSByZXR1cm4gbnVsbDtcblxuXHRcdGNvbnN0IGRhdGEgPSBhd2FpdCByZXMuanNvbigpO1xuXG5cdFx0aWYgKCFkYXRhPy5yZXN1bHQ/LnNvbmdzIHx8IGRhdGE/LnJlc3VsdD8uc29uZ3M/Lmxlbmd0aCA8PSAwKSByZXR1cm4gbnVsbDtcblxuXHRcdGNvbnN0IHRyYWNrID0gZGF0YT8ucmVzdWx0Py5zb25ncz8uZmluZChcblx0XHRcdChsaXN0SXRlbTogYW55KSA9PlxuXHRcdFx0XHRsaXN0SXRlbS5uYW1lPy50b0xvd2VyQ2FzZSgpID09PSBtZXRhZGF0YS50cmFjaz8udG9Mb3dlckNhc2UoKSAmJlxuXHRcdFx0XHQobGlzdEl0ZW0uYXJ0aXN0cy5zb21lKChhcnRpc3Q6IGFueSkgPT5cblx0XHRcdFx0XHRhcnRpc3QubmFtZT8udG9Mb3dlckNhc2UoKT8uaW5jbHVkZXMobWV0YWRhdGEuYXJ0aXN0Py50b0xvd2VyQ2FzZSgpKSxcblx0XHRcdFx0KSB8fFxuXHRcdFx0XHRcdGxpc3RJdGVtLmFydGlzdHMuc29tZSgoYXJ0aXN0OiBhbnkpID0+XG5cdFx0XHRcdFx0XHRhcnRpc3QubmFtZVxuXHRcdFx0XHRcdFx0XHQ/LnRvTG93ZXJDYXNlKClcblx0XHRcdFx0XHRcdFx0Py5yZXBsYWNlKC8tL2csIFwiIFwiKVxuXHRcdFx0XHRcdFx0XHQ/LmluY2x1ZGVzKG1ldGFkYXRhLmFydGlzdD8udG9Mb3dlckNhc2UoKT8ucmVwbGFjZSgvLS9nLCBcIiBcIikpLFxuXHRcdFx0XHRcdCkpLFxuXHRcdCk7XG5cblx0XHRpZiAoIXRyYWNrKSByZXR1cm4gbnVsbDtcblxuXHRcdGNvbnN0IHRyYWNrSWQgPSB0cmFjay5pZDtcblxuXHRcdHJldHVybiB0cmFja0lkO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cbn1cbiovXG5cbi8qXG5hc3luYyBmdW5jdGlvbiBfZmV0Y2hMeXJpY3NOZXRlYXNlKFxuXHRtZXRhZGF0YTogTWV0YWRhdGEsXG5cdHRyYWNrSWQ6IHN0cmluZyxcbik6IFByb21pc2U8c3RyaW5nIHwgbnVsbD4ge1xuXHRpZiAoIW1ldGFkYXRhIHx8ICF0cmFja0lkKSByZXR1cm4gbnVsbDtcblxuXHRjb25zdCBzZWFyY2hQYXJhbXM6IFVSTFNlYXJjaFBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoe1xuXHRcdGlkOiB0cmFja0lkLFxuXHR9KTtcblxuXHRjb25zdCB1cmwgPSBuZXcgVVJMKFxuXHRcdGBodHRwczovL211c2ljLnhpYW5xaWFvLndhbmcvbmV0ZWFzZWFwaXYyL2x5cmljPyR7c2VhcmNoUGFyYW1zfWAsXG5cdCk7XG5cblx0dHJ5IHtcblx0XHRjb25zdCByZXMgPSBhd2FpdCBmZXRjaCh1cmwsIHtcblx0XHRcdGhlYWRlcnM6IHtcblx0XHRcdFx0XCJVc2VyLUFnZW50XCI6XG5cdFx0XHRcdFx0XCJNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBXaW42NDsgeDY0OyBydjo5My4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzkzLjBcIixcblx0XHRcdH0sXG5cdFx0fSk7XG5cblx0XHRpZiAoIXJlcy5vaykgcmV0dXJuIG51bGw7XG5cblx0XHRjb25zdCBkYXRhID0gYXdhaXQgcmVzLmpzb24oKTtcblxuXHRcdGxldCBseXJpY3MgPSBkYXRhPy5scmM/Lmx5cmljO1xuXG5cdFx0aWYgKCFseXJpY3MpIHJldHVybiBudWxsO1xuXG5cdFx0bHlyaWNzID0gX3BhcnNlTmV0ZWFzZUx5cmljcyhseXJpY3MpO1xuXG5cdFx0cmV0dXJuIGx5cmljcztcblx0fSBjYXRjaCAoZSkge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG59XG4qL1xuXG4vKlxuZnVuY3Rpb24gX3BhcnNlTmV0ZWFzZUx5cmljcyhzbHlyaWNzOiBzdHJpbmcpOiBzdHJpbmcge1xuXHRjb25zdCBsaW5lcyA9IHNseXJpY3Muc3BsaXQoL1xccj9cXG4vKS5tYXAoKGxpbmUpID0+IGxpbmUudHJpbSgpKTtcblx0Y29uc3QgbHlyaWNzOiBBcnJheTxzdHJpbmc+ID0gW107XG5cblx0Y29uc3QgY3JlZGl0SW5mbzogQXJyYXk8c3RyaW5nPiA9IFtcblx0XHRcIlxcXFxzP1x1NEY1Qz9cXFxccypcdThCQ0R8XFxcXHM/XHU0RjVDP1xcXFxzKlx1NjZGMnxcXFxccz9cdTdGMTZcXFxccypcdTY2RjI/fFxcXFxzP1x1NzZEMVxcXFxzKlx1NTIzNj9cIixcblx0XHRcIi4qXHU3RjE2XHU1MTk5fC4qXHU1NDhDXHU5N0YzfC4qXHU1NDhDXHU1OEYwfC4qXHU1NDA4XHU1OEYwfC4qXHU2M0QwXHU3NDM0fC4qXHU1RjU1fC4qXHU1REU1XHU3QTBCfC4qXHU1REU1XHU0RjVDXHU1QkE0fC4qXHU4QkJFXHU4QkExfC4qXHU1MjZBXHU4RjkxfC4qXHU1MjM2XHU0RjVDfC4qXHU1M0QxXHU4ODRDfC4qXHU1MUZBXHU1NEMxfC4qXHU1NDBFXHU2NzFGfC4qXHU2REY3XHU5N0YzfC4qXHU3RjI5XHU2REY3XCIsXG5cdFx0XCJcdTUzOUZcdTU1MzF8XHU3RkZCXHU1NTMxfFx1OTg5OFx1NUI1N3xcdTY1ODdcdTY4NDh8XHU2RDc3XHU2MkE1fFx1NTNFNFx1N0I1RHxcdTRFOENcdTgwRTF8XHU5NEEyXHU3NDM0fFx1NTQwOVx1NEVENnxcdThEMURcdTY1QUZ8XHU3QjFCXHU1QjUwfFx1OUYxM3xcdTVGMjZcdTRFNTB8IFx1NEVCQVx1NThGMCBcIixcblx0XHRcImxyY3xwdWJsaXNofHZvY2FsfGd1aXRhcnxwcm9ncmFtfHByb2R1Y2V8d3JpdGV8bWl4XCIsXG5cdF07XG5cdGNvbnN0IGNyZWRpdEluZm9SZWdFeHA6IFJlZ0V4cCA9IG5ldyBSZWdFeHAoXG5cdFx0YF4oJHtjcmVkaXRJbmZvLmpvaW4oXCJ8XCIpfSkuKig6fFx1RkYxQSlgLFxuXHRcdFwiaVwiLFxuXHQpO1xuXG5cdGZvciAobGV0IGkgPSAwOyBpIDwgbGluZXMubGVuZ3RoOyBpKyspIHtcblx0XHRjb25zdCBsaW5lOiBzdHJpbmcgPSBsaW5lc1tpXTtcblx0XHRjb25zdCBtYXRjaFJlc3VsdCA9IGxpbmUubWF0Y2goLyhcXFsuKj9cXF0pfChbXlxcW1xcXV0rKS9nKTtcblxuXHRcdGlmICghbWF0Y2hSZXN1bHQgfHwgbWF0Y2hSZXN1bHQubGVuZ3RoID09PSAxKSB7XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cblx0XHRsZXQgdGV4dEluZGV4ID0gLTE7XG5cdFx0Zm9yIChsZXQgaiA9IDA7IGogPCBtYXRjaFJlc3VsdC5sZW5ndGg7IGorKykge1xuXHRcdFx0aWYgKCFtYXRjaFJlc3VsdFtqXS5lbmRzV2l0aChcIl1cIikpIHtcblx0XHRcdFx0dGV4dEluZGV4ID0gajtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0bGV0IHRleHQgPSBcIlwiO1xuXG5cdFx0aWYgKHRleHRJbmRleCA+IC0xKSB7XG5cdFx0XHR0ZXh0ID0gbWF0Y2hSZXN1bHQuc3BsaWNlKHRleHRJbmRleCwgMSlbMF07XG5cdFx0XHR0ZXh0ID0gdGV4dC5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIG5vcm1hbGl6ZSh0ZXh0LnNsaWNlKDEpKTtcblx0XHR9XG5cblx0XHRjb25zdCB0aW1lID0gbWF0Y2hSZXN1bHRbMF07XG5cblx0XHRpZiAoIWNyZWRpdEluZm9SZWdFeHAudGVzdCh0ZXh0KSkge1xuXHRcdFx0bHlyaWNzLnB1c2goYCR7dGltZX0gJHt0ZXh0IHx8IFwiXCJ9YCk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGx5cmljcy5qb2luKFwiXFxuXCIpO1xufVxuKi9cblxuYXN5bmMgZnVuY3Rpb24gZmV0Y2hMeXJpY3NMcmNsaWIoXG5cdHBsYXllcjogTXByaXMuUGxheWVyLFxuKTogUHJvbWlzZTxMeXJpY3NPdXRwdXQgfCBudWxsPiB7XG5cdGlmICghcGxheWVyLmF2YWlsYWJsZSkgcmV0dXJuIG51bGw7XG5cblx0Y29uc3Qgc2VhcmNoUGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyh7XG5cdFx0dHJhY2tfbmFtZTogcGxheWVyLnRpdGxlLFxuXHRcdGFydGlzdF9uYW1lOiBwbGF5ZXIuYXJ0aXN0LFxuXHRcdGFsYnVtX25hbWU6IHBsYXllci5hbGJ1bSxcblx0XHRxOiBwbGF5ZXIudGl0bGUsXG5cdH0pO1xuXG5cdGNvbnN0IHVybCA9IG5ldyBVUkwoYGh0dHBzOi8vbHJjbGliLm5ldC9hcGkvc2VhcmNoPyR7c2VhcmNoUGFyYW1zfWApO1xuXG5cdHRyeSB7XG5cdFx0Y29uc3QgcmVzID0gYXdhaXQgZmV0Y2godXJsLCB7XG5cdFx0XHRoZWFkZXJzOiB7XG5cdFx0XHRcdFwiTHJjbGliLUNsaWVudFwiOlxuXHRcdFx0XHRcdFwiQ3VzdG9tIExpbnV4IEJhciAoaHR0cHM6Ly9naXRodWIuY29tL1N0ZWYtMDAwMTIvYWdzLXRvcGJhcilcIixcblx0XHRcdFx0XCJVc2VyLUFnZW50XCI6XG5cdFx0XHRcdFx0XCJDdXN0b20gTGludXggQmFyIChodHRwczovL2dpdGh1Yi5jb20vU3RlZi0wMDAxMi9hZ3MtdG9wYmFyKVwiLFxuXHRcdFx0fSxcblx0XHR9KTtcblxuXHRcdGlmICghcmVzLm9rKSByZXR1cm4gbnVsbDtcblxuXHRcdGNvbnN0IGRhdGEgPSBhd2FpdCByZXMuanNvbigpO1xuXG5cdFx0Y29uc3QgbWF0Y2ggPSBkYXRhLmZpbmQoXG5cdFx0XHQoZDogYW55KSA9PlxuXHRcdFx0XHRkLmFydGlzdE5hbWVcblx0XHRcdFx0XHQ/LnRvTG93ZXJDYXNlKClcblx0XHRcdFx0XHQuaW5jbHVkZXMocGxheWVyLmFydGlzdC50b0xvd2VyQ2FzZSgpKSAmJlxuXHRcdFx0XHRkLnRyYWNrTmFtZT8udG9Mb3dlckNhc2UoKSA9PT0gcGxheWVyLnRpdGxlLnRvTG93ZXJDYXNlKCksXG5cdFx0KTtcblxuXHRcdGlmICghbWF0Y2ggfHwgIW1hdGNoLnN5bmNlZEx5cmljcyB8fCBtYXRjaC5zeW5jZWRMeXJpY3M/Lmxlbmd0aCA8PSAwKVxuXHRcdFx0cmV0dXJuIG51bGw7XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0c291cmNlOiBcImxyY2xpYi5uZXRcIixcblx0XHRcdGxpbmVTeW5jZWQ6IG1hdGNoPy5zeW5jZWRMeXJpY3MsXG5cdFx0fTtcblx0fSBjYXRjaCAoX2UpIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxufVxuXG5hc3luYyBmdW5jdGlvbiBmZXRjaEx5cmljc011c2l4bWF0Y2goXG5cdHBsYXllcjogTXByaXMuUGxheWVyLFxuKTogUHJvbWlzZTxMeXJpY3NPdXRwdXQgfCBudWxsPiB7XG5cdGlmICghcGxheWVyLmF2YWlsYWJsZSkgcmV0dXJuIG51bGw7XG5cblx0Y29uc3QgdG9rZW5EYXRhID0gYXdhaXQgZ2V0TXVzaXhtYXRjaFVzZXJ0b2tlbigpO1xuXG5cdGlmICghdG9rZW5EYXRhKSByZXR1cm4gbnVsbDtcblxuXHRjb25zdCB0cmFja0RhdGEgPSBhd2FpdCBfc2VhcmNoTHlyaWNzTXVzaXhtYXRjaChwbGF5ZXIsIHRva2VuRGF0YSk7XG5cblx0aWYgKFxuXHRcdCF0cmFja0RhdGEgfHxcblx0XHQhdHJhY2tEYXRhLmhhc0xpbmVTeW5jZWRMeXJpY3MgfHxcblx0XHQoIXRyYWNrRGF0YS5jb21tb25UcmFja0lkICYmICF0cmFja0RhdGEudHJhY2tJZClcblx0KVxuXHRcdHJldHVybiBudWxsO1xuXG5cdGNvbnN0IGx5cmljcyA9IGF3YWl0IF9mZXRjaEx5cmljc011c2l4bWF0Y2goXG5cdFx0cGxheWVyLFxuXHRcdHRva2VuRGF0YSxcblx0XHR0cmFja0RhdGEudHJhY2tJZCxcblx0XHR0cmFja0RhdGEuY29tbW9uVHJhY2tJZCxcblx0XHR0cmFja0RhdGEuaGFzTGluZVN5bmNlZEx5cmljcyxcblx0KTtcblxuXHRpZiAoIWx5cmljcykgcmV0dXJuIG51bGw7XG5cblx0cmV0dXJuIHtcblx0XHRzb3VyY2U6IFwiTXVzaXhtYXRjaFwiLFxuXHRcdGxpbmVTeW5jZWQ6IGx5cmljcyxcblx0fTtcbn1cblxuLypcbmFzeW5jIGZ1bmN0aW9uIGZldGNoTHlyaWNzTmV0ZWFzZShtZXRhZGF0YTogTWV0YWRhdGEpIHtcblx0aWYgKCFtZXRhZGF0YSkgcmV0dXJuIG51bGw7XG5cblx0Y29uc3QgdHJhY2tJZCA9IGF3YWl0IF9zZWFyY2hMeXJpY3NOZXRlYXNlKG1ldGFkYXRhKTtcblxuXHRpZiAoIXRyYWNrSWQpIHJldHVybiBudWxsO1xuXG5cdGNvbnN0IGx5cmljcyA9IGF3YWl0IF9mZXRjaEx5cmljc05ldGVhc2UobWV0YWRhdGEsIHRyYWNrSWQpO1xuXG5cdHJldHVybiB7XG5cdFx0c291cmNlOiBcIk5ldGVhc2VcIixcblx0XHRsaW5lU3luY2VkOiBseXJpY3MsXG5cdH07XG59XG4qL1xuXG5hc3luYyBmdW5jdGlvbiBfZ2V0THlyaWNzKHBsYXllcjogTXByaXMuUGxheWVyKTogUHJvbWlzZTxMeXJpY3NPdXRwdXQgfCBudWxsPiB7XG5cdGNvbnN0IGF2YWlibGVTb3VyY2VzID0ge1xuXHRcdG11c2l4bWF0Y2g6IGZldGNoTHlyaWNzTXVzaXhtYXRjaCxcblx0XHRscmNsaWI6IGZldGNoTHlyaWNzTHJjbGliLFxuXHRcdC8vIG5ldGVhc2U6IGZldGNoTHlyaWNzTmV0ZWFzZSxcblx0fTtcblxuXHRjb25zdCBzb3VyY2VzOiAoa2V5b2YgdHlwZW9mIGF2YWlibGVTb3VyY2VzKVtdID0gW1xuXHRcdFwibXVzaXhtYXRjaFwiLFxuXHRcdFwibHJjbGliXCIsXG5cdFx0Ly8gXCJuZXRlYXNlXCIsXG5cdF07XG5cblx0Zm9yIChjb25zdCBzb3VyY2Ugb2Ygc291cmNlcykge1xuXHRcdGNvbnN0IGx5cmljcyA9IGF3YWl0IGF2YWlibGVTb3VyY2VzW3NvdXJjZV0ocGxheWVyKTtcblxuXHRcdGlmICghbHlyaWNzKSBjb250aW51ZTtcblxuXHRcdGlmIChseXJpY3M/LmxpbmVTeW5jZWQpIHtcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdHNvdXJjZTogbHlyaWNzLnNvdXJjZSxcblx0XHRcdFx0bGluZVN5bmNlZDogbHlyaWNzLmxpbmVTeW5jZWQsXG5cdFx0XHR9O1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBudWxsO1xufVxuXG5hc3luYyBmdW5jdGlvbiBnZXRMeXJpY3MoXG5cdHBsYXllcjogTXByaXMuUGxheWVyLFxuKTogUHJvbWlzZTxGb3JtYXR0ZWRMeXJpY3MgfCBudWxsPiB7XG5cdGlmICghcGxheWVyLmF2YWlsYWJsZSkgcmV0dXJuIG51bGw7XG5cblx0Y29uc3QgbHlyaWNzID0gYXdhaXQgX2dldEx5cmljcyhwbGF5ZXIpO1xuXG5cdGlmICghbHlyaWNzKSByZXR1cm4gbnVsbDtcblxuXHRjb25zdCBwYXJzZWRMeXJpY3MgPSBwYXJzZUx5cmljcyhseXJpY3MubGluZVN5bmNlZCk7XG5cblx0aWYgKCFwYXJzZWRMeXJpY3MpIHJldHVybiBudWxsO1xuXG5cdHJldHVybiB7XG5cdFx0c291cmNlOiBseXJpY3Muc291cmNlLFxuXHRcdGx5cmljczogcGFyc2VkTHlyaWNzLFxuXHRcdHRyYWNrSWQ6IHBsYXllci50cmFja2lkLFxuXHR9O1xufVxuXG5mdW5jdGlvbiBwYXJzZUx5cmljcyhcblx0bHlyaWNzOiBzdHJpbmcgfCBudWxsIHwgdW5kZWZpbmVkLFxuKTogRm9ybWF0dGVkTHlyaWNbXSB8IG51bGwge1xuXHRjb25zdCBseXJpY3NTcGxpdCA9IGx5cmljcz8uc3BsaXQoXCJcXG5cIik7XG5cblx0aWYgKCFseXJpY3NTcGxpdCkgcmV0dXJuIG51bGw7XG5cblx0Y29uc3QgZm9ybWF0dGVkTHlyaWNzOiBBcnJheTxGb3JtYXR0ZWRMeXJpYz4gPSBbXTtcblx0bGV0IGxhc3RUaW1lOiBudW1iZXI7XG5cblx0Zm9yIChjb25zdCBpbmRleCBpbiBseXJpY3NTcGxpdCkge1xuXHRcdGNvbnN0IGx5cmljVGV4dCA9IGx5cmljc1NwbGl0W2luZGV4XS5zcGxpdChcIiBcIik7XG5cblx0XHQvLyBAdHMtaWdub3JlXG5cdFx0Y29uc3QgdGltZSA9IGx5cmljVGV4dC5zaGlmdCgpLnJlcGxhY2UoL1tcXFtcXF1dL2csIFwiXCIpO1xuXHRcdGNvbnN0IHRleHQgPSBseXJpY1RleHQuam9pbihcIiBcIik7XG5cblx0XHRjb25zdCBtaW51dGVzID0gdGltZS5zcGxpdChcIjpcIilbMF07XG5cdFx0Y29uc3Qgc2Vjb25kcyA9IHRpbWUuc3BsaXQoXCI6XCIpWzFdO1xuXG5cdFx0Y29uc3QgdG90YWxTZWNvbmRzID1cblx0XHRcdE51bWJlci5wYXJzZUZsb2F0KG1pbnV0ZXMpICogNjAgKyBOdW1iZXIucGFyc2VGbG9hdChzZWNvbmRzKTtcblxuXHRcdGNvbnN0IGluc3RydW1lbnRhbEx5cmljSW5kaWNhdG9yID0gXCJcdUYwMDEgXCI7XG5cblx0XHRpZiAoaW5kZXggPT09IFwiMFwiICYmIHRvdGFsU2Vjb25kcyA+IDMgJiYgaW5zdHJ1bWVudGFsTHlyaWNJbmRpY2F0b3IpIHtcblx0XHRcdGZvcm1hdHRlZEx5cmljcy5wdXNoKHtcblx0XHRcdFx0dGltZTogMCxcblx0XHRcdFx0dGV4dDogaW5zdHJ1bWVudGFsTHlyaWNJbmRpY2F0b3IsXG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRpZiAodGV4dC5sZW5ndGggPiAwKSB7XG5cdFx0XHRsYXN0VGltZSA9IHRvdGFsU2Vjb25kcztcblxuXHRcdFx0Zm9ybWF0dGVkTHlyaWNzLnB1c2goe1xuXHRcdFx0XHR0aW1lOiB0b3RhbFNlY29uZHMsXG5cdFx0XHRcdHRleHQ6IHRleHQsXG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRpZiAoXG5cdFx0XHRpbnN0cnVtZW50YWxMeXJpY0luZGljYXRvciAmJlxuXHRcdFx0Ly8gQHRzLWlnbm9yZVxuXHRcdFx0KCFsYXN0VGltZSB8fCB0b3RhbFNlY29uZHMgLSBsYXN0VGltZSA+IDMpXG5cdFx0KSB7XG5cdFx0XHRsYXN0VGltZSA9IHRvdGFsU2Vjb25kcztcblxuXHRcdFx0Zm9ybWF0dGVkTHlyaWNzLnB1c2goe1xuXHRcdFx0XHR0aW1lOiB0b3RhbFNlY29uZHMsXG5cdFx0XHRcdHRleHQ6IGluc3RydW1lbnRhbEx5cmljSW5kaWNhdG9yLFxuXHRcdFx0fSk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGZvcm1hdHRlZEx5cmljcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvbnZlcnRUb0xyYyhzb25nOiBTb25nRGF0YSk6IHN0cmluZyB8IG51bGwge1xuXHRpZiAoIXNvbmcubHlyaWNzIHx8IHNvbmcubHlyaWNzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIG51bGw7XG5cblx0Y29uc3QgbHJjTHlyaWNzID0gc29uZy5seXJpY3Ncblx0XHQubWFwKChseXJpYykgPT4ge1xuXHRcdFx0Y29uc3QgbWludXRlcyA9IE1hdGguZmxvb3IobHlyaWMudGltZSAvIDYwKVxuXHRcdFx0XHQudG9TdHJpbmcoKVxuXHRcdFx0XHQucGFkU3RhcnQoMiwgXCIwXCIpO1xuXHRcdFx0Y29uc3Qgc2Vjb25kcyA9IE1hdGguZmxvb3IobHlyaWMudGltZSAlIDYwKVxuXHRcdFx0XHQudG9TdHJpbmcoKVxuXHRcdFx0XHQucGFkU3RhcnQoMiwgXCIwXCIpO1xuXHRcdFx0Y29uc3QgbWlsbGlzZWNvbmRzID0gTWF0aC5mbG9vcigobHlyaWMudGltZSAlIDEpICogMTAwMClcblx0XHRcdFx0LnRvU3RyaW5nKClcblx0XHRcdFx0LnBhZFN0YXJ0KDMsIFwiMFwiKTtcblxuXHRcdFx0cmV0dXJuIGBbJHttaW51dGVzfToke3NlY29uZHN9LiR7bWlsbGlzZWNvbmRzfV0gJHtseXJpYy50ZXh0fWA7XG5cdFx0fSlcblx0XHQuam9pbihcIlxcblwiKTtcblxuXHRyZXR1cm4gW1xuXHRcdGAjIFRyYWNrOiAke3NvbmcudHJhY2t9YCxcblx0XHRgIyBBcnRpc3Q6ICR7c29uZy5hcnRpc3R9YCxcblx0XHRgIyBBbGJ1bTogJHtzb25nLmFsYnVtfWAsXG5cdFx0YCMgU291cmNlOiAke3Nvbmcuc291cmNlfWAsXG5cdFx0YCMgVHJhY2sgSUQ6ICR7c29uZy50cmFja0lkfWAsXG5cdFx0YGAsXG5cdFx0bHJjTHlyaWNzLFxuXHRdLmpvaW4oXCJcXG5cIik7XG59XG5cbi8qXG5mdW5jdGlvbiBub3JtYWxpemUoc3RyaW5nOiBzdHJpbmcpOiBzdHJpbmcge1xuXHRyZXR1cm4gc3RyaW5nXG5cdFx0LnJlcGxhY2UoL1x1RkYwOC9nLCBcIihcIilcblx0XHQucmVwbGFjZSgvXHVGRjA5L2csIFwiKVwiKVxuXHRcdC5yZXBsYWNlKC9cdTMwMTAvZywgXCJbXCIpXG5cdFx0LnJlcGxhY2UoL1x1MzAxMS9nLCBcIl1cIilcblx0XHQucmVwbGFjZSgvXHUzMDAyL2csIFwiLiBcIilcblx0XHQucmVwbGFjZSgvXHVGRjFCL2csIFwiOyBcIilcblx0XHQucmVwbGFjZSgvXHVGRjFBL2csIFwiOiBcIilcblx0XHQucmVwbGFjZSgvXHVGRjFGL2csIFwiPyBcIilcblx0XHQucmVwbGFjZSgvXHVGRjAxL2csIFwiISBcIilcblx0XHQucmVwbGFjZSgvXHUzMDAxfFx1RkYwQy9nLCBcIiwgXCIpXG5cdFx0LnJlcGxhY2UoL1x1MjAxOHxcdTIwMTl8XHUyMDMyfFx1RkYwNy9nLCBcIidcIilcblx0XHQucmVwbGFjZSgvXHUyMDFDfFx1MjAxRC9nLCAnXCInKVxuXHRcdC5yZXBsYWNlKC9cdTMwMUMvZywgXCJ+XCIpXG5cdFx0LnJlcGxhY2UoL1x1MDBCN3xcdTMwRkIvZywgXCJcdTIwMjJcIilcblx0XHQucmVwbGFjZSgvXFxzKy9nLCBcIiBcIilcblx0XHQudHJpbSgpO1xufVxuKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlTHlyaWNzRGF0YShcblx0bHlyaWNzOiBGb3JtYXR0ZWRMeXJpY1tdLFxuXHRwb3NpdGlvbjogbnVtYmVyLFxuXHRzb3VyY2U6IFNvdXJjZXMsXG4pOiBQYXJzZWRMeXJpY3MgfCBudWxsIHtcblx0aWYgKCFseXJpY3MgfHwgbHlyaWNzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIG51bGw7XG5cblx0bGV0IGZpcnN0THlyaWM6IHN0cmluZyB8IG51bGwgPSBudWxsO1xuXHRsZXQgbGFzdEx5cmljOiBzdHJpbmcgfCBudWxsID0gbnVsbDtcblxuXHRsZXQgZmlyc3RUaW1lc3RhbXA6IG51bWJlciB8IG51bGwgPSBudWxsO1xuXHRsZXQgbGFzdFRpbWVzdGFtcDogbnVtYmVyIHwgbnVsbCA9IG51bGw7XG5cblx0Zm9yIChjb25zdCBseXJpYyBvZiBseXJpY3MpIHtcblx0XHRjb25zdCB0aW1lc3RhbXAgPSBseXJpYy50aW1lO1xuXHRcdGNvbnN0IHRleHQgPSBseXJpYy50ZXh0O1xuXG5cdFx0aWYgKCFmaXJzdEx5cmljKSBmaXJzdEx5cmljID0gdGV4dDtcblx0XHRpZiAoIWZpcnN0VGltZXN0YW1wICYmIGZpcnN0VGltZXN0YW1wICE9PSAwKSBmaXJzdFRpbWVzdGFtcCA9IHRpbWVzdGFtcDtcblxuXHRcdGlmIChwb3NpdGlvbiA+PSB0aW1lc3RhbXApIHtcblx0XHRcdGxhc3RMeXJpYyA9IHRleHQ7XG5cdFx0XHRsYXN0VGltZXN0YW1wID0gdGltZXN0YW1wO1xuXHRcdH1cblx0fVxuXG5cdGNvbnN0IHNlYXJjaEx5cmljID0gbGFzdEx5cmljIHx8IGZpcnN0THlyaWM7XG5cdGNvbnN0IHNlYXJjaFRpbWVzdGFtcCA9IGxhc3RUaW1lc3RhbXAgfHwgZmlyc3RUaW1lc3RhbXA7XG5cblx0aWYgKCFzZWFyY2hMeXJpYykgcmV0dXJuIG51bGw7XG5cblx0bGV0IHByZXZpb3VzTGluZXNBbW91bnQgPSAwO1xuXHRsZXQgbmV4dExpbmVzQW1vdW50ID0gMDtcblxuXHRjb25zdCBjdXJyZW50THlyaWNJbmRleCA9IGx5cmljcy5maW5kSW5kZXgoXG5cdFx0KGx5cmljKSA9PiBseXJpYy50aW1lID09PSBzZWFyY2hUaW1lc3RhbXAgJiYgbHlyaWMudGV4dCA9PT0gc2VhcmNoTHlyaWMsXG5cdCk7XG5cblx0aWYgKGN1cnJlbnRMeXJpY0luZGV4ID09PSAxKSBwcmV2aW91c0xpbmVzQW1vdW50ID0gMTtcblx0ZWxzZSBpZiAoY3VycmVudEx5cmljSW5kZXggPT09IDIpIHByZXZpb3VzTGluZXNBbW91bnQgPSAyO1xuXHRlbHNlIGlmIChjdXJyZW50THlyaWNJbmRleCA+PSAzKSBwcmV2aW91c0xpbmVzQW1vdW50ID0gMztcblxuXHRpZiAoY3VycmVudEx5cmljSW5kZXggPT09IGx5cmljcy5sZW5ndGggLSAxKSBuZXh0TGluZXNBbW91bnQgPSAxO1xuXHRlbHNlIGlmIChjdXJyZW50THlyaWNJbmRleCA9PT0gbHlyaWNzLmxlbmd0aCAtIDIpIG5leHRMaW5lc0Ftb3VudCA9IDI7XG5cdGVsc2UgaWYgKGN1cnJlbnRMeXJpY0luZGV4IDw9IGx5cmljcy5sZW5ndGggLSAzKSBuZXh0TGluZXNBbW91bnQgPSAzO1xuXG5cdGNvbnN0IHByZXZpb3VzTGluZXMgPSBbLi4ubHlyaWNzXVxuXHRcdC5zcGxpY2UoY3VycmVudEx5cmljSW5kZXggLSBwcmV2aW91c0xpbmVzQW1vdW50LCBwcmV2aW91c0xpbmVzQW1vdW50KVxuXHRcdC5tYXAoKGx5cmljKSA9PiBseXJpYy50ZXh0KTtcblxuXHRjb25zdCBuZXh0TGluZXMgPSBbLi4ubHlyaWNzXVxuXHRcdC5zcGxpY2UoY3VycmVudEx5cmljSW5kZXggKyAxLCBuZXh0TGluZXNBbW91bnQpXG5cdFx0Lm1hcCgobHlyaWMpID0+IGx5cmljLnRleHQpO1xuXG5cdHJldHVybiB7XG5cdFx0cHJldmlvdXM6IHByZXZpb3VzTGluZXMsXG5cdFx0Y3VycmVudDogc2VhcmNoTHlyaWMsXG5cdFx0bmV4dDogbmV4dExpbmVzLFxuXHRcdHNvdXJjZTogc291cmNlLFxuXHR9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0THlyaWNzVG9vbHRpcChcblx0c29uZzogU29uZ0RhdGEsXG5cdGRhdGE6IFBhcnNlZEx5cmljcyxcbik6IHN0cmluZyB7XG5cdGlmICghZGF0YSkgcmV0dXJuIFwiXCI7XG5cblx0Y29uc3QgcHJldmlvdXNMeXJpY3MgPVxuXHRcdGRhdGEucHJldmlvdXMubGVuZ3RoID4gMFxuXHRcdFx0PyBgJHtlc2NhcGVNYXJrdXAoZGF0YS5wcmV2aW91cy5qb2luKFwiXFxuXCIpKX1cXG5gXG5cdFx0XHQ6IFwiXCI7XG5cblx0Y29uc3QgbmV4dEx5cmljcyA9XG5cdFx0ZGF0YS5uZXh0Lmxlbmd0aCA+IDAgPyBgXFxuJHtlc2NhcGVNYXJrdXAoZGF0YS5uZXh0LmpvaW4oXCJcXG5cIikpfWAgOiBcIlwiO1xuXG5cdGNvbnN0IHRvb2x0aXAgPSBgJHtwcmV2aW91c0x5cmljc30ke2NvbG9yVGV4dChgPGk+JHtlc2NhcGVNYXJrdXAoZGF0YS5jdXJyZW50KX08L2k+YCwgdG9vbHRpcEN1cnJlbnRTb25nKX0ke25leHRMeXJpY3N9XFxuXFxuJHtjb2xvclRleHQoYFtTb3VyY2U6ICR7c29uZy5zb3VyY2V9XWAsIGx5cmljc1NvdXJjZUNvbG9yKX1gO1xuXG5cdHJldHVybiB0b29sdGlwO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdXNlU29uZyhwbGF5ZXI6IE1wcmlzLlBsYXllcikge1xuXHRjb25zdCBbc29uZywgc2V0U29uZ10gPSBjcmVhdGVTdGF0ZTxTb25nRGF0YSB8IG51bGw+KG51bGwpO1xuXG5cdF91cGRhdGVMeXJpY3MoKTtcblxuXHRjb25zdCBpZCA9IHBsYXllci5jb25uZWN0KFwibm90aWZ5OjptZXRhZGF0YVwiLCAoKSA9PiB7XG5cdFx0aWYgKHBsYXllci50cmFja2lkID09PSBzb25nLmdldCgpPy50cmFja0lkKSByZXR1cm47XG5cblx0XHRfdXBkYXRlTHlyaWNzKCk7XG5cdH0pO1xuXG5cdG9uQ2xlYW51cCgoKSA9PiB7XG5cdFx0cGxheWVyLmRpc2Nvbm5lY3QoaWQpO1xuXHR9KTtcblxuXHRyZXR1cm4gc29uZztcblxuXHRmdW5jdGlvbiBfdXBkYXRlTHlyaWNzKCkge1xuXHRcdGlmICghcGxheWVyLnRyYWNraWQgfHwgIXBsYXllci5hdmFpbGFibGUpIHJldHVybjtcblxuXHRcdHNldFNvbmcoe1xuXHRcdFx0YXJ0aXN0OiBwbGF5ZXIuYXJ0aXN0LFxuXHRcdFx0dHJhY2s6IHBsYXllci50aXRsZSxcblx0XHRcdGFsYnVtOiBwbGF5ZXIuYWxidW0sXG5cdFx0XHR0cmFja0lkOiBwbGF5ZXIudHJhY2tpZCxcblx0XHRcdHNvdXJjZTogXCJNdXNpeG1hdGNoXCIsXG5cdFx0XHRsZW5ndGg6IHBsYXllci5sZW5ndGgsXG5cdFx0XHRjb3ZlcjogcGxheWVyLmFydFVybCxcblx0XHRcdHZvbHVtZTogcGxheWVyLnZvbHVtZSxcblx0XHRcdHBvc2l0aW9uOiBwbGF5ZXIucG9zaXRpb24sXG5cdFx0fSk7XG5cblx0XHRjb25zdCBseXJpY3NGb2xkZXIgPVxuXHRcdFx0Y29uZmlnLmdldCgpLnBhdGhzPy5seXJpY3NGb2xkZXIgPz9cblx0XHRcdGRlZmF1bHRDb25maWcucGF0aHMubHlyaWNzRm9sZGVyO1xuXG5cdFx0Y29uc3QgbHlyaWNzRmlsZSA9IGAke2x5cmljc0ZvbGRlcn0vJHtwbGF5ZXIudHJhY2tpZD8uc3BsaXQoXCIvXCIpLnBvcCgpfS5scmNgO1xuXG5cdFx0aWYgKGZpbGVFeGlzdHMobHlyaWNzRmlsZSkpIHtcblx0XHRcdGNvbnN0IGx5cmljc0RhdGEgPSByZWFkRmlsZShseXJpY3NGaWxlKTtcblxuXHRcdFx0Y29uc3QgcGFyc2VkTHlyaWNzID0gcGFyc2VMeXJpY3MobHlyaWNzRGF0YSk7XG5cblx0XHRcdGlmIChwYXJzZWRMeXJpY3MpIHtcblx0XHRcdFx0c2V0U29uZyh7XG5cdFx0XHRcdFx0YXJ0aXN0OiBwbGF5ZXIuYXJ0aXN0LFxuXHRcdFx0XHRcdHRyYWNrOiBwbGF5ZXIudGl0bGUsXG5cdFx0XHRcdFx0YWxidW06IHBsYXllci5hbGJ1bSxcblx0XHRcdFx0XHR0cmFja0lkOiBwbGF5ZXIudHJhY2tpZCxcblx0XHRcdFx0XHRzb3VyY2U6IFwiTG9jYWwgRmlsZVwiLFxuXHRcdFx0XHRcdGxlbmd0aDogcGxheWVyLmxlbmd0aCxcblx0XHRcdFx0XHRjb3ZlcjogcGxheWVyLmFydFVybCxcblx0XHRcdFx0XHR2b2x1bWU6IHBsYXllci52b2x1bWUsXG5cdFx0XHRcdFx0cG9zaXRpb246IHBsYXllci5wb3NpdGlvbixcblx0XHRcdFx0XHRseXJpY3M6IHBhcnNlZEx5cmljcyxcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Z2V0THlyaWNzKHBsYXllcikudGhlbigobHlyaWNzKSA9PiB7XG5cdFx0XHRpZiAobHlyaWNzPy50cmFja0lkICE9PSBwbGF5ZXIudHJhY2tpZCkgcmV0dXJuO1xuXG5cdFx0XHRzZXRTb25nKHtcblx0XHRcdFx0YXJ0aXN0OiBwbGF5ZXIuYXJ0aXN0LFxuXHRcdFx0XHR0cmFjazogcGxheWVyLnRpdGxlLFxuXHRcdFx0XHRhbGJ1bTogcGxheWVyLmFsYnVtLFxuXHRcdFx0XHR0cmFja0lkOiBwbGF5ZXIudHJhY2tpZCxcblx0XHRcdFx0c291cmNlOiBseXJpY3M/LnNvdXJjZSB8fCBcIk11c2l4bWF0Y2hcIixcblx0XHRcdFx0bGVuZ3RoOiBwbGF5ZXIubGVuZ3RoLFxuXHRcdFx0XHRjb3ZlcjogcGxheWVyLmFydFVybCxcblx0XHRcdFx0dm9sdW1lOiBwbGF5ZXIudm9sdW1lLFxuXHRcdFx0XHRwb3NpdGlvbjogcGxheWVyLnBvc2l0aW9uLFxuXHRcdFx0XHRseXJpY3M6IGx5cmljcz8ubHlyaWNzLFxuXHRcdFx0fSk7XG5cdFx0fSk7XG5cdH1cbn1cbiIsICJpbXBvcnQgdHlwZSB7IERpc2tTdGF0IH0gZnJvbSBcIkAvdHlwZXMvc3lzdGVtU3RhdHNcIjtcbmltcG9ydCB7IGRpc2tVc2FnZSB9IGZyb20gXCJAL3V0aWwvc3lzdGVtU3RhdHNcIjtcbmltcG9ydCB0eXBlIHsgQWNjZXNzb3IgfSBmcm9tIFwiYWdzXCI7XG5cbmludGVyZmFjZSBQcm9wcyB7XG5cdGNsYXNzPzogc3RyaW5nIHwgQWNjZXNzb3I8c3RyaW5nPjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gRGlzayh7IGNsYXNzOiBjbGFzc05hbWUgfTogUHJvcHMpIHtcblx0ZnVuY3Rpb24gdHJhbnNmb3JtTGFiZWwodXNhZ2U6IERpc2tTdGF0KSB7XG5cdFx0cmV0dXJuIGAke3VzYWdlLmF2YWlsYWJsZVNpemV9YDtcblx0fVxuXG5cdGZ1bmN0aW9uIHRyYW5zZm9ybVRvb2x0aXAodXNhZ2U6IERpc2tTdGF0KSB7XG5cdFx0cmV0dXJuIGAke3VzYWdlLnVzZWRTaXplfSB1c2VkIG91dCBvZiAke3VzYWdlLnRvdGFsU2l6ZX0gKCR7dXNhZ2UudXNhZ2VQZXJjZW50fSlgO1xuXHR9XG5cblx0cmV0dXJuIChcblx0XHQ8Ym94IGNsYXNzPXtjbGFzc05hbWV9PlxuXHRcdFx0PGltYWdlIGljb25OYW1lPVwibWktc3RvcmFnZS1zeW1ib2xpY1wiIGNsYXNzPVwiZGlzay1pY29uXCIgLz5cblxuXHRcdFx0PGxhYmVsXG5cdFx0XHRcdGxhYmVsPXtkaXNrVXNhZ2UodHJhbnNmb3JtTGFiZWwpfVxuXHRcdFx0XHR0b29sdGlwTWFya3VwPXtkaXNrVXNhZ2UodHJhbnNmb3JtVG9vbHRpcCl9XG5cdFx0XHQvPlxuXHRcdDwvYm94PlxuXHQpO1xufVxuIiwgImltcG9ydCB7IGNyZWF0ZVN0YXRlLCBXaXRoLCB0eXBlIEFjY2Vzc29yIH0gZnJvbSBcImFnc1wiO1xuaW1wb3J0IHsgY3JlYXRlUG9sbCB9IGZyb20gXCJhZ3MvdGltZVwiO1xuaW1wb3J0IHsgR2RrLCBHdGsgfSBmcm9tIFwiYWdzL2d0azRcIjtcblxuaW50ZXJmYWNlIFByb3BzIHtcblx0Y2xhc3M/OiBzdHJpbmcgfCBBY2Nlc3NvcjxzdHJpbmc+O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBUaW1lKHsgY2xhc3M6IGNsYXNzTmFtZSB9OiBQcm9wcykge1xuXHRjb25zdCBbc2hvd0FsdCwgc2V0U2hvd0FsdF0gPSBjcmVhdGVTdGF0ZTxib29sZWFuPihmYWxzZSk7XG5cdGNvbnN0IFtpc1BvcG92ZXJPcGVuLCBzZXRJc1BvcG92ZXJPcGVuXSA9IGNyZWF0ZVN0YXRlPGJvb2xlYW4+KGZhbHNlKTtcblx0bGV0IHBvcG92ZXI6IEd0ay5Qb3BvdmVyIHwgbnVsbCA9IG51bGw7XG5cblx0Ly8gRnVsbCBXZWVrZGF5IHwgRnVsbCBNb250aCB8IERheSBvZiBNb250aCB8IEZ1bGwgWWVhciB8IEhvdXJzICgxMmgpIHwgTWludXRlcyB8IEFNL1BNXG5cdGNvbnN0IGNvbW1hbmQgPSBcImRhdGUgKyclQSB8ICVCIHwgJS1kIHwgJVkgfCAlSSB8ICVNIHwgJXAnXCI7XG5cblx0Y29uc3QgdGltZURhdGEgPSBjcmVhdGVQb2xsKFwiXCIsIDEwMDAsIGNvbW1hbmQpO1xuXG5cdGZ1bmN0aW9uIHRyYW5zZm9ybUxhYmVsKHRpbWVEYXRhOiBzdHJpbmcpIHtcblx0XHRjb25zdCBbLCAsICwgLCBob3VycywgbWludXRlcywgYW1wbV0gPSB0aW1lRGF0YS5zcGxpdChcIiB8IFwiKTtcblxuXHRcdHJldHVybiBgJHtob3Vyc306JHttaW51dGVzfSAke2FtcG19YDtcblx0fVxuXG5cdGZ1bmN0aW9uIHRyYW5zZm9ybUFsdExhYmVsKHRpbWVEYXRhOiBzdHJpbmcpIHtcblx0XHRjb25zdCBbZGF5LCBtb250aCwgbW9udGhEYXksIHllYXJdID0gdGltZURhdGEuc3BsaXQoXCIgfCBcIik7XG5cblx0XHRyZXR1cm4gYCR7eWVhcn0sICR7bW9udGhEYXl9ICR7bW9udGh9LCAke2RheX1gO1xuXHR9XG5cblx0ZnVuY3Rpb24gbGVmdENsaWNrSGFuZGxlcigpIHtcblx0XHRzZXRTaG93QWx0KChwcmV2KSA9PiAhcHJldik7XG5cdH1cblxuXHRmdW5jdGlvbiByaWdodENsaWNrSGFuZGxlcigpIHtcblx0XHRpZiAocG9wb3Zlcikge1xuXHRcdFx0aWYgKGlzUG9wb3Zlck9wZW4uZ2V0KCkpIHtcblx0XHRcdFx0c2V0SXNQb3BvdmVyT3BlbihmYWxzZSk7XG5cdFx0XHRcdHBvcG92ZXIucG9wZG93bigpO1xuXHRcdFx0XHRwb3BvdmVyLnNldF9jc3NfY2xhc3Nlcyhcblx0XHRcdFx0XHRwb3BvdmVyLmNzc0NsYXNzZXMuZmlsdGVyKFxuXHRcdFx0XHRcdFx0KGNsYXNzTmFtZSkgPT4gY2xhc3NOYW1lICE9PSBcIm9wZW5cIixcblx0XHRcdFx0XHQpLFxuXHRcdFx0XHQpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0c2V0SXNQb3BvdmVyT3Blbih0cnVlKTtcblx0XHRcdFx0cG9wb3Zlci5wb3B1cCgpO1xuXHRcdFx0XHRwb3BvdmVyLnNldF9jc3NfY2xhc3NlcyhbLi4ucG9wb3Zlci5jc3NDbGFzc2VzLCBcIm9wZW5cIl0pO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiAoXG5cdFx0PGJveFxuXHRcdFx0Y2xhc3M9e2NsYXNzTmFtZX1cblx0XHRcdGN1cnNvcj17R2RrLkN1cnNvci5uZXdfZnJvbV9uYW1lKFwicG9pbnRlclwiLCBudWxsKX1cblx0XHQ+XG5cdFx0XHQ8R3RrLkdlc3R1cmVDbGlja1xuXHRcdFx0XHRidXR0b249e0dkay5CVVRUT05fUFJJTUFSWX1cblx0XHRcdFx0b25QcmVzc2VkPXtsZWZ0Q2xpY2tIYW5kbGVyfVxuXHRcdFx0Lz5cblx0XHRcdDxHdGsuR2VzdHVyZUNsaWNrXG5cdFx0XHRcdGJ1dHRvbj17R2RrLkJVVFRPTl9TRUNPTkRBUll9XG5cdFx0XHRcdG9uUHJlc3NlZD17cmlnaHRDbGlja0hhbmRsZXJ9XG5cdFx0XHQvPlxuXG5cdFx0XHQ8aW1hZ2UgaWNvbk5hbWU9XCJtaS1zY2hlZHVsZS1zeW1ib2xpY1wiIGNsYXNzPVwidGltZS1pY29uIGNsb2NrXCIgLz5cblxuXHRcdFx0PGxhYmVsIGxhYmVsPXt0aW1lRGF0YSh0cmFuc2Zvcm1MYWJlbCl9IC8+XG5cblx0XHRcdDxXaXRoIHZhbHVlPXtzaG93QWx0fT5cblx0XHRcdFx0eyhzaG93QWx0KSA9PlxuXHRcdFx0XHRcdHNob3dBbHQgJiYgKFxuXHRcdFx0XHRcdFx0PGJveD5cblx0XHRcdFx0XHRcdFx0PGltYWdlXG5cdFx0XHRcdFx0XHRcdFx0aWNvbk5hbWU9XCJtaS1jYWxlbmRhci1tb250aC1zeW1ib2xpY1wiXG5cdFx0XHRcdFx0XHRcdFx0Y2xhc3M9XCJ0aW1lLWljb24gY2FsZW5kYXJcIlxuXHRcdFx0XHRcdFx0XHQvPlxuXG5cdFx0XHRcdFx0XHRcdDxsYWJlbCBsYWJlbD17dGltZURhdGEodHJhbnNmb3JtQWx0TGFiZWwpfSAvPlxuXHRcdFx0XHRcdFx0PC9ib3g+XG5cdFx0XHRcdFx0KVxuXHRcdFx0XHR9XG5cdFx0XHQ8L1dpdGg+XG5cblx0XHRcdDxwb3BvdmVyXG5cdFx0XHRcdCQ9eyhzZWxmKSA9PiB7XG5cdFx0XHRcdFx0cG9wb3ZlciA9IHNlbGY7XG5cdFx0XHRcdH19XG5cdFx0XHRcdG9uQ2xvc2VkPXsoc2VsZikgPT4ge1xuXHRcdFx0XHRcdHNldElzUG9wb3Zlck9wZW4oZmFsc2UpO1xuXHRcdFx0XHRcdHNlbGYuc2V0X2Nzc19jbGFzc2VzKFxuXHRcdFx0XHRcdFx0c2VsZi5jc3NDbGFzc2VzLmZpbHRlcihcblx0XHRcdFx0XHRcdFx0KGNsYXNzTmFtZSkgPT4gY2xhc3NOYW1lICE9PSBcIm9wZW5cIixcblx0XHRcdFx0XHRcdCksXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0fX1cblx0XHRcdD5cblx0XHRcdFx0PEd0ay5DYWxlbmRhciBjbGFzcz1cImNhbGVuZGFyXCIgLz5cblx0XHRcdDwvcG9wb3Zlcj5cblx0XHQ8L2JveD5cblx0KTtcbn1cbiIsICJpbXBvcnQgeyB0eXBlIEFjY2Vzc29yLCBjcmVhdGVCaW5kaW5nLCBjcmVhdGVTdGF0ZSwgRm9yIH0gZnJvbSBcImFnc1wiO1xuaW1wb3J0IEFzdGFsVHJheSBmcm9tIFwiZ2k6Ly9Bc3RhbFRyYXlcIjtcbmltcG9ydCB7IEdkaywgR3RrIH0gZnJvbSBcImFncy9ndGs0XCI7XG5cbmludGVyZmFjZSBQcm9wcyB7XG5cdGNsYXNzPzogc3RyaW5nIHwgQWNjZXNzb3I8c3RyaW5nPjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gVHJheSh7IGNsYXNzOiBjbGFzc05hbWUgfTogUHJvcHMpIHtcblx0Y29uc3QgdHJheSA9IEFzdGFsVHJheS5nZXRfZGVmYXVsdCgpO1xuXG5cdGNvbnN0IHRyYXlJdGVtcyA9IGNyZWF0ZUJpbmRpbmcodHJheSwgXCJpdGVtc1wiKTtcblxuXHRsZXQgcG9wb3ZlcjogR3RrLlBvcG92ZXIgfCBudWxsID0gbnVsbDtcblx0Y29uc3QgW2lzUG9wb3Zlck9wZW4sIHNldElzUG9wb3Zlck9wZW5dID0gY3JlYXRlU3RhdGUoZmFsc2UpO1xuXG5cdGZ1bmN0aW9uIGhhbmRsZUxlZnRDbGljaygpIHtcblx0XHRpZiAocG9wb3Zlcikge1xuXHRcdFx0aWYgKGlzUG9wb3Zlck9wZW4uZ2V0KCkpIHtcblx0XHRcdFx0c2V0SXNQb3BvdmVyT3BlbihmYWxzZSk7XG5cdFx0XHRcdHBvcG92ZXIucG9wZG93bigpO1xuXHRcdFx0XHRwb3BvdmVyLnNldF9jc3NfY2xhc3Nlcyhcblx0XHRcdFx0XHRwb3BvdmVyLmNzc0NsYXNzZXMuZmlsdGVyKFxuXHRcdFx0XHRcdFx0KGNsYXNzTmFtZSkgPT4gY2xhc3NOYW1lICE9PSBcIm9wZW5cIixcblx0XHRcdFx0XHQpLFxuXHRcdFx0XHQpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cG9wb3Zlci5zZXRfc3RhdGVfZmxhZ3MoXG5cdFx0XHRcdFx0R3RrLlN0YXRlRmxhZ3MuRk9DVVNfV0lUSElOIHwgR3RrLlN0YXRlRmxhZ3MuRElSX0xUUixcblx0XHRcdFx0XHR0cnVlLFxuXHRcdFx0XHQpO1xuXHRcdFx0XHRzZXRJc1BvcG92ZXJPcGVuKHRydWUpO1xuXHRcdFx0XHRwb3BvdmVyLnBvcHVwKCk7XG5cdFx0XHRcdHBvcG92ZXIuc2V0X2Nzc19jbGFzc2VzKFsuLi5wb3BvdmVyLmNzc0NsYXNzZXMsIFwib3BlblwiXSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIChcblx0XHQ8Ym94XG5cdFx0XHRjbGFzcz17Y2xhc3NOYW1lfVxuXHRcdFx0Y3Vyc29yPXtHZGsuQ3Vyc29yLm5ld19mcm9tX25hbWUoXCJwb2ludGVyXCIsIG51bGwpfVxuXHRcdFx0dG9vbHRpcE1hcmt1cD1cIlRyYXkgTWVudVwiXG5cdFx0PlxuXHRcdFx0PEd0ay5HZXN0dXJlQ2xpY2tcblx0XHRcdFx0YnV0dG9uPXtHZGsuQlVUVE9OX1BSSU1BUll9XG5cdFx0XHRcdG9uUHJlc3NlZD17aGFuZGxlTGVmdENsaWNrfVxuXHRcdFx0Lz5cblxuXHRcdFx0PGltYWdlXG5cdFx0XHRcdGljb25OYW1lPXtpc1BvcG92ZXJPcGVuKChpc09wZW4pID0+XG5cdFx0XHRcdFx0aXNPcGVuID8gXCJtaS1zdGF0LTEtc3ltYm9saWNcIiA6IFwibWktc3RhdC1taW51cy0xLXN5bWJvbGljXCIsXG5cdFx0XHRcdCl9XG5cdFx0XHQvPlxuXG5cdFx0XHQ8cG9wb3ZlclxuXHRcdFx0XHRjbGFzcz1cInRyYXktcG9wb3ZlclwiXG5cdFx0XHRcdCQ9eyhzZWxmKSA9PiB7XG5cdFx0XHRcdFx0cG9wb3ZlciA9IHNlbGYgYXMgR3RrLlBvcG92ZXI7XG5cdFx0XHRcdH19XG5cdFx0XHRcdG9uQ2xvc2VkPXsoc2VsZikgPT4ge1xuXHRcdFx0XHRcdHNldElzUG9wb3Zlck9wZW4oZmFsc2UpO1xuXHRcdFx0XHRcdHNlbGYuc2V0X2Nzc19jbGFzc2VzKFxuXHRcdFx0XHRcdFx0c2VsZi5jc3NDbGFzc2VzLmZpbHRlcihcblx0XHRcdFx0XHRcdFx0KGNsYXNzTmFtZSkgPT4gY2xhc3NOYW1lICE9PSBcIm9wZW5cIixcblx0XHRcdFx0XHRcdCksXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0fX1cblx0XHRcdD5cblx0XHRcdFx0PGJveCBzcGFjaW5nPXsxMn0+XG5cdFx0XHRcdFx0PEZvciBlYWNoPXt0cmF5SXRlbXN9PlxuXHRcdFx0XHRcdFx0eyh0cmF5SXRlbSkgPT4ge1xuXHRcdFx0XHRcdFx0XHRsZXQgcG9wb3Zlcm1lbnU6IEd0ay5Qb3BvdmVyTWVudSB8IG51bGwgPSBudWxsO1xuXHRcdFx0XHRcdFx0XHRjb25zdCBbaXNQb3BvdmVyTWVudU9wZW4sIHNldElzUG9wb3Zlck1lbnVPcGVuXSA9XG5cdFx0XHRcdFx0XHRcdFx0Y3JlYXRlU3RhdGUoZmFsc2UpO1xuXG5cdFx0XHRcdFx0XHRcdGlmICghdHJheUl0ZW0uZ2ljb24gJiYgIXRyYXlJdGVtLnRpdGxlKVxuXHRcdFx0XHRcdFx0XHRcdHJldHVybiA8Ym94IHZpc2libGU9e2ZhbHNlfSAvPjtcblxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gKFxuXHRcdFx0XHRcdFx0XHRcdDxib3hcblx0XHRcdFx0XHRcdFx0XHRcdGNsYXNzPVwidHJheS1pdGVtXCJcblx0XHRcdFx0XHRcdFx0XHRcdGN1cnNvcj17R2RrLkN1cnNvci5uZXdfZnJvbV9uYW1lKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcInBvaW50ZXJcIixcblx0XHRcdFx0XHRcdFx0XHRcdFx0bnVsbCxcblx0XHRcdFx0XHRcdFx0XHRcdCl9XG5cdFx0XHRcdFx0XHRcdFx0PlxuXHRcdFx0XHRcdFx0XHRcdFx0PGltYWdlXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGNsYXNzPVwiaWNvblwiXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGdpY29uPXt0cmF5SXRlbS5naWNvbn1cblx0XHRcdFx0XHRcdFx0XHRcdFx0dG9vbHRpcE1hcmt1cD17XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dHJheUl0ZW0udG9vbHRpcE1hcmt1cCB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRyYXlJdGVtLnRpdGxlXG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdFx0cGl4ZWxTaXplPXsxOH1cblx0XHRcdFx0XHRcdFx0XHRcdC8+XG5cblx0XHRcdFx0XHRcdFx0XHRcdDxHdGsuR2VzdHVyZUNsaWNrXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGJ1dHRvbj17R2RrLkJVVFRPTl9QUklNQVJZfVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRvblByZXNzZWQ9eygpID0+IHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0cmF5SXRlbS5hYm91dF90b19zaG93KCk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH19XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG9uUmVsZWFzZWQ9eyhfLCB4LCB5KSA9PiB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dHJheUl0ZW0uYWN0aXZhdGUoeCwgeSk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH19XG5cdFx0XHRcdFx0XHRcdFx0XHQvPlxuXG5cdFx0XHRcdFx0XHRcdFx0XHQ8R3RrLkdlc3R1cmVDbGlja1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRidXR0b249e0dkay5CVVRUT05fU0VDT05EQVJZfVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRvblByZXNzZWQ9eygpID0+IHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0cmF5SXRlbS5hYm91dF90b19zaG93KCk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH19XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG9uUmVsZWFzZWQ9eygpID0+IHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAocG9wb3Zlcm1lbnUpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmIChpc1BvcG92ZXJNZW51T3Blbi5nZXQoKSkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRzZXRJc1BvcG92ZXJNZW51T3BlbihmYWxzZSk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHBvcG92ZXJtZW51LnBvcGRvd24oKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cG9wb3Zlcm1lbnUuc2V0X2Nzc19jbGFzc2VzKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHBvcG92ZXJtZW51LmNzc0NsYXNzZXMuZmlsdGVyKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0KGNsYXNzTmFtZSkgPT5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Y2xhc3NOYW1lICE9PVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcIm9wZW5cIixcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQpLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0c2V0SXNQb3BvdmVyTWVudU9wZW4odHJ1ZSk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHBvcG92ZXJtZW51LnBvcHVwKCk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHBvcG92ZXJtZW51LnNldF9jc3NfY2xhc3Nlcyhcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRbXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQuLi5wb3BvdmVybWVudS5jc3NDbGFzc2VzLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XCJvcGVuXCIsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH19XG5cdFx0XHRcdFx0XHRcdFx0XHQvPlxuXG5cdFx0XHRcdFx0XHRcdFx0XHQ8R3RrLkdlc3R1cmVDbGlja1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRidXR0b249e0dkay5CVVRUT05fTUlERExFfVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRvblByZXNzZWQ9eygpID0+IHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0cmF5SXRlbS5hYm91dF90b19zaG93KCk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH19XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG9uUmVsZWFzZWQ9eyhfLCB4LCB5KSA9PiB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dHJheUl0ZW0uc2Vjb25kYXJ5X2FjdGl2YXRlKHgsIHkpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9fVxuXHRcdFx0XHRcdFx0XHRcdFx0Lz5cblxuXHRcdFx0XHRcdFx0XHRcdFx0PEd0ay5Qb3BvdmVyTWVudVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRjbGFzcz1cInRyYXktcG9wb3Zlci1tZW51XCJcblx0XHRcdFx0XHRcdFx0XHRcdFx0bWVudU1vZGVsPXt0cmF5SXRlbS5tZW51TW9kZWx9XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG9uQ2xvc2VkPXsoc2VsZikgPT4ge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHNldElzUG9wb3Zlck1lbnVPcGVuKGZhbHNlKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRzZWxmLnNldF9jc3NfY2xhc3Nlcyhcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHNlbGYuY3NzQ2xhc3Nlcy5maWx0ZXIoXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdChjbGFzc05hbWUpID0+XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Y2xhc3NOYW1lICE9PSBcIm9wZW5cIixcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdCksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fX1cblx0XHRcdFx0XHRcdFx0XHRcdFx0JD17KHNlbGYpID0+IHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRwb3BvdmVybWVudSA9IHNlbGY7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRzZWxmLmluc2VydF9hY3Rpb25fZ3JvdXAoXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcImRidXNtZW51XCIsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0cmF5SXRlbS5hY3Rpb25Hcm91cCxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dHJheUl0ZW0uY29ubmVjdChcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFwibm90aWZ5OjphY3Rpb24tZ3JvdXBcIixcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdChpdGVtKSA9PiB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHNlbGYuaW5zZXJ0X2FjdGlvbl9ncm91cChcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcImRidXNtZW51XCIsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0aXRlbS5hY3Rpb25Hcm91cCxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRyYXlJdGVtLmNvbm5lY3QoXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcIm5vdGlmeTo6bWVudS1tb2RlbFwiLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0KGl0ZW0pID0+IHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0c2VsZi5zZXRfbWVudV9tb2RlbChcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpdGVtLm1lbnVNb2RlbCxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fX1cblx0XHRcdFx0XHRcdFx0XHRcdC8+XG5cdFx0XHRcdFx0XHRcdFx0PC9ib3g+XG5cdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHR9fVxuXHRcdFx0XHRcdDwvRm9yPlxuXHRcdFx0XHQ8L2JveD5cblx0XHRcdDwvcG9wb3Zlcj5cblx0XHQ8L2JveD5cblx0KTtcbn1cbiIsICJpbXBvcnQgdHlwZSB7IENQVUluZm8gfSBmcm9tIFwiQC90eXBlcy9zeXN0ZW1TdGF0c1wiO1xuaW1wb3J0IHsgY3B1VXNhZ2UgfSBmcm9tIFwiQC91dGlsL3N5c3RlbVN0YXRzXCI7XG5pbXBvcnQgdHlwZSB7IEFjY2Vzc29yIH0gZnJvbSBcImFnc1wiO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuXHRjbGFzcz86IHN0cmluZyB8IEFjY2Vzc29yPHN0cmluZz47XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIENwdSh7IGNsYXNzOiBjbGFzc05hbWUgfTogUHJvcHMpIHtcblx0ZnVuY3Rpb24gdHJhbnNmb3JtTGFiZWwodXNhZ2U6IENQVUluZm8pIHtcblx0XHRyZXR1cm4gYCR7dXNhZ2UudG90YWwucGVyY2VudGFnZS50b0ZpeGVkKDIpfSVgO1xuXHR9XG5cblx0ZnVuY3Rpb24gdHJhbnNmb3JtVG9vbHRpcCh1c2FnZTogQ1BVSW5mbykge1xuXHRcdHJldHVybiBPYmplY3QuZW50cmllcyh1c2FnZSlcblx0XHRcdC5zb3J0KChbYV0sIFtiXSkgPT4ge1xuXHRcdFx0XHRpZiAoYSA9PT0gXCJ0b3RhbFwiKSByZXR1cm4gLTE7XG5cdFx0XHRcdGlmIChiID09PSBcInRvdGFsXCIpIHJldHVybiAxO1xuXHRcdFx0XHRyZXR1cm4gTnVtYmVyKGEpIC0gTnVtYmVyKGIpO1xuXHRcdFx0fSlcblx0XHRcdC5tYXAoKFtjb3JlTnVtYmVyLCBjb3JlSW5mb10pID0+IHtcblx0XHRcdFx0cmV0dXJuIGAke2NvcmVOdW1iZXIgPT09IFwidG90YWxcIiA/IFwiVG90YWxcIiA6IGBDb3JlICR7Y29yZU51bWJlcn1gfTogJHtjb3JlSW5mby5wZXJjZW50YWdlLnRvRml4ZWQoMil9JSR7Y29yZU51bWJlciA9PT0gXCJ0b3RhbFwiID8gXCJcXG5cIiA6IFwiXCJ9YDtcblx0XHRcdH0pXG5cdFx0XHQuam9pbihcIlxcblwiKTtcblx0fVxuXG5cdHJldHVybiAoXG5cdFx0PGJveCBjbGFzcz17Y2xhc3NOYW1lfT5cblx0XHRcdDxpbWFnZSBpY29uTmFtZT1cIm1pLW1lbW9yeS1zeW1ib2xpY1wiIGNsYXNzPVwiY3B1LWljb25cIiAvPlxuXG5cdFx0XHQ8bGFiZWxcblx0XHRcdFx0bGFiZWw9e2NwdVVzYWdlKHRyYW5zZm9ybUxhYmVsKX1cblx0XHRcdFx0dG9vbHRpcE1hcmt1cD17Y3B1VXNhZ2UodHJhbnNmb3JtVG9vbHRpcCl9XG5cdFx0XHQvPlxuXHRcdDwvYm94PlxuXHQpO1xufVxuIiwgImltcG9ydCBHTGliIGZyb20gXCJnaTovL0dMaWI/dmVyc2lvbj0yLjBcIlxuaW1wb3J0IEd0ayBmcm9tIFwiZ2k6Ly9HdGs/dmVyc2lvbj00LjBcIlxuaW1wb3J0IEFzdGFsIGZyb20gXCJnaTovL0FzdGFsP3ZlcnNpb249NC4wXCJcbmltcG9ydCB7IG1rQXBwIH0gZnJvbSBcIi4uL19hcHAuanNcIlxuXG5HdGsuaW5pdCgpXG5cbi8vIHN0b3AgdGhpcyBmcm9tIGxlYWtpbmcgaW50byBzdWJwcm9jZXNzZXNcbi8vIGFuZCBnaW8gbGF1bmNoIGludm9jYXRpb25zXG5HTGliLnVuc2V0ZW52KFwiTERfUFJFTE9BRFwiKVxuXG4vLyB1c2VycyBtaWdodCB3YW50IHRvIHVzZSBBZHdhaXRhIGluIHdoaWNoIGNhc2UgaXQgaGFzIHRvIGJlIGluaXRpYWxpemVkXG4vLyBpdCBtaWdodCBiZSBjb21tb24gcGl0ZmFsbCB0byBmb3JnZXQgaXQgYmVjYXVzZSBgQXBwYCBpcyBub3QgYEFkdy5BcHBsaWNhdGlvbmBcbmF3YWl0IGltcG9ydChcImdpOi8vQWR3P3ZlcnNpb249MVwiKS50aGVuKCh7IGRlZmF1bHQ6IEFkdyB9KSA9PiBBZHcuaW5pdCgpKS5jYXRjaCgoKSA9PiB2b2lkIDApXG5cbmV4cG9ydCBkZWZhdWx0IG1rQXBwKEFzdGFsLkFwcGxpY2F0aW9uKVxuIiwgIi8qKlxuICogV29ya2Fyb3VuZCBmb3IgXCJDYW4ndCBjb252ZXJ0IG5vbi1udWxsIHBvaW50ZXIgdG8gSlMgdmFsdWUgXCJcbiAqL1xuXG5leHBvcnQge31cblxuZnVuY3Rpb24gc25ha2VpZnkoc3RyOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gc3RyXG4gICAgICAgIC5yZXBsYWNlKC8oW2Etel0pKFtBLVpdKS9nLCBcIiQxXyQyXCIpXG4gICAgICAgIC5yZXBsYWNlQWxsKFwiLVwiLCBcIl9cIilcbiAgICAgICAgLnRvTG93ZXJDYXNlKClcbn1cblxuYXN5bmMgZnVuY3Rpb24gc3VwcHJlc3M8VD4obW9kOiBQcm9taXNlPHsgZGVmYXVsdDogVCB9PiwgcGF0Y2g6IChtOiBUKSA9PiB2b2lkKSB7XG4gICAgcmV0dXJuIG1vZC50aGVuKChtKSA9PiBwYXRjaChtLmRlZmF1bHQpKS5jYXRjaCgoKSA9PiB2b2lkIDApXG59XG5cbmZ1bmN0aW9uIHBhdGNoPFAgZXh0ZW5kcyBvYmplY3Q+KHByb3RvOiBQLCBwcm9wOiBFeHRyYWN0PGtleW9mIFAsIHN0cmluZz4pIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocHJvdG8sIHByb3AsIHtcbiAgICAgICAgZ2V0KCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXNbYGdldF8ke3NuYWtlaWZ5KHByb3ApfWBdKClcbiAgICAgICAgfSxcbiAgICB9KVxufVxuXG5hd2FpdCBzdXBwcmVzcyhpbXBvcnQoXCJnaTovL0FzdGFsQXBwc1wiKSwgKHsgQXBwcywgQXBwbGljYXRpb24gfSkgPT4ge1xuICAgIHBhdGNoKEFwcHMucHJvdG90eXBlLCBcImxpc3RcIilcbiAgICBwYXRjaChBcHBsaWNhdGlvbi5wcm90b3R5cGUsIFwia2V5d29yZHNcIilcbiAgICBwYXRjaChBcHBsaWNhdGlvbi5wcm90b3R5cGUsIFwiY2F0ZWdvcmllc1wiKVxufSlcblxuYXdhaXQgc3VwcHJlc3MoaW1wb3J0KFwiZ2k6Ly9Bc3RhbEJhdHRlcnlcIiksICh7IFVQb3dlciB9KSA9PiB7XG4gICAgcGF0Y2goVVBvd2VyLnByb3RvdHlwZSwgXCJkZXZpY2VzXCIpXG59KVxuXG5hd2FpdCBzdXBwcmVzcyhpbXBvcnQoXCJnaTovL0FzdGFsQmx1ZXRvb3RoXCIpLCAoeyBBZGFwdGVyLCBCbHVldG9vdGgsIERldmljZSB9KSA9PiB7XG4gICAgcGF0Y2goQWRhcHRlci5wcm90b3R5cGUsIFwidXVpZHNcIilcbiAgICBwYXRjaChCbHVldG9vdGgucHJvdG90eXBlLCBcImFkYXB0ZXJzXCIpXG4gICAgcGF0Y2goQmx1ZXRvb3RoLnByb3RvdHlwZSwgXCJkZXZpY2VzXCIpXG4gICAgcGF0Y2goRGV2aWNlLnByb3RvdHlwZSwgXCJ1dWlkc1wiKVxufSlcblxuYXdhaXQgc3VwcHJlc3MoaW1wb3J0KFwiZ2k6Ly9Bc3RhbEh5cHJsYW5kXCIpLCAoeyBIeXBybGFuZCwgTW9uaXRvciwgV29ya3NwYWNlIH0pID0+IHtcbiAgICBwYXRjaChIeXBybGFuZC5wcm90b3R5cGUsIFwiYmluZHNcIilcbiAgICBwYXRjaChIeXBybGFuZC5wcm90b3R5cGUsIFwibW9uaXRvcnNcIilcbiAgICBwYXRjaChIeXBybGFuZC5wcm90b3R5cGUsIFwid29ya3NwYWNlc1wiKVxuICAgIHBhdGNoKEh5cHJsYW5kLnByb3RvdHlwZSwgXCJjbGllbnRzXCIpXG4gICAgcGF0Y2goTW9uaXRvci5wcm90b3R5cGUsIFwiYXZhaWxhYmxlTW9kZXNcIilcbiAgICBwYXRjaChNb25pdG9yLnByb3RvdHlwZSwgXCJhdmFpbGFibGVfbW9kZXNcIilcbiAgICBwYXRjaChXb3Jrc3BhY2UucHJvdG90eXBlLCBcImNsaWVudHNcIilcbn0pXG5cbmF3YWl0IHN1cHByZXNzKGltcG9ydChcImdpOi8vQXN0YWxNcHJpc1wiKSwgKHsgTXByaXMsIFBsYXllciB9KSA9PiB7XG4gICAgcGF0Y2goTXByaXMucHJvdG90eXBlLCBcInBsYXllcnNcIilcbiAgICBwYXRjaChQbGF5ZXIucHJvdG90eXBlLCBcInN1cHBvcnRlZF91cmlfc2NoZW1lc1wiKVxuICAgIHBhdGNoKFBsYXllci5wcm90b3R5cGUsIFwic3VwcG9ydGVkVXJpU2NoZW1lc1wiKVxuICAgIHBhdGNoKFBsYXllci5wcm90b3R5cGUsIFwic3VwcG9ydGVkX21pbWVfdHlwZXNcIilcbiAgICBwYXRjaChQbGF5ZXIucHJvdG90eXBlLCBcInN1cHBvcnRlZE1pbWVUeXBlc1wiKVxuICAgIHBhdGNoKFBsYXllci5wcm90b3R5cGUsIFwiY29tbWVudHNcIilcbn0pXG5cbmF3YWl0IHN1cHByZXNzKGltcG9ydChcImdpOi8vQXN0YWxOZXR3b3JrXCIpLCAoeyBXaWZpIH0pID0+IHtcbiAgICBwYXRjaChXaWZpLnByb3RvdHlwZSwgXCJhY2Nlc3NfcG9pbnRzXCIpXG4gICAgcGF0Y2goV2lmaS5wcm90b3R5cGUsIFwiYWNjZXNzUG9pbnRzXCIpXG59KVxuXG5hd2FpdCBzdXBwcmVzcyhpbXBvcnQoXCJnaTovL0FzdGFsTm90aWZkXCIpLCAoeyBOb3RpZmQsIE5vdGlmaWNhdGlvbiB9KSA9PiB7XG4gICAgcGF0Y2goTm90aWZkLnByb3RvdHlwZSwgXCJub3RpZmljYXRpb25zXCIpXG4gICAgcGF0Y2goTm90aWZpY2F0aW9uLnByb3RvdHlwZSwgXCJhY3Rpb25zXCIpXG59KVxuXG5hd2FpdCBzdXBwcmVzcyhpbXBvcnQoXCJnaTovL0FzdGFsUG93ZXJQcm9maWxlc1wiKSwgKHsgUG93ZXJQcm9maWxlcyB9KSA9PiB7XG4gICAgcGF0Y2goUG93ZXJQcm9maWxlcy5wcm90b3R5cGUsIFwiYWN0aW9uc1wiKVxufSlcblxuYXdhaXQgc3VwcHJlc3MoaW1wb3J0KFwiZ2k6Ly9Bc3RhbFdwXCIpLCAoeyBXcCwgQXVkaW8sIFZpZGVvIH0pID0+IHtcbiAgICBwYXRjaChXcC5wcm90b3R5cGUsIFwiZW5kcG9pbnRzXCIpXG4gICAgcGF0Y2goV3AucHJvdG90eXBlLCBcImRldmljZXNcIilcbiAgICBwYXRjaChBdWRpby5wcm90b3R5cGUsIFwic3RyZWFtc1wiKVxuICAgIHBhdGNoKEF1ZGlvLnByb3RvdHlwZSwgXCJyZWNvcmRlcnNcIilcbiAgICBwYXRjaChBdWRpby5wcm90b3R5cGUsIFwibWljcm9waG9uZXNcIilcbiAgICBwYXRjaChBdWRpby5wcm90b3R5cGUsIFwic3BlYWtlcnNcIilcbiAgICBwYXRjaChBdWRpby5wcm90b3R5cGUsIFwiZGV2aWNlc1wiKVxuICAgIHBhdGNoKFZpZGVvLnByb3RvdHlwZSwgXCJzdHJlYW1zXCIpXG4gICAgcGF0Y2goVmlkZW8ucHJvdG90eXBlLCBcInJlY29yZGVyc1wiKVxuICAgIHBhdGNoKFZpZGVvLnByb3RvdHlwZSwgXCJzaW5rc1wiKVxuICAgIHBhdGNoKFZpZGVvLnByb3RvdHlwZSwgXCJzb3VyY2VzXCIpXG4gICAgcGF0Y2goVmlkZW8ucHJvdG90eXBlLCBcImRldmljZXNcIilcbn0pXG5cbmF3YWl0IHN1cHByZXNzKGltcG9ydChcImdpOi8vQXN0YWxUcmF5XCIpLCAoeyBUcmF5IH0pID0+IHtcbiAgICBwYXRjaChUcmF5LnByb3RvdHlwZSwgXCJpdGVtc1wiKVxufSlcbiIsICJpbXBvcnQgXCIuL292ZXJyaWRlcy5qc1wiXG5pbXBvcnQgeyBzZXRDb25zb2xlTG9nRG9tYWluIH0gZnJvbSBcImNvbnNvbGVcIlxuaW1wb3J0IHsgZXhpdCwgcHJvZ3JhbUFyZ3MgfSBmcm9tIFwic3lzdGVtXCJcbmltcG9ydCB7IGNyZWF0ZVJvb3QgfSBmcm9tIFwiLi4vZ25pbS9zcmMvanN4L3Njb3BlLmpzXCJcbmltcG9ydCBJTyBmcm9tIFwiZ2k6Ly9Bc3RhbElPXCJcbmltcG9ydCBHT2JqZWN0IGZyb20gXCJnaTovL0dPYmplY3RcIlxuaW1wb3J0IEdpbyBmcm9tIFwiZ2k6Ly9HaW8/dmVyc2lvbj0yLjBcIlxuaW1wb3J0IHR5cGUgQXN0YWwzIGZyb20gXCJnaTovL0FzdGFsP3ZlcnNpb249My4wXCJcbmltcG9ydCB0eXBlIEFzdGFsNCBmcm9tIFwiZ2k6Ly9Bc3RhbD92ZXJzaW9uPTQuMFwiXG5cbnR5cGUgQ29uZmlnID0gUGFydGlhbDx7XG4gICAgaW5zdGFuY2VOYW1lOiBzdHJpbmdcbiAgICBjc3M6IHN0cmluZ1xuICAgIGljb25zOiBzdHJpbmdcbiAgICBndGtUaGVtZTogc3RyaW5nXG4gICAgaWNvblRoZW1lOiBzdHJpbmdcbiAgICBjdXJzb3JUaGVtZTogc3RyaW5nXG4gICAgaG9sZDogYm9vbGVhblxuICAgIHJlcXVlc3RIYW5kbGVyKHJlcXVlc3Q6IHN0cmluZywgcmVzOiAocmVzcG9uc2U6IGFueSkgPT4gdm9pZCk6IHZvaWRcbiAgICBtYWluKC4uLmFyZ3M6IHN0cmluZ1tdKTogdm9pZFxuICAgIGNsaWVudChtZXNzYWdlOiAobXNnOiBzdHJpbmcpID0+IHN0cmluZywgLi4uYXJnczogc3RyaW5nW10pOiB2b2lkXG59PlxuXG5pbnRlcmZhY2UgQXN0YWwzSlMgZXh0ZW5kcyBBc3RhbDMuQXBwbGljYXRpb24ge1xuICAgIGV2YWwoYm9keTogc3RyaW5nKTogUHJvbWlzZTxhbnk+XG4gICAgcmVxdWVzdEhhbmRsZXI6IENvbmZpZ1tcInJlcXVlc3RIYW5kbGVyXCJdXG4gICAgYXBwbHlfY3NzKHN0eWxlOiBzdHJpbmcsIHJlc2V0PzogYm9vbGVhbik6IHZvaWRcbiAgICBxdWl0KGNvZGU/OiBudW1iZXIpOiB2b2lkXG4gICAgc3RhcnQoY29uZmlnPzogQ29uZmlnKTogdm9pZFxufVxuXG5pbnRlcmZhY2UgQXN0YWw0SlMgZXh0ZW5kcyBBc3RhbDQuQXBwbGljYXRpb24ge1xuICAgIGV2YWwoYm9keTogc3RyaW5nKTogUHJvbWlzZTxhbnk+XG4gICAgcmVxdWVzdEhhbmRsZXI/OiBDb25maWdbXCJyZXF1ZXN0SGFuZGxlclwiXVxuICAgIGFwcGx5X2NzcyhzdHlsZTogc3RyaW5nLCByZXNldD86IGJvb2xlYW4pOiB2b2lkXG4gICAgcXVpdChjb2RlPzogbnVtYmVyKTogdm9pZFxuICAgIHN0YXJ0KGNvbmZpZz86IENvbmZpZyk6IHZvaWRcbn1cblxudHlwZSBBcHAzID0gdHlwZW9mIEFzdGFsMy5BcHBsaWNhdGlvblxudHlwZSBBcHA0ID0gdHlwZW9mIEFzdGFsNC5BcHBsaWNhdGlvblxuXG5leHBvcnQgZnVuY3Rpb24gbWtBcHA8QXBwIGV4dGVuZHMgQXBwMz4oQXBwOiBBcHApOiBBc3RhbDNKU1xuZXhwb3J0IGZ1bmN0aW9uIG1rQXBwPEFwcCBleHRlbmRzIEFwcDQ+KEFwcDogQXBwKTogQXN0YWw0SlNcblxuZXhwb3J0IGZ1bmN0aW9uIG1rQXBwKEFwcDogQXBwMyB8IEFwcDQpIHtcbiAgICByZXR1cm4gbmV3IChjbGFzcyBBc3RhbEpTIGV4dGVuZHMgQXBwIHtcbiAgICAgICAgcHJpdmF0ZSBkaXNwb3NlUm9vdD86ICgpID0+IHZvaWRcblxuICAgICAgICBzdGF0aWMge1xuICAgICAgICAgICAgR09iamVjdC5yZWdpc3RlckNsYXNzKHsgR1R5cGVOYW1lOiBcIkFzdGFsSlNcIiB9LCB0aGlzIGFzIGFueSlcbiAgICAgICAgfVxuXG4gICAgICAgIGV2YWwoYm9keTogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzLCByZWopID0+IHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBmbiA9IEZ1bmN0aW9uKGByZXR1cm4gKGFzeW5jIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJHtib2R5LmluY2x1ZGVzKFwiO1wiKSA/IGJvZHkgOiBgcmV0dXJuICR7Ym9keX07YH1cbiAgICAgICAgICAgICAgICAgICAgfSlgKVxuICAgICAgICAgICAgICAgICAgICBmbigpKCkudGhlbihyZXMpLmNhdGNoKHJlailcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICByZWooZXJyb3IpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuXG4gICAgICAgIHJlcXVlc3RIYW5kbGVyPzogQ29uZmlnW1wicmVxdWVzdEhhbmRsZXJcIl1cblxuICAgICAgICB2ZnVuY19zaHV0ZG93bigpOiB2b2lkIHtcbiAgICAgICAgICAgIHN1cGVyLnZmdW5jX3NodXRkb3duKClcbiAgICAgICAgICAgIHRoaXMuZGlzcG9zZVJvb3Q/LigpXG4gICAgICAgIH1cblxuICAgICAgICB2ZnVuY19yZXF1ZXN0KG1zZzogc3RyaW5nLCBjb25uOiBHaW8uU29ja2V0Q29ubmVjdGlvbik6IHZvaWQge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLnJlcXVlc3RIYW5kbGVyID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlcXVlc3RIYW5kbGVyKG1zZywgKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIElPLndyaXRlX3NvY2soY29ubiwgU3RyaW5nKHJlc3BvbnNlKSwgKF8sIHJlcykgPT4gSU8ud3JpdGVfc29ja19maW5pc2gocmVzKSlcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzdXBlci52ZnVuY19yZXF1ZXN0KG1zZywgY29ubilcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGFwcGx5X2NzcyhzdHlsZTogc3RyaW5nLCByZXNldCA9IGZhbHNlKSB7XG4gICAgICAgICAgICBzdXBlci5hcHBseV9jc3Moc3R5bGUsIHJlc2V0KVxuICAgICAgICB9XG5cbiAgICAgICAgcXVpdChjb2RlPzogbnVtYmVyKTogdm9pZCB7XG4gICAgICAgICAgICBzdXBlci5xdWl0KClcbiAgICAgICAgICAgIGV4aXQoY29kZSA/PyAwKVxuICAgICAgICB9XG5cbiAgICAgICAgc3RhcnQoeyByZXF1ZXN0SGFuZGxlciwgY3NzLCBob2xkLCBtYWluLCBjbGllbnQsIGljb25zLCAuLi5jZmcgfTogQ29uZmlnID0ge30pIHtcbiAgICAgICAgICAgIGNvbnN0IGFwcCA9IHRoaXMgYXMgdW5rbm93biBhcyBJbnN0YW5jZVR5cGU8QXBwMyB8IEFwcDQ+XG5cbiAgICAgICAgICAgIGNsaWVudCA/Pz0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIHByaW50KGBBc3RhbCBpbnN0YW5jZSBcIiR7YXBwLmluc3RhbmNlTmFtZX1cIiBhbHJlYWR5IHJ1bm5pbmdgKVxuICAgICAgICAgICAgICAgIGV4aXQoMSlcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLCBjZmcpXG4gICAgICAgICAgICBzZXRDb25zb2xlTG9nRG9tYWluKGFwcC5pbnN0YW5jZU5hbWUpXG5cbiAgICAgICAgICAgIHRoaXMucmVxdWVzdEhhbmRsZXIgPSByZXF1ZXN0SGFuZGxlclxuICAgICAgICAgICAgYXBwLmNvbm5lY3QoXCJhY3RpdmF0ZVwiLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgY3JlYXRlUm9vdCgoZGlzcG9zZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRpc3Bvc2VSb290ID0gZGlzcG9zZVxuICAgICAgICAgICAgICAgICAgICBtYWluPy4oLi4ucHJvZ3JhbUFyZ3MpXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgYXBwLmFjcXVpcmVfc29ja2V0KClcbiAgICAgICAgICAgIH0gY2F0Y2gge1xuICAgICAgICAgICAgICAgIHJldHVybiBjbGllbnQoKG1zZykgPT4gSU8uc2VuZF9yZXF1ZXN0KGFwcC5pbnN0YW5jZU5hbWUsIG1zZykhLCAuLi5wcm9ncmFtQXJncylcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGNzcykgdGhpcy5hcHBseV9jc3MoY3NzLCBmYWxzZSlcblxuICAgICAgICAgICAgaWYgKGljb25zKSBhcHAuYWRkX2ljb25zKGljb25zKVxuXG4gICAgICAgICAgICBob2xkID8/PSB0cnVlXG4gICAgICAgICAgICBpZiAoaG9sZCkgYXBwLmhvbGQoKVxuXG4gICAgICAgICAgICBhcHAucnVuQXN5bmMoW10pXG4gICAgICAgIH1cbiAgICB9KSgpXG59XG4iLCAiaW1wb3J0IE5vdGlmaWNhdGlvbnMgZnJvbSBcIi4vbW9kdWxlcy9Ob3RpZmljYXRpb25zXCI7XG5pbXBvcnQgTWljcm9waG9uZSBmcm9tIFwiLi9tb2R1bGVzL01pY3JvcGhvbmVcIjtcbmltcG9ydCB7IEFzdGFsLCB0eXBlIEdkayB9IGZyb20gXCJhZ3MvZ3RrNFwiO1xuaW1wb3J0IEJhdHRlcnkgZnJvbSBcIi4vbW9kdWxlcy9CYXR0ZXJ5XCI7XG5pbXBvcnQgU3BlYWtlciBmcm9tIFwiLi9tb2R1bGVzL1NwZWFrZXJcIjtcbmltcG9ydCBOZXR3b3JrIGZyb20gXCIuL21vZHVsZXMvTmV0d29ya1wiO1xuaW1wb3J0IE1lbW9yeSBmcm9tIFwiLi9tb2R1bGVzL01lbW9yeVwiO1xuaW1wb3J0IFBvd2VyIGZyb20gXCIuL21vZHVsZXMvUG93ZXJcIjtcbmltcG9ydCBNZWRpYSBmcm9tIFwiLi9tb2R1bGVzL01lZGlhXCI7XG5pbXBvcnQgeyB0aW1lb3V0IH0gZnJvbSBcImFncy90aW1lXCI7XG5pbXBvcnQgRGlzayBmcm9tIFwiLi9tb2R1bGVzL0Rpc2tcIjtcbmltcG9ydCB7IGNyZWF0ZVN0YXRlIH0gZnJvbSBcImFnc1wiO1xuaW1wb3J0IFRpbWUgZnJvbSBcIi4vbW9kdWxlcy9UaW1lXCI7XG5pbXBvcnQgVHJheSBmcm9tIFwiLi9tb2R1bGVzL1RyYXlcIjtcbmltcG9ydCBDcHUgZnJvbSBcIi4vbW9kdWxlcy9DcHVcIjtcbmltcG9ydCBhcHAgZnJvbSBcImFncy9ndGs0L2FwcFwiO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuXHRnZGttb25pdG9yOiBHZGsuTW9uaXRvcjtcbn1cblxuZXhwb3J0IGNvbnN0IFtiYXJIZWlnaHQsIHNldEJhckhlaWdodF0gPSBjcmVhdGVTdGF0ZSgwKTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gQmFyKHsgZ2RrbW9uaXRvciB9OiBQcm9wcykge1xuXHRjb25zdCB7IFRPUCwgTEVGVCwgUklHSFQgfSA9IEFzdGFsLldpbmRvd0FuY2hvcjtcblxuXHRyZXR1cm4gKFxuXHRcdDx3aW5kb3dcblx0XHRcdHZpc2libGVcblx0XHRcdG5hbWU9XCJiYXJcIlxuXHRcdFx0Y2xhc3M9XCJiYXJcIlxuXHRcdFx0Z2RrbW9uaXRvcj17Z2RrbW9uaXRvcn1cblx0XHRcdGV4Y2x1c2l2aXR5PXtBc3RhbC5FeGNsdXNpdml0eS5FWENMVVNJVkV9XG5cdFx0XHRhbmNob3I9e1RPUCB8IExFRlQgfCBSSUdIVH1cblx0XHRcdGFwcGxpY2F0aW9uPXthcHB9XG5cdFx0XHQkPXsoc2VsZikgPT4ge1xuXHRcdFx0XHR0aW1lb3V0KDUwMDAsICgpID0+IHtcblx0XHRcdFx0XHRzZXRCYXJIZWlnaHQoc2VsZi5nZXRfYWxsb2NhdGVkX2hlaWdodCgpKTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9fVxuXHRcdD5cblx0XHRcdDxjZW50ZXJib3ggY3NzTmFtZT1cImNlbnRlcmJveFwiPlxuXHRcdFx0XHQ8Ym94ICR0eXBlPVwic3RhcnRcIiBoZXhwYW5kPlxuXHRcdFx0XHRcdDxib3ggY2xhc3M9XCJtb2R1bGUtZ3JvdXBcIj5cblx0XHRcdFx0XHRcdDxDcHUgY2xhc3M9XCJjcHUtbW9kdWxlXCIgLz5cblx0XHRcdFx0XHRcdDxEaXNrIGNsYXNzPVwiZGlzay1tb2R1bGVcIiAvPlxuXHRcdFx0XHRcdFx0PE1lbW9yeSAvPlxuXHRcdFx0XHRcdDwvYm94PlxuXG5cdFx0XHRcdFx0PGJveCBjbGFzcz1cIm1vZHVsZS1ncm91cFwiPlxuXHRcdFx0XHRcdFx0PEJhdHRlcnkgY2xhc3M9XCJiYXR0ZXJ5LW1vZHVsZVwiIC8+XG5cdFx0XHRcdFx0PC9ib3g+XG5cblx0XHRcdFx0XHQ8Ym94IGNsYXNzPVwibW9kdWxlLWdyb3VwIGxhc3RcIj5cblx0XHRcdFx0XHRcdDxUaW1lIGNsYXNzPVwidGltZVwiIC8+XG5cdFx0XHRcdFx0PC9ib3g+XG5cdFx0XHRcdDwvYm94PlxuXG5cdFx0XHRcdDxib3ggJHR5cGU9XCJjZW50ZXJcIj5cblx0XHRcdFx0XHQ8TWVkaWFcblx0XHRcdFx0XHRcdGNvdmVyQ2xhc3M9XCJpbWFnZS1jb3Zlci1hcnRcIlxuXHRcdFx0XHRcdFx0bWVkaWFDbGFzcz1cIm1vZHVsZS1ncm91cFwiXG5cdFx0XHRcdFx0XHRseXJpY3NDbGFzcz1cIm1vZHVsZS1ncm91cCBsYXN0XCJcblx0XHRcdFx0XHQvPlxuXHRcdFx0XHQ8L2JveD5cblxuXHRcdFx0XHQ8Ym94ICR0eXBlPVwiZW5kXCI+XG5cdFx0XHRcdFx0PGJveCBjbGFzcz1cIm1vZHVsZS1ncm91cFwiPlxuXHRcdFx0XHRcdFx0PFNwZWFrZXIgLz5cblx0XHRcdFx0XHQ8L2JveD5cblxuXHRcdFx0XHRcdDxib3ggY2xhc3M9XCJtb2R1bGUtZ3JvdXBcIj5cblx0XHRcdFx0XHRcdDxNaWNyb3Bob25lIC8+XG5cdFx0XHRcdFx0PC9ib3g+XG5cblx0XHRcdFx0XHQ8Ym94IGNsYXNzPVwibW9kdWxlLWdyb3VwXCI+XG5cdFx0XHRcdFx0XHQ8TmV0d29yayAvPlxuXHRcdFx0XHRcdDwvYm94PlxuXG5cdFx0XHRcdFx0PGJveCBjbGFzcz1cIm1vZHVsZS1ncm91cFwiPlxuXHRcdFx0XHRcdFx0PE5vdGlmaWNhdGlvbnMgY2xhc3M9XCJub3RpZmljYXRpb24tbW9kdWxlXCIgLz5cblx0XHRcdFx0XHRcdDxUcmF5IC8+XG5cdFx0XHRcdFx0PC9ib3g+XG5cblx0XHRcdFx0XHQ8Ym94IGNsYXNzPVwibW9kdWxlLWdyb3VwIGVuZFwiPlxuXHRcdFx0XHRcdFx0PFBvd2VyIC8+XG5cdFx0XHRcdFx0PC9ib3g+XG5cdFx0XHRcdDwvYm94PlxuXHRcdFx0PC9jZW50ZXJib3g+XG5cdFx0PC93aW5kb3c+XG5cdCk7XG59XG4iLCAiLypcblx0TW9kaWZpZWQgdmVyc2lvbiBvZjpcblx0aHR0cHM6Ly9naXRodWIuY29tL01hYmkxOS9kZXNrdG9wLXNoZWxsL2Jsb2IvZDcwMTg5YjIzNTVhNDE3M2E4ZWE2ZDU2OTlmMzQwZmU3MzQ5Nzk0NS91dGlscy90aW1lci50c1xuKi9cblxuaW1wb3J0IHsgaW50ZXJ2YWwsIHRpbWVvdXQgfSBmcm9tIFwiYWdzL3RpbWVcIjtcbmltcG9ydCB0eXBlIEFzdGFsSU8gZnJvbSBcImdpOi8vQXN0YWxJT1wiO1xuaW1wb3J0IEdMaWIgZnJvbSBcImdpOi8vR0xpYlwiO1xuXG5leHBvcnQgY2xhc3MgVGltZXIge1xuXHRwdWJsaWMgaXNQYXVzZWQ6IGJvb2xlYW47XG5cdHB1YmxpYyB0aW1lb3V0OiBudW1iZXI7XG5cdHB1YmxpYyB0aW1lTGVmdDogbnVtYmVyO1xuXHRwcml2YXRlIGxhc3RUaWNrVGltZTogbnVtYmVyO1xuXHRwcml2YXRlIGludGVydmFsOiBBc3RhbElPLlRpbWUgfCBudWxsO1xuXHRwcm90ZWN0ZWQgc3Vic2NyaXB0aW9ucyA9IG5ldyBTZXQ8KCkgPT4gdm9pZD4oKTtcblxuXHRjb25zdHJ1Y3Rvcih0aW1lb3V0OiBudW1iZXIpIHtcblx0XHR0aGlzLmlzUGF1c2VkID0gZmFsc2U7XG5cdFx0dGhpcy50aW1lb3V0ID0gdGltZW91dDtcblx0XHR0aGlzLnRpbWVMZWZ0ID0gdGltZW91dDtcblx0XHR0aGlzLmxhc3RUaWNrVGltZSA9IEdMaWIuZ2V0X21vbm90b25pY190aW1lKCk7XG5cblx0XHR0aGlzLmludGVydmFsID0gaW50ZXJ2YWwoMjAsICgpID0+IHRoaXMudGljaygpKTtcblx0fVxuXG5cdG5vdGlmeSgpIHtcblx0XHRmb3IgKGNvbnN0IHN1YiBvZiB0aGlzLnN1YnNjcmlwdGlvbnMpIHtcblx0XHRcdHN1YigpO1xuXHRcdH1cblx0fVxuXG5cdHByb3RlY3RlZCB1bnN1YnNjcmliZShjYWxsYmFjazogKCkgPT4gdm9pZCkge1xuXHRcdHRoaXMuc3Vic2NyaXB0aW9ucy5kZWxldGUoY2FsbGJhY2spO1xuXG5cdFx0aWYgKFxuXHRcdFx0dGhpcy5zdWJzY3JpcHRpb25zLnNpemUgPT09IDAgJiZcblx0XHRcdHRoaXMuaXNQYXVzZWQgJiZcblx0XHRcdHRoaXMuaW50ZXJ2YWwgIT0gbnVsbFxuXHRcdCkge1xuXHRcdFx0Y29uc29sZS53YXJuKFwiVGltZXIgd2FzIGRpc2Nvbm5lY3RlZCB3aGlsZSBwYXVzZWRcIik7XG5cdFx0XHQvLyBjbGVhbiBpdCB1cCBhbnl3YXlcblx0XHRcdHRoaXMuaXNQYXVzZWQgPSBmYWxzZTtcblx0XHR9XG5cdH1cblxuXHRzdWJzY3JpYmUoY2FsbGJhY2s6ICgpID0+IHZvaWQpIHtcblx0XHR0aGlzLnN1YnNjcmlwdGlvbnMuYWRkKGNhbGxiYWNrKTtcblxuXHRcdHJldHVybiAoKSA9PiB0aGlzLnVuc3Vic2NyaWJlKGNhbGxiYWNrKTtcblx0fVxuXG5cdHRpY2soKSB7XG5cdFx0Y29uc3Qgbm93ID0gR0xpYi5nZXRfbW9ub3RvbmljX3RpbWUoKTtcblxuXHRcdGlmICh0aGlzLmlzUGF1c2VkKSB7XG5cdFx0XHR0aGlzLmxhc3RUaWNrVGltZSA9IG5vdztcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRjb25zdCBkZWx0YSA9IChub3cgLSB0aGlzLmxhc3RUaWNrVGltZSkgLyAxMDAwO1xuXHRcdHRoaXMudGltZUxlZnQgLT0gZGVsdGE7XG5cblx0XHRpZiAodGhpcy50aW1lTGVmdCA8PSAwKSB7XG5cdFx0XHR0aGlzLnRpbWVMZWZ0ID0gMDtcblx0XHRcdHRoaXMuY2FuY2VsKCk7XG5cdFx0fVxuXG5cdFx0dGhpcy5ub3RpZnkoKTtcblx0XHR0aGlzLmxhc3RUaWNrVGltZSA9IG5vdztcblx0fVxuXG5cdGNhbmNlbCgpIHtcblx0XHR0aGlzLmludGVydmFsPy5jYW5jZWwoKTtcblx0XHR0aGlzLmludGVydmFsID0gbnVsbDtcblx0fVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2xlZXAodGltZTogbnVtYmVyKTogUHJvbWlzZTx2b2lkPiB7XG5cdHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuXHRcdHRpbWVvdXQodGltZSwgcmVzb2x2ZSk7XG5cdH0pO1xufVxuIiwgImltcG9ydCB7IGNyZWF0ZVN0YXRlLCB0eXBlIEFjY2Vzc29yLCB0eXBlIFNldHRlciB9IGZyb20gXCJhZ3NcIjtcbmltcG9ydCBDYWxjdWxhdG9yTW9kZSBmcm9tIFwiLi9tb2Rlcy9jYWxjdWxhdG9yL0NhbGN1bGF0b3JcIjtcbi8vIGltcG9ydCBDbGlwYm9hcmRNb2RlIGZyb20gXCIuL21vZGVzL2NsaXBib2FyZC9DbGlwYm9hcmRcIjtcbmltcG9ydCB7IGRlZmF1bHRDb25maWcgfSBmcm9tIFwiQC9jb25zdGFudHMvY29uZmlnXCI7XG5pbXBvcnQgeyB0eXBlIEdkaywgR3RrIH0gZnJvbSBcImFncy9ndGs0XCI7XG5pbXBvcnQgeyBjb25maWcgfSBmcm9tIFwiQC91dGlsL2NvbmZpZ1wiO1xuaW1wb3J0IEFwcE1vZGUgZnJvbSBcIi4vbW9kZXMvYXBwL0FwcFwiO1xuaW1wb3J0IHsgYmFySGVpZ2h0IH0gZnJvbSBcIkAvYmFyL0JhclwiO1xuaW1wb3J0IHsgc2xlZXAgfSBmcm9tIFwiQC91dGlsL3RpbWVyXCI7XG5pbXBvcnQgQWR3IGZyb20gXCJnaTovL0Fkd1wiO1xuXG5leHBvcnQgdHlwZSBMYXVuY2hlck1vZGUgPSBcImNsb3NlZFwiIHwgXCJjYWxjdWxhdG9yXCIgfCBcImFwcFwiIHwgXCJjbGlwYm9hcmRcIjtcbmV4cG9ydCBpbnRlcmZhY2UgUHJlc3NlZEtleSB7XG5cdGtleXZhbDogbnVtYmVyO1xuXHRtb2RpZmllcjogbnVtYmVyO1xufVxuXG5pbnRlcmZhY2UgUHJvcHMge1xuXHRnZGttb25pdG9yOiBHZGsuTW9uaXRvcjtcblx0bW9kZTogQWNjZXNzb3I8TGF1bmNoZXJNb2RlPjtcblx0c2V0TW9kZTogU2V0dGVyPExhdW5jaGVyTW9kZT47XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIExhdW5jaGVyKHsgZ2RrbW9uaXRvciwgbW9kZSwgc2V0TW9kZSB9OiBQcm9wcykge1xuXHRjb25zdCBbc2VhcmNoVmFsdWUsIHNldFNlYXJjaFZhbHVlXSA9IGNyZWF0ZVN0YXRlPHN0cmluZyB8IG51bGw+KG51bGwpO1xuXHRjb25zdCBbcHJlc3NlZEtleSwgc2V0UHJlc3NlZEtleV0gPSBjcmVhdGVTdGF0ZTxQcmVzc2VkS2V5IHwgbnVsbD4obnVsbCk7XG5cdGNvbnN0IFtjbG9zZWQsIHNldENsb3NlZF0gPSBjcmVhdGVTdGF0ZShmYWxzZSk7XG5cblx0bGV0IGVudHJ5OiBHdGsuRW50cnkgfCBudWxsID0gbnVsbDtcblxuXHRtb2RlLnN1YnNjcmliZSgoKSA9PiB7XG5cdFx0aWYgKG1vZGUuZ2V0KCkgIT09IFwiY2xvc2VkXCIgJiYgZW50cnkpIGVudHJ5LmdyYWJfZm9jdXMoKTtcblx0fSk7XG5cblx0Y29uc3QgW2VudGVyUHJlc3NlZCwgc2V0RW50ZXJQcmVzc2VkXSA9IGNyZWF0ZVN0YXRlKGZhbHNlKTtcblxuXHRjb25zdCBtYXhXaWR0aCA9IGdka21vbml0b3IuZ2VvbWV0cnkud2lkdGggKiAwLjU7XG5cdGNvbnN0IG1heEhlaWdodCA9IGdka21vbml0b3IuZ2VvbWV0cnkuaGVpZ2h0ICogMC41O1xuXG5cdGZ1bmN0aW9uIGNsb3NlKCkge1xuXHRcdHNldE1vZGUoXCJjbG9zZWRcIik7XG5cdFx0c2V0U2VhcmNoVmFsdWUobnVsbCk7XG5cblx0XHRpZiAoZW50cnkpIGVudHJ5LnNldF90ZXh0KFwiXCIpO1xuXHR9XG5cblx0ZnVuY3Rpb24gZW1wdHlTZWFyY2goKSB7XG5cdFx0c2V0U2VhcmNoVmFsdWUobnVsbCk7XG5cblx0XHRpZiAoZW50cnkpIGVudHJ5LnNldF90ZXh0KFwiXCIpO1xuXHR9XG5cblx0ZnVuY3Rpb24gaGFuZGxlS2V5UHJlc3MoXG5cdFx0X2U6IEd0ay5FdmVudENvbnRyb2xsZXJLZXksXG5cdFx0a2V5dmFsOiBudW1iZXIsXG5cdFx0X2tleWNvZGU6IG51bWJlcixcblx0XHRtb2RpZmllcjogbnVtYmVyLFxuXHQpIHtcblx0XHRzZXRQcmVzc2VkS2V5KHtcblx0XHRcdGtleXZhbCxcblx0XHRcdG1vZGlmaWVyLFxuXHRcdH0pO1xuXHR9XG5cblx0ZnVuY3Rpb24gaGFuZGxlSW5wdXRDaGFuZ2UoKSB7XG5cdFx0aWYgKCFlbnRyeSkgcmV0dXJuO1xuXG5cdFx0Y29uc3QgdGV4dCA9IGVudHJ5LmdldF90ZXh0KCk7XG5cblx0XHRzZXRTZWFyY2hWYWx1ZSh0ZXh0Lmxlbmd0aCA+IDAgPyB0ZXh0IDogbnVsbCk7XG5cdH1cblxuXHRmdW5jdGlvbiBoYW5kbGVJbnB1dEVudGVyKCkge1xuXHRcdHNldEVudGVyUHJlc3NlZCh0cnVlKTtcblx0XHRzZXRFbnRlclByZXNzZWQoZmFsc2UpO1xuXHR9XG5cblx0cmV0dXJuIChcblx0XHQ8R3RrLldpbmRvd1xuXHRcdFx0Y2xhc3M9XCJsYXVuY2hlclwiXG5cdFx0XHR0aXRsZT1cIkFHUyBMYXVuY2hlclwiXG5cdFx0XHRkaXNwbGF5PXtnZGttb25pdG9yLmRpc3BsYXl9XG5cdFx0XHRyZXNpemFibGU9e2ZhbHNlfVxuXHRcdFx0b25DbG9zZVJlcXVlc3Q9eygpID0+IHtcblx0XHRcdFx0Y2xvc2UoKTtcblxuXHRcdFx0XHRzZXRDbG9zZWQodHJ1ZSk7XG5cdFx0XHRcdHNldENsb3NlZChmYWxzZSk7XG5cdFx0XHR9fVxuXHRcdFx0JD17KHNlbGYpID0+IHtcblx0XHRcdFx0Y29uc3QgcmV2ZWFsZXIgPSBzZWxmLmNoaWxkIGFzIEd0ay5SZXZlYWxlcjtcblx0XHRcdFx0Y29uc3QgdHJhbnNpdGlvbkR1cmF0aW9uID0gcmV2ZWFsZXIuZ2V0X3RyYW5zaXRpb25fZHVyYXRpb24oKTtcblxuXHRcdFx0XHRtb2RlLnN1YnNjcmliZShhc3luYyAoKSA9PiB7XG5cdFx0XHRcdFx0Y29uc3QgY2xhc3NlcyA9IHNlbGYuY3NzQ2xhc3Nlcztcblx0XHRcdFx0XHRjb25zdCB2aXNpYmxlID0gbW9kZS5nZXQoKSAhPT0gXCJjbG9zZWRcIjtcblxuXHRcdFx0XHRcdGlmICghdmlzaWJsZSkge1xuXHRcdFx0XHRcdFx0cmV2ZWFsZXIuc2V0X3JldmVhbF9jaGlsZCh2aXNpYmxlKTtcblx0XHRcdFx0XHRcdHNlbGYuc2V0X2Nzc19jbGFzc2VzKFxuXHRcdFx0XHRcdFx0XHRjbGFzc2VzLmZpbHRlcigoY2xhc3NOYW1lKSA9PiBjbGFzc05hbWUgIT09IFwib3BlblwiKSxcblx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdGF3YWl0IHNsZWVwKHRyYW5zaXRpb25EdXJhdGlvbik7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0c2VsZi5zZXRfdmlzaWJsZSh2aXNpYmxlKTtcblxuXHRcdFx0XHRcdGlmICh2aXNpYmxlKSB7XG5cdFx0XHRcdFx0XHRyZXZlYWxlci5zZXRfcmV2ZWFsX2NoaWxkKHZpc2libGUpO1xuXHRcdFx0XHRcdFx0c2VsZi5zZXRfY3NzX2NsYXNzZXMoWy4uLmNsYXNzZXMsIFwib3BlblwiXSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblx0XHRcdH19XG5cdFx0PlxuXHRcdFx0PEd0ay5FdmVudENvbnRyb2xsZXJLZXkgb25LZXlQcmVzc2VkPXtoYW5kbGVLZXlQcmVzc30gLz5cblxuXHRcdFx0PHJldmVhbGVyXG5cdFx0XHRcdHRyYW5zaXRpb25EdXJhdGlvbj17Y29uZmlnKFxuXHRcdFx0XHRcdChjZmcpID0+XG5cdFx0XHRcdFx0XHRjZmcuYW5pbWF0aW9uc0R1cmF0aW9uPy5sYXVuY2hlciA/P1xuXHRcdFx0XHRcdFx0ZGVmYXVsdENvbmZpZy5hbmltYXRpb25zRHVyYXRpb24ubGF1bmNoZXIsXG5cdFx0XHRcdCl9XG5cdFx0XHRcdHRyYW5zaXRpb25UeXBlPXtjb25maWcoXG5cdFx0XHRcdFx0KGNmZykgPT5cblx0XHRcdFx0XHRcdEd0ay5SZXZlYWxlclRyYW5zaXRpb25UeXBlW1xuXHRcdFx0XHRcdFx0XHRjZmcuYW5pbWF0aW9uc1R5cGU/LmxhdW5jaGVyID8/XG5cdFx0XHRcdFx0XHRcdFx0ZGVmYXVsdENvbmZpZy5hbmltYXRpb25zVHlwZS5sYXVuY2hlclxuXHRcdFx0XHRcdFx0XSxcblx0XHRcdFx0KX1cblx0XHRcdD5cblx0XHRcdFx0PEFkdy5DbGFtcFxuXHRcdFx0XHRcdG9yaWVudGF0aW9uPXtHdGsuT3JpZW50YXRpb24uVkVSVElDQUx9XG5cdFx0XHRcdFx0bWF4aW11bVNpemU9e21heEhlaWdodH1cblx0XHRcdFx0PlxuXHRcdFx0XHRcdDxBZHcuQ2xhbXAgbWF4aW11bVNpemU9e21heFdpZHRofT5cblx0XHRcdFx0XHRcdDxib3hcblx0XHRcdFx0XHRcdFx0d2lkdGhSZXF1ZXN0PXttYXhXaWR0aH1cblx0XHRcdFx0XHRcdFx0aGVpZ2h0UmVxdWVzdD17bWF4SGVpZ2h0fVxuXHRcdFx0XHRcdFx0XHRoZXhwYW5kXG5cdFx0XHRcdFx0XHRcdGNsYXNzPVwibGF1bmNoZXItY29udGFpbmVyXCJcblx0XHRcdFx0XHRcdFx0b3JpZW50YXRpb249e0d0ay5PcmllbnRhdGlvbi5WRVJUSUNBTH1cblx0XHRcdFx0XHRcdFx0bWFyZ2luVG9wPXtiYXJIZWlnaHR9XG5cdFx0XHRcdFx0XHQ+XG5cdFx0XHRcdFx0XHRcdDxlbnRyeVxuXHRcdFx0XHRcdFx0XHRcdGNsYXNzPVwic2VhcmNoLWVudHJ5XCJcblx0XHRcdFx0XHRcdFx0XHRvbk5vdGlmeUN1cnNvclBvc2l0aW9uPXtoYW5kbGVJbnB1dENoYW5nZX1cblx0XHRcdFx0XHRcdFx0XHRvbkFjdGl2YXRlPXtoYW5kbGVJbnB1dEVudGVyfVxuXHRcdFx0XHRcdFx0XHRcdCQ9eyhzZWxmKSA9PiB7XG5cdFx0XHRcdFx0XHRcdFx0XHRlbnRyeSA9IHNlbGY7XG5cdFx0XHRcdFx0XHRcdFx0fX1cblx0XHRcdFx0XHRcdFx0Lz5cblxuXHRcdFx0XHRcdFx0XHQ8R3RrLlNlcGFyYXRvciB2aXNpYmxlIC8+XG5cblx0XHRcdFx0XHRcdFx0PHNjcm9sbGVkd2luZG93XG5cdFx0XHRcdFx0XHRcdFx0cHJvcGFnYXRlTmF0dXJhbEhlaWdodFxuXHRcdFx0XHRcdFx0XHRcdHByb3BhZ2F0ZU5hdHVyYWxXaWR0aFxuXHRcdFx0XHRcdFx0XHRcdGhzY3JvbGxiYXJQb2xpY3k9e0d0ay5Qb2xpY3lUeXBlLk5FVkVSfVxuXHRcdFx0XHRcdFx0XHQ+XG5cdFx0XHRcdFx0XHRcdFx0PGJveCBvcmllbnRhdGlvbj17R3RrLk9yaWVudGF0aW9uLlZFUlRJQ0FMfT5cblx0XHRcdFx0XHRcdFx0XHRcdDxBcHBNb2RlXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGNsb3NlPXtjbG9zZX1cblx0XHRcdFx0XHRcdFx0XHRcdFx0c2VhcmNoVmFsdWU9e3NlYXJjaFZhbHVlfVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRlbnRlclByZXNzZWQ9e2VudGVyUHJlc3NlZH1cblx0XHRcdFx0XHRcdFx0XHRcdFx0cHJlc3NlZEtleT17cHJlc3NlZEtleX1cblx0XHRcdFx0XHRcdFx0XHRcdFx0ZW50cnk9e2VudHJ5fVxuXHRcdFx0XHRcdFx0XHRcdFx0XHR2aXNpYmxlPXttb2RlKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdChjdXJyZW50TW9kZSkgPT5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGN1cnJlbnRNb2RlID09PSBcImFwcFwiLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQpfVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRjbG9zZWQ9e2Nsb3NlZH1cblx0XHRcdFx0XHRcdFx0XHRcdC8+XG5cblx0XHRcdFx0XHRcdFx0XHRcdDxDYWxjdWxhdG9yTW9kZVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRjbG9zZT17Y2xvc2V9XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHNlYXJjaFZhbHVlPXtzZWFyY2hWYWx1ZX1cblx0XHRcdFx0XHRcdFx0XHRcdFx0ZW1wdHlTZWFyY2g9e2VtcHR5U2VhcmNofVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRlbnRlclByZXNzZWQ9e2VudGVyUHJlc3NlZH1cblx0XHRcdFx0XHRcdFx0XHRcdFx0cHJlc3NlZEtleT17cHJlc3NlZEtleX1cblx0XHRcdFx0XHRcdFx0XHRcdFx0dmlzaWJsZT17bW9kZShcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQoY3VycmVudE1vZGUpID0+XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRjdXJyZW50TW9kZSA9PT0gXCJjYWxjdWxhdG9yXCIsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdCl9XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGNsb3NlZD17Y2xvc2VkfVxuXHRcdFx0XHRcdFx0XHRcdFx0Lz5cblxuXHRcdFx0XHRcdFx0XHRcdFx0ey8qIDxDbGlwYm9hcmRNb2RlXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGNsb3NlPXtjbG9zZX1cblx0XHRcdFx0XHRcdFx0XHRcdFx0c2VhcmNoVmFsdWU9e3NlYXJjaFZhbHVlfVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRlbnRlclByZXNzZWQ9e2VudGVyUHJlc3NlZH1cblx0XHRcdFx0XHRcdFx0XHRcdFx0cHJlc3NlZEtleT17cHJlc3NlZEtleX1cblx0XHRcdFx0XHRcdFx0XHRcdFx0dmlzaWJsZT17bW9kZShcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQoY3VycmVudE1vZGUpID0+XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRjdXJyZW50TW9kZSA9PT0gXCJjbGlwYm9hcmRcIixcblx0XHRcdFx0XHRcdFx0XHRcdFx0KX1cblx0XHRcdFx0XHRcdFx0XHRcdC8+ICovfVxuXHRcdFx0XHRcdFx0XHRcdDwvYm94PlxuXHRcdFx0XHRcdFx0XHQ8L3Njcm9sbGVkd2luZG93PlxuXHRcdFx0XHRcdFx0PC9ib3g+XG5cdFx0XHRcdFx0PC9BZHcuQ2xhbXA+XG5cdFx0XHRcdDwvQWR3LkNsYW1wPlxuXHRcdFx0PC9yZXZlYWxlcj5cblx0XHQ8L0d0ay5XaW5kb3c+XG5cdCk7XG59XG4iLCAiaW1wb3J0IE5vdGlmZCBmcm9tIFwiZ2k6Ly9Bc3RhbE5vdGlmZFwiO1xuXG5leHBvcnQgZnVuY3Rpb24gdXJnZW5jeSh1cmdlbmN5OiBOb3RpZmQuVXJnZW5jeSkge1xuXHRjb25zdCB7IExPVywgQ1JJVElDQUwgfSA9IE5vdGlmZC5VcmdlbmN5O1xuXG5cdHN3aXRjaCAodXJnZW5jeSkge1xuXHRcdGNhc2UgTE9XOiB7XG5cdFx0XHRyZXR1cm4gXCJsb3dcIjtcblx0XHR9XG5cblx0XHRjYXNlIENSSVRJQ0FMOiB7XG5cdFx0XHRyZXR1cm4gXCJjcml0aWNhbFwiO1xuXHRcdH1cblxuXHRcdGRlZmF1bHQ6IHtcblx0XHRcdHJldHVybiBcIm5vcm1hbFwiO1xuXHRcdH1cblx0fVxufVxuIiwgImltcG9ydCB7IGVzY2FwZU1hcmt1cCwgcGFyc2VNYXJrZG93biB9IGZyb20gXCJAL3V0aWwvdGV4dFwiO1xuaW1wb3J0IHsgZGVmYXVsdENvbmZpZyB9IGZyb20gXCJAL2NvbnN0YW50cy9jb25maWdcIjtcbmltcG9ydCB7IHNsZWVwLCBUaW1lciB9IGZyb20gXCJAL3V0aWwvdGltZXJcIjtcbmltcG9ydCB0eXBlIE5vdGlmZCBmcm9tIFwiZ2k6Ly9Bc3RhbE5vdGlmZFwiO1xuaW1wb3J0IHsgZmlsZUV4aXN0cyB9IGZyb20gXCJAL3V0aWwvZmlsZVwiO1xuaW1wb3J0IHsgdGltZSB9IGZyb20gXCJAL3V0aWwvZm9ybWF0VGltZVwiO1xuaW1wb3J0IHsgdXJnZW5jeSB9IGZyb20gXCJAL3V0aWwvbm90aWZcIjtcbmltcG9ydCB7IGNvbmZpZyB9IGZyb20gXCJAL3V0aWwvY29uZmlnXCI7XG5pbXBvcnQgeyBpc0ljb24gfSBmcm9tIFwiQC91dGlsL2ljb25zXCI7XG5pbXBvcnQgeyBjcmVhdGVTdGF0ZSB9IGZyb20gXCJhZ3NcIjtcbmltcG9ydCBQYW5nbyBmcm9tIFwiZ2k6Ly9QYW5nb1wiO1xuaW1wb3J0IHsgR2RrIH0gZnJvbSBcImFncy9ndGs0XCI7XG5pbXBvcnQgR3RrIGZyb20gXCJnaTovL0d0a1wiO1xuaW1wb3J0IEFkdyBmcm9tIFwiZ2k6Ly9BZHdcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTm90aWZpY2F0aW9uKHtcblx0bm90aWZpY2F0aW9uLFxuXHRvbkhpZGUsXG5cdGlzTm90aWZpY2F0aW9uQ2VudGVyID0gZmFsc2UsXG59OiB7XG5cdG5vdGlmaWNhdGlvbjogTm90aWZkLk5vdGlmaWNhdGlvbjtcblx0b25IaWRlOiAobm90aWZpY2F0aW9uOiBOb3RpZmQuTm90aWZpY2F0aW9uKSA9PiB2b2lkO1xuXHRpc05vdGlmaWNhdGlvbkNlbnRlcj86IGJvb2xlYW47XG59KSB7XG5cdGNvbnN0IG5vdGlmaWNhdGlvbkFjdGlvbnMgPSBub3RpZmljYXRpb24uYWN0aW9ucy5maWx0ZXIoXG5cdFx0KGFjdGlvbikgPT4gYWN0aW9uLmlkICE9PSBcImRlZmF1bHRcIixcblx0KTtcblx0Y29uc3QgZGVmYXVsdEFjdGlvbiA9IG5vdGlmaWNhdGlvbi5hY3Rpb25zLmZpbmQoXG5cdFx0KGFjdGlvbikgPT4gYWN0aW9uLmlkID09PSBcImRlZmF1bHRcIixcblx0KTtcblxuXHRjb25zdCBleHBpcmVUaW1lb3V0ID1cblx0XHRub3RpZmljYXRpb24uZXhwaXJlVGltZW91dCA9PT0gLTFcblx0XHRcdD8gKGNvbmZpZy5nZXQoKS50aW1lb3V0cz8uZGVmYXVsdE5vdGlmaWNhdGlvbkV4cGlyZSA/P1xuXHRcdFx0XHRkZWZhdWx0Q29uZmlnLnRpbWVvdXRzLmRlZmF1bHROb3RpZmljYXRpb25FeHBpcmUpXG5cdFx0XHQ6IG5vdGlmaWNhdGlvbi5leHBpcmVUaW1lb3V0O1xuXG5cdGNvbnN0IHRpbWVyID0gbmV3IFRpbWVyKGV4cGlyZVRpbWVvdXQpO1xuXG5cdGNvbnN0IFtwcm9ncmVzc0JhckZyYWN0aW9uLCBzZXRQcm9ncmVzc0JhckZyYWN0aW9uXSA9XG5cdFx0Y3JlYXRlU3RhdGU8bnVtYmVyPigxKTtcblx0Y29uc3QgW2lzSGlkZGVuLCBzZXRJc0hpZGRlbl0gPSBjcmVhdGVTdGF0ZShmYWxzZSk7XG5cblx0dGltZXIuc3Vic2NyaWJlKGFzeW5jICgpID0+IHtcblx0XHRzZXRQcm9ncmVzc0JhckZyYWN0aW9uKDEgLSB0aW1lci50aW1lTGVmdCAvIHRpbWVyLnRpbWVvdXQpO1xuXG5cdFx0aWYgKHRpbWVyLnRpbWVMZWZ0IDw9IDApIHtcblx0XHRcdHNldElzSGlkZGVuKHRydWUpO1xuXG5cdFx0XHRhd2FpdCBzbGVlcChcblx0XHRcdFx0KGNvbmZpZy5nZXQoKS5hbmltYXRpb25zRHVyYXRpb24/Lm5vdGlmaWNhdGlvbiA/P1xuXHRcdFx0XHRcdGRlZmF1bHRDb25maWcuYW5pbWF0aW9uc0R1cmF0aW9uLm5vdGlmaWNhdGlvbikgLVxuXHRcdFx0XHRcdChjb25maWcuZ2V0KCkuYW5pbWF0aW9uc0R1cmF0aW9uPy5ub3RpZmljYXRpb24gPz9cblx0XHRcdFx0XHRcdGRlZmF1bHRDb25maWcuYW5pbWF0aW9uc0R1cmF0aW9uLm5vdGlmaWNhdGlvbikgKlxuXHRcdFx0XHRcdFx0MC42LFxuXHRcdFx0KTtcblxuXHRcdFx0b25IaWRlKG5vdGlmaWNhdGlvbik7XG5cdFx0fVxuXHR9KTtcblxuXHRpZiAoaXNOb3RpZmljYXRpb25DZW50ZXIpIHtcblx0XHR0aW1lci5jYW5jZWwoKTtcblx0fVxuXG5cdGZ1bmN0aW9uIGhhbmRsZUxlZnRDbGljaygpIHtcblx0XHRpZiAoIWRlZmF1bHRBY3Rpb24pIHJldHVybjtcblxuXHRcdG5vdGlmaWNhdGlvbi5pbnZva2UoZGVmYXVsdEFjdGlvbi5pZCk7XG5cblx0XHRpZiAoIWlzTm90aWZpY2F0aW9uQ2VudGVyKSB0aW1lci5jYW5jZWwoKTtcblx0fVxuXG5cdGZ1bmN0aW9uIGhhbmRsZVJpZ2h0Q2xpY2soKSB7XG5cdFx0b25IaWRlKG5vdGlmaWNhdGlvbik7XG5cblx0XHRpZiAoIWlzTm90aWZpY2F0aW9uQ2VudGVyKSB0aW1lci5jYW5jZWwoKTtcblx0fVxuXG5cdGZ1bmN0aW9uIGhhbmRsZU1pZGRsZUNsaWNrKCkge1xuXHRcdG5vdGlmaWNhdGlvbi5kaXNtaXNzKCk7XG5cblx0XHRpZiAoIWlzTm90aWZpY2F0aW9uQ2VudGVyKSB0aW1lci5jYW5jZWwoKTtcblx0fVxuXG5cdGZ1bmN0aW9uIGhhbmRsZUhvdmVyRW50ZXIoKSB7XG5cdFx0dGltZXIuaXNQYXVzZWQgPSB0cnVlO1xuXHR9XG5cblx0ZnVuY3Rpb24gaGFuZGxlSG92ZXJMZWF2ZSgpIHtcblx0XHR0aW1lci5pc1BhdXNlZCA9IGZhbHNlO1xuXHR9XG5cblx0Lypcblx0XHRub3QgdGhlIGJlc3QgbG9va2luZyB0aGluZyBidXQgaXQncyB0aGUgb25seSB3b3JrYXJvdW5kIGkgZm91bmQgYmVjYXVzZSB3aXRoXG5cdFx0anVzdCAxIEd0ay5HZXN0dXJlQ2xpY2sgaXQnZCB0YWtlIHByZWNlZGVuY2Ugb3ZlciB0aGUgYnV0dG9uIHNvIGkgaGFkIHRvXG5cdFx0Y3JlYXRlIDEgbWFpbiArIG1hbnkgc2Vjb25kYXJ5IGluIGVhY2ggc3VidHJlZSBleGNlcHQgdGhlIGJ1dHRvbiBvbmVcblx0Ki9cblx0ZnVuY3Rpb24gZ2V0TGVmdENsaWNrQ29tcG9uZW50KG1haW4/OiBib29sZWFuKSB7XG5cdFx0cmV0dXJuIChcblx0XHRcdDxHdGsuR2VzdHVyZUNsaWNrXG5cdFx0XHRcdGJ1dHRvbj17R2RrLkJVVFRPTl9QUklNQVJZfVxuXHRcdFx0XHRvblByZXNzZWQ9e2hhbmRsZUxlZnRDbGlja31cblx0XHRcdFx0cHJvcGFnYXRpb25QaGFzZT17XG5cdFx0XHRcdFx0bWFpbiA/IEd0ay5Qcm9wYWdhdGlvblBoYXNlLlRBUkdFVCA6IHVuZGVmaW5lZFxuXHRcdFx0XHR9XG5cdFx0XHQvPlxuXHRcdCk7XG5cdH1cblxuXHRyZXR1cm4gKFxuXHRcdDxyZXZlYWxlclxuXHRcdFx0dHJhbnNpdGlvbkR1cmF0aW9uPXtjb25maWcoXG5cdFx0XHRcdChjZmcpID0+XG5cdFx0XHRcdFx0Y2ZnLmFuaW1hdGlvbnNEdXJhdGlvbj8ubm90aWZpY2F0aW9uID8/XG5cdFx0XHRcdFx0ZGVmYXVsdENvbmZpZy5hbmltYXRpb25zRHVyYXRpb24ubm90aWZpY2F0aW9uLFxuXHRcdFx0KX1cblx0XHRcdHRyYW5zaXRpb25UeXBlPXtcblx0XHRcdFx0aXNOb3RpZmljYXRpb25DZW50ZXJcblx0XHRcdFx0XHQ/IEd0ay5SZXZlYWxlclRyYW5zaXRpb25UeXBlLk5PTkVcblx0XHRcdFx0XHQ6IEd0ay5SZXZlYWxlclRyYW5zaXRpb25UeXBlLlNMSURFX0xFRlRcblx0XHRcdH1cblx0XHRcdCQ9e2FzeW5jIChzZWxmKSA9PiB7XG5cdFx0XHRcdGlmIChpc05vdGlmaWNhdGlvbkNlbnRlcikgc2VsZi5zZXRfcmV2ZWFsX2NoaWxkKHRydWUpO1xuXHRcdFx0XHRlbHNlIHtcblx0XHRcdFx0XHRhd2FpdCBzbGVlcCgxMDApO1xuXHRcdFx0XHRcdHNlbGYuc2V0X3JldmVhbF9jaGlsZCghaXNIaWRkZW4uZ2V0KCkpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Y29uc3QgdW5zdWJzY3JpYmUgPSBpc0hpZGRlbi5zdWJzY3JpYmUoKCkgPT4ge1xuXHRcdFx0XHRcdGNvbnN0IGhpZGRlbiA9IGlzSGlkZGVuLmdldCgpO1xuXG5cdFx0XHRcdFx0aWYgKGhpZGRlbikge1xuXHRcdFx0XHRcdFx0c2VsZi5zZXRfcmV2ZWFsX2NoaWxkKGZhbHNlKTtcblx0XHRcdFx0XHRcdHVuc3Vic2NyaWJlKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblx0XHRcdH19XG5cdFx0PlxuXHRcdFx0PEFkdy5DbGFtcCBtYXhpbXVtU2l6ZT17NTMwfT5cblx0XHRcdFx0PGJveFxuXHRcdFx0XHRcdGN1cnNvcj17XG5cdFx0XHRcdFx0XHRkZWZhdWx0QWN0aW9uXG5cdFx0XHRcdFx0XHRcdD8gR2RrLkN1cnNvci5uZXdfZnJvbV9uYW1lKFwicG9pbnRlclwiLCBudWxsKVxuXHRcdFx0XHRcdFx0XHQ6IHVuZGVmaW5lZFxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR3aWR0aFJlcXVlc3Q9ezUzMH1cblx0XHRcdFx0XHRjbGFzcz17YG5vdGlmaWNhdGlvbiAke3VyZ2VuY3kobm90aWZpY2F0aW9uLnVyZ2VuY3kpfSAke2lzTm90aWZpY2F0aW9uQ2VudGVyID8gXCJjZW50ZXJcIiA6IFwiXCJ9YH1cblx0XHRcdFx0XHRvcmllbnRhdGlvbj17R3RrLk9yaWVudGF0aW9uLlZFUlRJQ0FMfVxuXHRcdFx0XHQ+XG5cdFx0XHRcdFx0eyFpc05vdGlmaWNhdGlvbkNlbnRlciAmJiAoXG5cdFx0XHRcdFx0XHQ8R3RrLkV2ZW50Q29udHJvbGxlck1vdGlvblxuXHRcdFx0XHRcdFx0XHRvbkVudGVyPXtoYW5kbGVIb3ZlckVudGVyfVxuXHRcdFx0XHRcdFx0XHRvbkxlYXZlPXtoYW5kbGVIb3ZlckxlYXZlfVxuXHRcdFx0XHRcdFx0Lz5cblx0XHRcdFx0XHQpfVxuXG5cdFx0XHRcdFx0e2dldExlZnRDbGlja0NvbXBvbmVudCh0cnVlKX1cblxuXHRcdFx0XHRcdDxHdGsuR2VzdHVyZUNsaWNrXG5cdFx0XHRcdFx0XHRidXR0b249e0dkay5CVVRUT05fU0VDT05EQVJZfVxuXHRcdFx0XHRcdFx0b25QcmVzc2VkPXtoYW5kbGVSaWdodENsaWNrfVxuXHRcdFx0XHRcdC8+XG5cblx0XHRcdFx0XHQ8R3RrLkdlc3R1cmVDbGlja1xuXHRcdFx0XHRcdFx0YnV0dG9uPXtHZGsuQlVUVE9OX01JRERMRX1cblx0XHRcdFx0XHRcdG9uUHJlc3NlZD17aGFuZGxlTWlkZGxlQ2xpY2t9XG5cdFx0XHRcdFx0Lz5cblxuXHRcdFx0XHRcdDxib3ggY2xhc3M9XCJoZWFkZXJcIj5cblx0XHRcdFx0XHRcdHtnZXRMZWZ0Q2xpY2tDb21wb25lbnQoKX1cblxuXHRcdFx0XHRcdFx0eyhub3RpZmljYXRpb24uYXBwSWNvbiB8fFxuXHRcdFx0XHRcdFx0XHRpc0ljb24obm90aWZpY2F0aW9uLmRlc2t0b3BFbnRyeSkpICYmIChcblx0XHRcdFx0XHRcdFx0PGltYWdlXG5cdFx0XHRcdFx0XHRcdFx0Y2xhc3M9XCJhcHAtaWNvblwiXG5cdFx0XHRcdFx0XHRcdFx0dmlzaWJsZT17Qm9vbGVhbihcblx0XHRcdFx0XHRcdFx0XHRcdG5vdGlmaWNhdGlvbi5hcHBJY29uIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vdGlmaWNhdGlvbi5kZXNrdG9wRW50cnksXG5cdFx0XHRcdFx0XHRcdFx0KX1cblx0XHRcdFx0XHRcdFx0XHRpY29uTmFtZT17XG5cdFx0XHRcdFx0XHRcdFx0XHRub3RpZmljYXRpb24uYXBwSWNvbiB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0bm90aWZpY2F0aW9uLmRlc2t0b3BFbnRyeVxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0Lz5cblx0XHRcdFx0XHRcdCl9XG5cblx0XHRcdFx0XHRcdDxsYWJlbFxuXHRcdFx0XHRcdFx0XHRjbGFzcz1cImFwcC1uYW1lXCJcblx0XHRcdFx0XHRcdFx0aGFsaWduPXtHdGsuQWxpZ24uU1RBUlR9XG5cdFx0XHRcdFx0XHRcdGVsbGlwc2l6ZT17UGFuZ28uRWxsaXBzaXplTW9kZS5FTkR9XG5cdFx0XHRcdFx0XHRcdGxhYmVsPXtub3RpZmljYXRpb24uYXBwTmFtZSB8fCBcIlVua25vd25cIn1cblx0XHRcdFx0XHRcdC8+XG5cblx0XHRcdFx0XHRcdDxsYWJlbFxuXHRcdFx0XHRcdFx0XHRjbGFzcz1cInRpbWVcIlxuXHRcdFx0XHRcdFx0XHRoZXhwYW5kXG5cdFx0XHRcdFx0XHRcdGhhbGlnbj17R3RrLkFsaWduLkVORH1cblx0XHRcdFx0XHRcdFx0bGFiZWw9e3RpbWUobm90aWZpY2F0aW9uLnRpbWUpfVxuXHRcdFx0XHRcdFx0Lz5cblx0XHRcdFx0XHQ8L2JveD5cblxuXHRcdFx0XHRcdDxHdGsuU2VwYXJhdG9yIHZpc2libGUgLz5cblxuXHRcdFx0XHRcdDxib3ggY2xhc3M9XCJjb250ZW50XCI+XG5cdFx0XHRcdFx0XHR7Z2V0TGVmdENsaWNrQ29tcG9uZW50KCl9XG5cblx0XHRcdFx0XHRcdHtub3RpZmljYXRpb24uaW1hZ2UgJiZcblx0XHRcdFx0XHRcdFx0ZmlsZUV4aXN0cyhub3RpZmljYXRpb24uaW1hZ2UpICYmIChcblx0XHRcdFx0XHRcdFx0XHQ8aW1hZ2Vcblx0XHRcdFx0XHRcdFx0XHRcdHZhbGlnbj17R3RrLkFsaWduLlNUQVJUfVxuXHRcdFx0XHRcdFx0XHRcdFx0Y2xhc3M9XCJpbWFnZVwiXG5cdFx0XHRcdFx0XHRcdFx0XHRmaWxlPXtub3RpZmljYXRpb24uaW1hZ2V9XG5cdFx0XHRcdFx0XHRcdFx0Lz5cblx0XHRcdFx0XHRcdFx0KX1cblxuXHRcdFx0XHRcdFx0e25vdGlmaWNhdGlvbi5pbWFnZSAmJiBpc0ljb24obm90aWZpY2F0aW9uLmltYWdlKSAmJiAoXG5cdFx0XHRcdFx0XHRcdDxib3ggdmFsaWduPXtHdGsuQWxpZ24uU1RBUlR9IGNsYXNzPVwiaWNvbi1pbWFnZVwiPlxuXHRcdFx0XHRcdFx0XHRcdDxpbWFnZVxuXHRcdFx0XHRcdFx0XHRcdFx0aWNvbk5hbWU9e25vdGlmaWNhdGlvbi5pbWFnZX1cblx0XHRcdFx0XHRcdFx0XHRcdGhhbGlnbj17R3RrLkFsaWduLkNFTlRFUn1cblx0XHRcdFx0XHRcdFx0XHRcdHZhbGlnbj17R3RrLkFsaWduLkNFTlRFUn1cblx0XHRcdFx0XHRcdFx0XHQvPlxuXHRcdFx0XHRcdFx0XHQ8L2JveD5cblx0XHRcdFx0XHRcdCl9XG5cblx0XHRcdFx0XHRcdDxib3ggb3JpZW50YXRpb249e0d0ay5PcmllbnRhdGlvbi5WRVJUSUNBTH0+XG5cdFx0XHRcdFx0XHRcdDxsYWJlbFxuXHRcdFx0XHRcdFx0XHRcdGNsYXNzPVwic3VtbWFyeVwiXG5cdFx0XHRcdFx0XHRcdFx0aGFsaWduPXtHdGsuQWxpZ24uU1RBUlR9XG5cdFx0XHRcdFx0XHRcdFx0eGFsaWduPXswfVxuXHRcdFx0XHRcdFx0XHRcdGxhYmVsPXtwYXJzZU1hcmtkb3duKFxuXHRcdFx0XHRcdFx0XHRcdFx0ZXNjYXBlTWFya3VwKG5vdGlmaWNhdGlvbi5zdW1tYXJ5KSxcblx0XHRcdFx0XHRcdFx0XHQpfVxuXHRcdFx0XHRcdFx0XHRcdHVzZU1hcmt1cFxuXHRcdFx0XHRcdFx0XHRcdGVsbGlwc2l6ZT17UGFuZ28uRWxsaXBzaXplTW9kZS5FTkR9XG5cdFx0XHRcdFx0XHRcdFx0d3JhcE1vZGU9e1BhbmdvLldyYXBNb2RlLkNIQVJ9XG5cdFx0XHRcdFx0XHRcdC8+XG5cblx0XHRcdFx0XHRcdFx0e25vdGlmaWNhdGlvbi5ib2R5ICYmIChcblx0XHRcdFx0XHRcdFx0XHQ8bGFiZWxcblx0XHRcdFx0XHRcdFx0XHRcdGNsYXNzPVwiYm9keVwiXG5cdFx0XHRcdFx0XHRcdFx0XHR3cmFwXG5cdFx0XHRcdFx0XHRcdFx0XHR1c2VNYXJrdXBcblx0XHRcdFx0XHRcdFx0XHRcdGhhbGlnbj17R3RrLkFsaWduLlNUQVJUfVxuXHRcdFx0XHRcdFx0XHRcdFx0d3JhcE1vZGU9e1BhbmdvLldyYXBNb2RlLkNIQVJ9XG5cdFx0XHRcdFx0XHRcdFx0XHR4YWxpZ249ezB9XG5cdFx0XHRcdFx0XHRcdFx0XHRsYWJlbD17cGFyc2VNYXJrZG93bihcblx0XHRcdFx0XHRcdFx0XHRcdFx0ZXNjYXBlTWFya3VwKG5vdGlmaWNhdGlvbi5ib2R5KSxcblx0XHRcdFx0XHRcdFx0XHRcdCl9XG5cdFx0XHRcdFx0XHRcdFx0Lz5cblx0XHRcdFx0XHRcdFx0KX1cblx0XHRcdFx0XHRcdDwvYm94PlxuXHRcdFx0XHRcdDwvYm94PlxuXG5cdFx0XHRcdFx0e25vdGlmaWNhdGlvbkFjdGlvbnMubGVuZ3RoID4gMCAmJiAoXG5cdFx0XHRcdFx0XHQ8Ym94IGNsYXNzPVwiYWN0aW9uc1wiPlxuXHRcdFx0XHRcdFx0XHR7bm90aWZpY2F0aW9uQWN0aW9ucy5tYXAoKHsgbGFiZWwsIGlkIH0pID0+IChcblx0XHRcdFx0XHRcdFx0XHQ8YnV0dG9uXG5cdFx0XHRcdFx0XHRcdFx0XHRuYW1lPVwiYWN0aW9uQnV0dG9uXCJcblx0XHRcdFx0XHRcdFx0XHRcdGhleHBhbmRcblx0XHRcdFx0XHRcdFx0XHRcdGN1cnNvcj17R2RrLkN1cnNvci5uZXdfZnJvbV9uYW1lKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcInBvaW50ZXJcIixcblx0XHRcdFx0XHRcdFx0XHRcdFx0bnVsbCxcblx0XHRcdFx0XHRcdFx0XHRcdCl9XG5cdFx0XHRcdFx0XHRcdFx0XHRvbkNsaWNrZWQ9eygpID0+IG5vdGlmaWNhdGlvbi5pbnZva2UoaWQpfVxuXHRcdFx0XHRcdFx0XHRcdD5cblx0XHRcdFx0XHRcdFx0XHRcdDxsYWJlbFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRsYWJlbD17bGFiZWx9XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGhhbGlnbj17R3RrLkFsaWduLkNFTlRFUn1cblx0XHRcdFx0XHRcdFx0XHRcdFx0aGV4cGFuZFxuXHRcdFx0XHRcdFx0XHRcdFx0Lz5cblx0XHRcdFx0XHRcdFx0XHQ8L2J1dHRvbj5cblx0XHRcdFx0XHRcdFx0KSl9XG5cdFx0XHRcdFx0XHQ8L2JveD5cblx0XHRcdFx0XHQpfVxuXG5cdFx0XHRcdFx0PGJveD5cblx0XHRcdFx0XHRcdDxHdGsuUHJvZ3Jlc3NCYXJcblx0XHRcdFx0XHRcdFx0dmlzaWJsZT17IWlzTm90aWZpY2F0aW9uQ2VudGVyfVxuXHRcdFx0XHRcdFx0XHRjbGFzcz1cInByb2dyZXNzLWJhclwiXG5cdFx0XHRcdFx0XHRcdGhleHBhbmRcblx0XHRcdFx0XHRcdFx0ZnJhY3Rpb249e3Byb2dyZXNzQmFyRnJhY3Rpb259XG5cdFx0XHRcdFx0XHRcdHdpZHRoUmVxdWVzdD17NDkxfSAvLyB3aWR0aCAtIChib3JkZXItcmFkaXVzICogMylcblx0XHRcdFx0XHRcdFx0aGFsaWduPXtHdGsuQWxpZ24uQ0VOVEVSfVxuXHRcdFx0XHRcdFx0Lz5cblx0XHRcdFx0XHQ8L2JveD5cblx0XHRcdFx0PC9ib3g+XG5cdFx0XHQ8L0Fkdy5DbGFtcD5cblx0XHQ8L3JldmVhbGVyPlxuXHQpO1xufVxuIiwgImltcG9ydCB7IHR5cGUgQWNjZXNzb3IsIGNyZWF0ZUJpbmRpbmcsIEZvciwgdHlwZSBTZXR0ZXIgfSBmcm9tIFwiYWdzXCI7XG5pbXBvcnQgTm90aWZpY2F0aW9uIGZyb20gXCIuL2NvbXBvbmVudHMvTm90aWZpY2F0aW9uXCI7XG5pbXBvcnQgeyBkZWZhdWx0Q29uZmlnIH0gZnJvbSBcIkAvY29uc3RhbnRzL2NvbmZpZ1wiO1xuaW1wb3J0IHsgY29uZmlnIH0gZnJvbSBcIkAvdXRpbC9jb25maWdcIjtcbmltcG9ydCB7IGlzSWNvbiB9IGZyb20gXCJAL3V0aWwvaWNvbnNcIjtcbmltcG9ydCBOb3RpZmQgZnJvbSBcImdpOi8vQXN0YWxOb3RpZmRcIjtcbmltcG9ydCB7IGJhckhlaWdodCB9IGZyb20gXCJAL2Jhci9CYXJcIjtcbmltcG9ydCB7IHNsZWVwIH0gZnJvbSBcIkAvdXRpbC90aW1lclwiO1xuaW1wb3J0IHsgR3RrLCBHZGsgfSBmcm9tIFwiYWdzL2d0azRcIjtcblxuaW50ZXJmYWNlIFByb3BzIHtcblx0Z2RrbW9uaXRvcjogR2RrLk1vbml0b3I7XG5cdHZpc2libGU6IEFjY2Vzc29yPGJvb2xlYW4+O1xuXHRzZXRWaXNpYmxlOiBTZXR0ZXI8Ym9vbGVhbj47XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIE5vdGlmaWNhdGlvbkNlbnRlcih7XG5cdGdka21vbml0b3IsXG5cdHZpc2libGU6IGlzVmlzaWJsZSxcblx0c2V0VmlzaWJsZSxcbn06IFByb3BzKSB7XG5cdGNvbnN0IG5vdGlmZCA9IE5vdGlmZC5nZXRfZGVmYXVsdCgpO1xuXG5cdGNvbnN0IG5vdGlmaWNhdGlvbkNhdGVnb3JpZXMgPSBjcmVhdGVCaW5kaW5nKFxuXHRcdG5vdGlmZCxcblx0XHRcIm5vdGlmaWNhdGlvbnNcIixcblx0KSh0cmFuc2Zvcm1Ob3RpZmljYXRpb25zKTtcblxuXHRjb25zdCBkb05vdERpc3R1cmIgPSBjcmVhdGVCaW5kaW5nKG5vdGlmZCwgXCJkb250X2Rpc3R1cmJcIik7XG5cblx0ZnVuY3Rpb24gdHJhbnNmb3JtTm90aWZpY2F0aW9ucyhub3RpZnM6IE5vdGlmZC5Ob3RpZmljYXRpb25bXSkge1xuXHRcdGNvbnN0IG5vdGlmaWNhdGlvbkxpc3Q6IHtcblx0XHRcdGljb246IHN0cmluZyB8IG51bGw7XG5cdFx0XHR0aXRsZTogc3RyaW5nO1xuXHRcdFx0bm90aWZpY2F0aW9uczogTm90aWZkLk5vdGlmaWNhdGlvbltdO1xuXHRcdFx0bGF0ZXN0VGltZXN0YW1wOiBudW1iZXI7XG5cdFx0fVtdID0gW107XG5cblx0XHRmb3IgKGNvbnN0IG5vdGlmIG9mIG5vdGlmcykge1xuXHRcdFx0Y29uc3QgaWNvbiA9XG5cdFx0XHRcdG5vdGlmLmFwcEljb24gfHwgaXNJY29uKG5vdGlmLmRlc2t0b3BFbnRyeSlcblx0XHRcdFx0XHQ/IG5vdGlmLmFwcEljb24gfHwgbm90aWYuZGVza3RvcEVudHJ5XG5cdFx0XHRcdFx0OiBudWxsO1xuXHRcdFx0Y29uc3QgdGl0bGUgPSBub3RpZi5hcHBOYW1lIHx8IFwiVW5rbm93blwiO1xuXHRcdFx0Y29uc3QgdGltZSA9IG5vdGlmLnRpbWU7XG5cblx0XHRcdGNvbnN0IGluZGV4ID0gbm90aWZpY2F0aW9uTGlzdC5maW5kSW5kZXgoKG4pID0+IG4udGl0bGUgPT09IHRpdGxlKTtcblxuXHRcdFx0aWYgKGluZGV4ID49IDApIHtcblx0XHRcdFx0aWYgKHRpbWUgPiBub3RpZmljYXRpb25MaXN0W2luZGV4XS5sYXRlc3RUaW1lc3RhbXApIHtcblx0XHRcdFx0XHRub3RpZmljYXRpb25MaXN0W2luZGV4XS5sYXRlc3RUaW1lc3RhbXAgPSB0aW1lO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0bm90aWZpY2F0aW9uTGlzdFtpbmRleF0ubm90aWZpY2F0aW9ucy5wdXNoKG5vdGlmKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG5vdGlmaWNhdGlvbkxpc3QucHVzaCh7XG5cdFx0XHRcdFx0aWNvbixcblx0XHRcdFx0XHR0aXRsZSxcblx0XHRcdFx0XHRsYXRlc3RUaW1lc3RhbXA6IG5vdGlmLnRpbWUsXG5cdFx0XHRcdFx0bm90aWZpY2F0aW9uczogW25vdGlmXSxcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Y29uc3Qgc29ydGVkQ2F0ZWdvcmllcyA9IG5vdGlmaWNhdGlvbkxpc3Quc29ydChcblx0XHRcdChhLCBiKSA9PiBiLmxhdGVzdFRpbWVzdGFtcCAtIGEubGF0ZXN0VGltZXN0YW1wLFxuXHRcdCk7XG5cblx0XHRjb25zdCBzb3J0ZWROb3RpZkNhdGVnb3JpZXMgPSBzb3J0ZWRDYXRlZ29yaWVzLm1hcCgoY2F0ZWdvcnkpID0+ICh7XG5cdFx0XHQuLi5jYXRlZ29yeSxcblx0XHRcdG5vdGlmaWNhdGlvbnM6IGNhdGVnb3J5Lm5vdGlmaWNhdGlvbnMuc29ydChcblx0XHRcdFx0KGEsIGIpID0+IGIudGltZSAtIGEudGltZSxcblx0XHRcdCksXG5cdFx0fSkpO1xuXG5cdFx0cmV0dXJuIHNvcnRlZE5vdGlmQ2F0ZWdvcmllcztcblx0fVxuXG5cdGZ1bmN0aW9uIGhhbmRsZUV4dGVybmFsQ2xpY2soKSB7XG5cdFx0c2V0VmlzaWJsZShmYWxzZSk7XG5cdH1cblxuXHRmdW5jdGlvbiBoYW5kbGVFc2NLZXkoXG5cdFx0X2U6IEd0ay5FdmVudENvbnRyb2xsZXJLZXksXG5cdFx0a2V5dmFsOiBudW1iZXIsXG5cdFx0XzogbnVtYmVyLFxuXHRcdF9tb2Q6IG51bWJlcixcblx0KSB7XG5cdFx0aWYgKGtleXZhbCA9PT0gR2RrLktFWV9Fc2NhcGUpIHNldFZpc2libGUoZmFsc2UpO1xuXHR9XG5cblx0ZnVuY3Rpb24gaGFuZGxlRG5kU3dpdGNoKF9zd2l0Y2g6IEd0ay5Td2l0Y2gsIHN0YXRlOiBib29sZWFuKSB7XG5cdFx0bm90aWZkLnNldF9kb250X2Rpc3R1cmIoc3RhdGUpO1xuXHR9XG5cblx0cmV0dXJuIChcblx0XHQ8R3RrLldpbmRvd1xuXHRcdFx0Y2xhc3M9XCJub3RpZmljYXRpb24tY2VudGVyXCJcblx0XHRcdHdpZHRoUmVxdWVzdD17Z2RrbW9uaXRvci5nZW9tZXRyeS53aWR0aH1cblx0XHRcdGhlaWdodFJlcXVlc3Q9e2dka21vbml0b3IuZ2VvbWV0cnkuaGVpZ2h0fVxuXHRcdFx0cmVzaXphYmxlPXtmYWxzZX1cblx0XHRcdHZhbGlnbj17R3RrLkFsaWduLkVORH1cblx0XHRcdHRpdGxlPVwiQUdTIE5vdGlmaWNhdGlvbiBDZW50ZXJcIlxuXHRcdFx0ZGlzcGxheT17Z2RrbW9uaXRvci5kaXNwbGF5fVxuXHRcdFx0b25DbG9zZVJlcXVlc3Q9eygpID0+IHtcblx0XHRcdFx0c2V0VmlzaWJsZShmYWxzZSk7XG5cdFx0XHR9fVxuXHRcdFx0JD17KHNlbGYpID0+IHtcblx0XHRcdFx0Y29uc3QgcmV2ZWFsZXIgPSBzZWxmLmNoaWxkIGFzIEd0ay5SZXZlYWxlcjtcblx0XHRcdFx0Y29uc3QgdHJhbnNpdGlvbkR1cmF0aW9uID0gcmV2ZWFsZXIuZ2V0X3RyYW5zaXRpb25fZHVyYXRpb24oKTtcblxuXHRcdFx0XHRpc1Zpc2libGUuc3Vic2NyaWJlKGFzeW5jICgpID0+IHtcblx0XHRcdFx0XHRjb25zdCBjbGFzc2VzID0gc2VsZi5jc3NDbGFzc2VzO1xuXHRcdFx0XHRcdGNvbnN0IHZpc2libGUgPSBpc1Zpc2libGUuZ2V0KCk7XG5cblx0XHRcdFx0XHRpZiAoIXZpc2libGUpIHtcblx0XHRcdFx0XHRcdHJldmVhbGVyLnNldF9yZXZlYWxfY2hpbGQodmlzaWJsZSk7XG5cdFx0XHRcdFx0XHRzZWxmLnNldF9jc3NfY2xhc3Nlcyhcblx0XHRcdFx0XHRcdFx0Y2xhc3Nlcy5maWx0ZXIoKGNsYXNzTmFtZSkgPT4gY2xhc3NOYW1lICE9PSBcIm9wZW5cIiksXG5cdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHRhd2FpdCBzbGVlcCh0cmFuc2l0aW9uRHVyYXRpb24pO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHNlbGYuc2V0X3Zpc2libGUodmlzaWJsZSk7XG5cblx0XHRcdFx0XHRpZiAodmlzaWJsZSkge1xuXHRcdFx0XHRcdFx0cmV2ZWFsZXIuc2V0X3JldmVhbF9jaGlsZCh2aXNpYmxlKTtcblx0XHRcdFx0XHRcdHNlbGYuc2V0X2Nzc19jbGFzc2VzKFsuLi5jbGFzc2VzLCBcIm9wZW5cIl0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cdFx0XHR9fVxuXHRcdD5cblx0XHRcdDxHdGsuRXZlbnRDb250cm9sbGVyS2V5IG9uS2V5UHJlc3NlZD17aGFuZGxlRXNjS2V5fSAvPlxuXG5cdFx0XHQ8cmV2ZWFsZXJcblx0XHRcdFx0dHJhbnNpdGlvbkR1cmF0aW9uPXtjb25maWcoXG5cdFx0XHRcdFx0KGNmZykgPT5cblx0XHRcdFx0XHRcdGNmZy5hbmltYXRpb25zRHVyYXRpb24/Lm5vdGlmaWNhdGlvbkNlbnRlciA/P1xuXHRcdFx0XHRcdFx0ZGVmYXVsdENvbmZpZy5hbmltYXRpb25zRHVyYXRpb24ubm90aWZpY2F0aW9uQ2VudGVyLFxuXHRcdFx0XHQpfVxuXHRcdFx0XHR0cmFuc2l0aW9uVHlwZT17Y29uZmlnKFxuXHRcdFx0XHRcdChjZmcpID0+XG5cdFx0XHRcdFx0XHRHdGsuUmV2ZWFsZXJUcmFuc2l0aW9uVHlwZVtcblx0XHRcdFx0XHRcdFx0Y2ZnLmFuaW1hdGlvbnNUeXBlPy5ub3RpZmljYXRpb25DZW50ZXIgPz9cblx0XHRcdFx0XHRcdFx0XHRkZWZhdWx0Q29uZmlnLmFuaW1hdGlvbnNUeXBlLm5vdGlmaWNhdGlvbkNlbnRlclxuXHRcdFx0XHRcdFx0XSxcblx0XHRcdFx0KX1cblx0XHRcdD5cblx0XHRcdFx0PEd0ay5HZXN0dXJlQ2xpY2tcblx0XHRcdFx0XHRidXR0b249e0dkay5CVVRUT05fUFJJTUFSWX1cblx0XHRcdFx0XHRvblByZXNzZWQ9e2hhbmRsZUV4dGVybmFsQ2xpY2t9XG5cdFx0XHRcdFx0cHJvcGFnYXRpb25QaGFzZT17R3RrLlByb3BhZ2F0aW9uUGhhc2UuVEFSR0VUfVxuXHRcdFx0XHQvPlxuXG5cdFx0XHRcdDxHdGsuR2VzdHVyZUNsaWNrXG5cdFx0XHRcdFx0YnV0dG9uPXtHZGsuQlVUVE9OX1NFQ09OREFSWX1cblx0XHRcdFx0XHRvblByZXNzZWQ9e2hhbmRsZUV4dGVybmFsQ2xpY2t9XG5cdFx0XHRcdFx0cHJvcGFnYXRpb25QaGFzZT17R3RrLlByb3BhZ2F0aW9uUGhhc2UuVEFSR0VUfVxuXHRcdFx0XHQvPlxuXG5cdFx0XHRcdDxHdGsuR2VzdHVyZUNsaWNrXG5cdFx0XHRcdFx0YnV0dG9uPXtHZGsuQlVUVE9OX01JRERMRX1cblx0XHRcdFx0XHRvblByZXNzZWQ9e2hhbmRsZUV4dGVybmFsQ2xpY2t9XG5cdFx0XHRcdFx0cHJvcGFnYXRpb25QaGFzZT17R3RrLlByb3BhZ2F0aW9uUGhhc2UuVEFSR0VUfVxuXHRcdFx0XHQvPlxuXG5cdFx0XHRcdDxib3hcblx0XHRcdFx0XHRtYXJnaW5Ub3A9e2JhckhlaWdodH1cblx0XHRcdFx0XHRvcmllbnRhdGlvbj17R3RrLk9yaWVudGF0aW9uLlZFUlRJQ0FMfVxuXHRcdFx0XHRcdHdpZHRoUmVxdWVzdD17NTQwfVxuXHRcdFx0XHRcdGNsYXNzPVwibm90aWZpY2F0aW9uLWNvbnRhaW5lclwiXG5cdFx0XHRcdFx0aGFsaWduPXtHdGsuQWxpZ24uRU5EfVxuXHRcdFx0XHQ+XG5cdFx0XHRcdFx0PGJveCBjbGFzcz1cImhlYWRlclwiIG9yaWVudGF0aW9uPXtHdGsuT3JpZW50YXRpb24uVkVSVElDQUx9PlxuXHRcdFx0XHRcdFx0PGJveFxuXHRcdFx0XHRcdFx0XHRjbGFzcz1cInRpdGxlLWNvbnRhaW5lclwiXG5cdFx0XHRcdFx0XHRcdG9yaWVudGF0aW9uPXtHdGsuT3JpZW50YXRpb24uSE9SSVpPTlRBTH1cblx0XHRcdFx0XHRcdD5cblx0XHRcdFx0XHRcdFx0PGxhYmVsIGxhYmVsPVwiTm90aWZpY2F0aW9uc1wiIGNsYXNzPVwidGl0bGVcIiAvPlxuXG5cdFx0XHRcdFx0XHRcdDxib3ggaGV4cGFuZCAvPlxuXG5cdFx0XHRcdFx0XHRcdDxidXR0b25cblx0XHRcdFx0XHRcdFx0XHRsYWJlbD1cIkNsZWFyIEFsbFwiXG5cdFx0XHRcdFx0XHRcdFx0Y2xhc3M9XCJkaXNtaXNzLWFsbFwiXG5cdFx0XHRcdFx0XHRcdFx0Y3Vyc29yPXtHZGsuQ3Vyc29yLm5ld19mcm9tX25hbWUoXG5cdFx0XHRcdFx0XHRcdFx0XHRcInBvaW50ZXJcIixcblx0XHRcdFx0XHRcdFx0XHRcdG51bGwsXG5cdFx0XHRcdFx0XHRcdFx0KX1cblx0XHRcdFx0XHRcdFx0XHRvbkNsaWNrZWQ9eygpID0+IHtcblx0XHRcdFx0XHRcdFx0XHRcdGZvciAoY29uc3QgY2F0ZWdvcnkgb2Ygbm90aWZpY2F0aW9uQ2F0ZWdvcmllcy5nZXQoKSkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRmb3IgKGNvbnN0IG5vdGlmIG9mIGNhdGVnb3J5Lm5vdGlmaWNhdGlvbnMpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRub3RpZi5kaXNtaXNzKCk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9fVxuXHRcdFx0XHRcdFx0XHQvPlxuXHRcdFx0XHRcdFx0PC9ib3g+XG5cblx0XHRcdFx0XHRcdDxib3hcblx0XHRcdFx0XHRcdFx0Y2xhc3M9XCJkbmQtY29udGFpbmVyXCJcblx0XHRcdFx0XHRcdFx0b3JpZW50YXRpb249e0d0ay5PcmllbnRhdGlvbi5IT1JJWk9OVEFMfVxuXHRcdFx0XHRcdFx0PlxuXHRcdFx0XHRcdFx0XHQ8bGFiZWwgbGFiZWw9XCJEbyBub3QgRGlzdHVyYlwiIGNsYXNzPVwiZG5kLXRpdGxlXCIgLz5cblxuXHRcdFx0XHRcdFx0XHQ8Ym94IGhleHBhbmQgLz5cblxuXHRcdFx0XHRcdFx0XHQ8c3dpdGNoXG5cdFx0XHRcdFx0XHRcdFx0Y2xhc3M9XCJkbmQtdG9nZ2xlXCJcblx0XHRcdFx0XHRcdFx0XHRvblN0YXRlU2V0PXtoYW5kbGVEbmRTd2l0Y2h9XG5cdFx0XHRcdFx0XHRcdFx0c3RhdGU9e2RvTm90RGlzdHVyYn1cblx0XHRcdFx0XHRcdFx0XHRhY3RpdmU9e2RvTm90RGlzdHVyYn1cblx0XHRcdFx0XHRcdFx0XHRjdXJzb3I9e0dkay5DdXJzb3IubmV3X2Zyb21fbmFtZShcblx0XHRcdFx0XHRcdFx0XHRcdFwicG9pbnRlclwiLFxuXHRcdFx0XHRcdFx0XHRcdFx0bnVsbCxcblx0XHRcdFx0XHRcdFx0XHQpfVxuXHRcdFx0XHRcdFx0XHQvPlxuXHRcdFx0XHRcdFx0PC9ib3g+XG5cdFx0XHRcdFx0PC9ib3g+XG5cblx0XHRcdFx0XHQ8R3RrLlNlcGFyYXRvciBjbGFzcz1cImhlYWRlci1zZXBhcmF0b3JcIiB2aXNpYmxlIC8+XG5cblx0XHRcdFx0XHQ8c2Nyb2xsZWR3aW5kb3dcblx0XHRcdFx0XHRcdHByb3BhZ2F0ZU5hdHVyYWxIZWlnaHRcblx0XHRcdFx0XHRcdHByb3BhZ2F0ZU5hdHVyYWxXaWR0aFxuXHRcdFx0XHRcdFx0aHNjcm9sbGJhclBvbGljeT17R3RrLlBvbGljeVR5cGUuTkVWRVJ9XG5cdFx0XHRcdFx0PlxuXHRcdFx0XHRcdFx0PGJveCBvcmllbnRhdGlvbj17R3RrLk9yaWVudGF0aW9uLlZFUlRJQ0FMfT5cblx0XHRcdFx0XHRcdFx0PEZvciBlYWNoPXtub3RpZmljYXRpb25DYXRlZ29yaWVzfT5cblx0XHRcdFx0XHRcdFx0XHR7KG5vdGlmaWNhdGlvbkNhdGVnb3J5LCBpbmRleCkgPT4gKFxuXHRcdFx0XHRcdFx0XHRcdFx0PGJveFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRjbGFzcz1cImNhdGVnb3J5XCJcblx0XHRcdFx0XHRcdFx0XHRcdFx0b3JpZW50YXRpb249e0d0ay5PcmllbnRhdGlvbi5WRVJUSUNBTH1cblx0XHRcdFx0XHRcdFx0XHRcdD5cblx0XHRcdFx0XHRcdFx0XHRcdFx0PGJveFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGNsYXNzPVwiY2F0ZWdvcnktaGVhZGVyXCJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRvcmllbnRhdGlvbj17XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRHdGsuT3JpZW50YXRpb24uSE9SSVpPTlRBTFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdFx0PlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHtub3RpZmljYXRpb25DYXRlZ29yeS5pY29uICYmIChcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdDxpbWFnZVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRjbGFzcz1cImNhdGVnb3J5LWljb25cIlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR2aXNpYmxlPXtCb29sZWFuKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdG5vdGlmaWNhdGlvbkNhdGVnb3J5Lmljb24sXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdCl9XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGljb25OYW1lPXtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRub3RpZmljYXRpb25DYXRlZ29yeS5pY29uXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cGl4ZWxTaXplPXszMn1cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8+XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0KX1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdDxsYWJlbFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Y2xhc3M9XCJjYXRlZ29yeS10aXRsZVwiXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRsYWJlbD17XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdG5vdGlmaWNhdGlvbkNhdGVnb3J5LnRpdGxlXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Lz5cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdDxib3ggaGV4cGFuZCAvPlxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0PGJ1dHRvblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Y2xhc3M9XCJkaXNtaXNzLWNhdGVnb3J5XCJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGxhYmVsPVwiWFwiXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRjdXJzb3I9e0dkay5DdXJzb3IubmV3X2Zyb21fbmFtZShcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XCJwb2ludGVyXCIsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdG51bGwsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQpfVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0b25DbGlja2VkPXsoKSA9PiB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGZvciAoY29uc3Qgbm90aWYgb2Ygbm90aWZpY2F0aW9uQ2F0ZWdvcnkubm90aWZpY2F0aW9ucykge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdG5vdGlmLmRpc21pc3MoKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0fX1cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvPlxuXHRcdFx0XHRcdFx0XHRcdFx0XHQ8L2JveD5cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHR7bm90aWZpY2F0aW9uQ2F0ZWdvcnkubm90aWZpY2F0aW9ucy5tYXAoXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0KG5vdGlmKSA9PiAoXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8Tm90aWZpY2F0aW9uXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdG5vdGlmaWNhdGlvbj17bm90aWZ9XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdG9uSGlkZT17KG5vdGlmKSA9PlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdG5vdGlmLmRpc21pc3MoKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlzTm90aWZpY2F0aW9uQ2VudGVyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvPlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdCksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdCl9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0e2luZGV4LmdldCgpICE9PVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG5vdGlmaWNhdGlvbkNhdGVnb3JpZXMuZ2V0KClcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdC5sZW5ndGggLVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0MSAmJiAoXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0PEd0ay5TZXBhcmF0b3Jcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGNsYXNzPVwiY2F0ZWdvcnktc2VwYXJhdG9yXCJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHZpc2libGVcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvPlxuXHRcdFx0XHRcdFx0XHRcdFx0XHQpfVxuXHRcdFx0XHRcdFx0XHRcdFx0PC9ib3g+XG5cdFx0XHRcdFx0XHRcdFx0KX1cblx0XHRcdFx0XHRcdFx0PC9Gb3I+XG5cdFx0XHRcdFx0XHQ8L2JveD5cblx0XHRcdFx0XHQ8L3Njcm9sbGVkd2luZG93PlxuXHRcdFx0XHQ8L2JveD5cblx0XHRcdDwvcmV2ZWFsZXI+XG5cdFx0PC9HdGsuV2luZG93PlxuXHQpO1xufVxuIiwgImltcG9ydCBOb3RpZmljYXRpb24gZnJvbSBcIi4vY29tcG9uZW50cy9Ob3RpZmljYXRpb25cIjtcbmltcG9ydCB7IEFzdGFsLCB0eXBlIEdkaywgR3RrIH0gZnJvbSBcImFncy9ndGs0XCI7XG5pbXBvcnQgTm90aWZkIGZyb20gXCJnaTovL0FzdGFsTm90aWZkXCI7XG5pbXBvcnQgeyB0aW1lb3V0IH0gZnJvbSBcImFncy90aW1lXCI7XG5pbXBvcnQgZ2lDYWlybyBmcm9tIFwiZ2k6Ly9jYWlyb1wiO1xuaW1wb3J0IHtcblx0Rm9yLFxuXHR0eXBlIEFjY2Vzc29yLFxuXHRjcmVhdGVCaW5kaW5nLFxuXHRjcmVhdGVDb21wdXRlZCxcblx0Y3JlYXRlU3RhdGUsXG5cdG9uQ2xlYW51cCxcbn0gZnJvbSBcImFnc1wiO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuXHRnZGttb25pdG9yOiBHZGsuTW9uaXRvcjtcblx0aGlkZGVuOiBBY2Nlc3Nvcjxib29sZWFuPjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTm90aWZpY2F0aW9uUG9wdXBzKHsgZ2RrbW9uaXRvciwgaGlkZGVuIH06IFByb3BzKSB7XG5cdGNvbnN0IG5vdGlmZCA9IE5vdGlmZC5nZXRfZGVmYXVsdCgpO1xuXG5cdG5vdGlmZC5zZXRfaWdub3JlX3RpbWVvdXQodHJ1ZSk7XG5cblx0Y29uc3QgbWF4SGVpZ2h0ID0gZ2RrbW9uaXRvci5nZW9tZXRyeS5oZWlnaHQgKiAwLjU7XG5cblx0Y29uc3QgW25vdGlmaWNhdGlvbnMsIHNldE5vdGlmaWNhdGlvbnNdID0gY3JlYXRlU3RhdGUoXG5cdFx0W10gYXMgTm90aWZkLk5vdGlmaWNhdGlvbltdLFxuXHQpO1xuXG5cdGNvbnN0IGRvTm90RGlzdHVyYiA9IGNyZWF0ZUJpbmRpbmcobm90aWZkLCBcImRvbnRfZGlzdHVyYlwiKTtcblxuXHRjb25zdCBub3RpZmllZEhhbmRsZXIgPSBub3RpZmQuY29ubmVjdChcIm5vdGlmaWVkXCIsIChfLCBpZCwgcmVwbGFjZWQpID0+IHtcblx0XHRjb25zdCBub3RpZmljYXRpb24gPSBub3RpZmQuZ2V0X25vdGlmaWNhdGlvbihpZCk7XG5cblx0XHRpZiAocmVwbGFjZWQpIHtcblx0XHRcdHNldE5vdGlmaWNhdGlvbnMoKG5vdGlmcykgPT4ge1xuXHRcdFx0XHRpZiAobm90aWZzLmZpbmQoKG5vdGlmKSA9PiBub3RpZi5pZCA9PT0gaWQpKVxuXHRcdFx0XHRcdHJldHVybiBub3RpZnMubWFwKChub3RpZikgPT5cblx0XHRcdFx0XHRcdG5vdGlmLmlkID09PSBpZCA/IG5vdGlmaWNhdGlvbiA6IG5vdGlmLFxuXHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0cmV0dXJuIFtub3RpZmljYXRpb24sIC4uLm5vdGlmc107XG5cdFx0XHR9KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0c2V0Tm90aWZpY2F0aW9ucygobm90aWZzKSA9PiBbbm90aWZpY2F0aW9uLCAuLi5ub3RpZnNdKTtcblx0XHR9XG5cdH0pO1xuXG5cdGNvbnN0IHJlc29sdmVkSGFuZGxlciA9IG5vdGlmZC5jb25uZWN0KFwicmVzb2x2ZWRcIiwgKF8sIGlkKSA9PiB7XG5cdFx0c2V0Tm90aWZpY2F0aW9ucygobm90aWZzKSA9PiBub3RpZnMuZmlsdGVyKChub3RpZikgPT4gbm90aWYuaWQgIT09IGlkKSk7XG5cdH0pO1xuXG5cdG9uQ2xlYW51cCgoKSA9PiB7XG5cdFx0bm90aWZkLmRpc2Nvbm5lY3Qobm90aWZpZWRIYW5kbGVyKTtcblx0XHRub3RpZmQuZGlzY29ubmVjdChyZXNvbHZlZEhhbmRsZXIpO1xuXHR9KTtcblxuXHRmdW5jdGlvbiBoYW5kbGVIaWRlTm90aWZpY2F0aW9uKG5vdGlmaWNhdGlvbjogTm90aWZkLk5vdGlmaWNhdGlvbikge1xuXHRcdGlmIChub3RpZmljYXRpb24udHJhbnNpZW50KSByZXR1cm4gbm90aWZpY2F0aW9uLmRpc21pc3MoKTtcblxuXHRcdHNldE5vdGlmaWNhdGlvbnMoKG5vdGlmaWNhdGlvbnMpID0+XG5cdFx0XHRub3RpZmljYXRpb25zLmZpbHRlcigobm90aWYpID0+IG5vdGlmLmlkICE9PSBub3RpZmljYXRpb24uaWQpLFxuXHRcdCk7XG5cdH1cblxuXHRsZXQgbm90aWZpY2F0aW9uQ29udGFpbmVyOiBHdGsuQm94IHwgbnVsbDtcblx0bGV0IHdpbmRvdzogR3RrLldpbmRvdyB8IG51bGw7XG5cblx0bm90aWZpY2F0aW9ucy5zdWJzY3JpYmUoKCkgPT4ge1xuXHRcdHRpbWVvdXQoNDAwLCAoKSA9PiB7XG5cdFx0XHRpZiAoIXdpbmRvdyB8fCAhbm90aWZpY2F0aW9uQ29udGFpbmVyKSByZXR1cm47XG5cblx0XHRcdGNvbnN0IFtfc3VjY2VzcywgYm91bmRzXSA9XG5cdFx0XHRcdG5vdGlmaWNhdGlvbkNvbnRhaW5lci5jb21wdXRlX2JvdW5kcyh3aW5kb3cpO1xuXG5cdFx0XHRjb25zdCBoZWlnaHQgPSBib3VuZHMuZ2V0X2hlaWdodCgpO1xuXHRcdFx0Y29uc3Qgd2lkdGggPSBib3VuZHMuZ2V0X3dpZHRoKCk7XG5cdFx0XHRjb25zdCB4ID0gYm91bmRzLmdldF94KCk7XG5cdFx0XHRjb25zdCB5ID0gYm91bmRzLmdldF95KCk7XG5cblx0XHRcdGNvbnN0IHN1cmZhY2UgPSB3aW5kb3cuZ2V0X3N1cmZhY2UoKTtcblxuXHRcdFx0Y29uc3QgcmVnaW9uID0gbmV3IGdpQ2Fpcm8uUmVnaW9uKCk7XG5cblx0XHRcdC8vIEB0cy1pZ25vcmVcblx0XHRcdHJlZ2lvbi51bmlvblJlY3RhbmdsZShcblx0XHRcdFx0bmV3IGdpQ2Fpcm8uUmVjdGFuZ2xlKHtcblx0XHRcdFx0XHR4LFxuXHRcdFx0XHRcdHksXG5cdFx0XHRcdFx0aGVpZ2h0LFxuXHRcdFx0XHRcdHdpZHRoLFxuXHRcdFx0XHR9KSxcblx0XHRcdCk7XG5cblx0XHRcdHN1cmZhY2U/LnNldF9pbnB1dF9yZWdpb24ocmVnaW9uKTtcblx0XHR9KTtcblx0fSk7XG5cblx0Y29uc3Qgd2luZG93VmlzaWJpbGl0eSA9IGNyZWF0ZUNvbXB1dGVkKFxuXHRcdFtoaWRkZW4sIG5vdGlmaWNhdGlvbnMsIGRvTm90RGlzdHVyYl0sXG5cdFx0KGhpZGRlbiwgbm90aWZpY2F0aW9ucywgZG9Ob3REaXN0dXJiKSA9PiB7XG5cdFx0XHRyZXR1cm4gIWhpZGRlbiAmJiAhZG9Ob3REaXN0dXJiICYmIG5vdGlmaWNhdGlvbnMubGVuZ3RoID4gMDtcblx0XHR9LFxuXHQpO1xuXG5cdHJldHVybiAoXG5cdFx0PHdpbmRvd1xuXHRcdFx0Y2xhc3M9XCJub3RpZmljYXRpb24tcG9wdXBzXCJcblx0XHRcdGdka21vbml0b3I9e2dka21vbml0b3J9XG5cdFx0XHR2aXNpYmxlPXt3aW5kb3dWaXNpYmlsaXR5fVxuXHRcdFx0YW5jaG9yPXtBc3RhbC5XaW5kb3dBbmNob3IuVE9QIHwgQXN0YWwuV2luZG93QW5jaG9yLlJJR0hUfVxuXHRcdFx0ZGVmYXVsdEhlaWdodD17MX1cblx0XHRcdCQ9eyhzZWxmKSA9PiB7XG5cdFx0XHRcdHdpbmRvdyA9IHNlbGY7XG5cdFx0XHR9fVxuXHRcdD5cblx0XHRcdDxzY3JvbGxlZHdpbmRvd1xuXHRcdFx0XHRwcm9wYWdhdGVOYXR1cmFsSGVpZ2h0XG5cdFx0XHRcdHByb3BhZ2F0ZU5hdHVyYWxXaWR0aFxuXHRcdFx0XHRoc2Nyb2xsYmFyUG9saWN5PXtHdGsuUG9saWN5VHlwZS5ORVZFUn1cblx0XHRcdFx0bWF4Q29udGVudEhlaWdodD17bWF4SGVpZ2h0fVxuXHRcdFx0XHRoZWlnaHRSZXF1ZXN0PXttYXhIZWlnaHR9XG5cdFx0XHQ+XG5cdFx0XHRcdDxib3hcblx0XHRcdFx0XHRvcmllbnRhdGlvbj17R3RrLk9yaWVudGF0aW9uLlZFUlRJQ0FMfVxuXHRcdFx0XHRcdCQ9eyhzZWxmKSA9PiB7XG5cdFx0XHRcdFx0XHRub3RpZmljYXRpb25Db250YWluZXIgPSBzZWxmO1xuXHRcdFx0XHRcdH19XG5cdFx0XHRcdFx0dmV4cGFuZD17ZmFsc2V9XG5cdFx0XHRcdFx0dmFsaWduPXtHdGsuQWxpZ24uU1RBUlR9XG5cdFx0XHRcdD5cblx0XHRcdFx0XHQ8Rm9yIGVhY2g9e25vdGlmaWNhdGlvbnN9PlxuXHRcdFx0XHRcdFx0eyhub3RpZmljYXRpb24pID0+IChcblx0XHRcdFx0XHRcdFx0PE5vdGlmaWNhdGlvblxuXHRcdFx0XHRcdFx0XHRcdG5vdGlmaWNhdGlvbj17bm90aWZpY2F0aW9ufVxuXHRcdFx0XHRcdFx0XHRcdG9uSGlkZT17aGFuZGxlSGlkZU5vdGlmaWNhdGlvbn1cblx0XHRcdFx0XHRcdFx0Lz5cblx0XHRcdFx0XHRcdCl9XG5cdFx0XHRcdFx0PC9Gb3I+XG5cdFx0XHRcdDwvYm94PlxuXHRcdFx0PC9zY3JvbGxlZHdpbmRvdz5cblx0XHQ8L3dpbmRvdz5cblx0KTtcbn1cbiIsICJpbXBvcnQgeyBkZWZhdWx0Q29uZmlnIH0gZnJvbSBcIkAvY29uc3RhbnRzL2NvbmZpZ1wiO1xuaW1wb3J0IHR5cGUgeyBDb25maWcgfSBmcm9tIFwiQC90eXBlcy9jb25maWdcIjtcbmltcG9ydCB0eXBlIHsgQWNjZXNzb3IsIFNldHRlciB9IGZyb20gXCJhZ3NcIjtcbmltcG9ydCB7IGV4ZWNBc3luYyB9IGZyb20gXCJhZ3MvcHJvY2Vzc1wiO1xuaW1wb3J0IHsgY29uZmlnIH0gZnJvbSBcIkAvdXRpbC9jb25maWdcIjtcbmltcG9ydCB7IGJhckhlaWdodCB9IGZyb20gXCJAL2Jhci9CYXJcIjtcbmltcG9ydCB7IHNsZWVwIH0gZnJvbSBcIkAvdXRpbC90aW1lclwiO1xuaW1wb3J0IHsgR2RrLCBHdGsgfSBmcm9tIFwiYWdzL2d0azRcIjtcbmltcG9ydCBQYW5nbyBmcm9tIFwiZ2k6Ly9QYW5nb1wiO1xuaW1wb3J0IEFkdyBmcm9tIFwiZ2k6Ly9BZHdcIjtcblxuaW50ZXJmYWNlIFByb3BzIHtcblx0Z2RrbW9uaXRvcjogR2RrLk1vbml0b3I7XG5cdHZpc2libGU6IEFjY2Vzc29yPGJvb2xlYW4+O1xuXHRzZXRWaXNpYmxlOiBTZXR0ZXI8Ym9vbGVhbj47XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFNlc3Npb25NZW51KHtcblx0Z2RrbW9uaXRvcixcblx0dmlzaWJsZTogaXNWaXNpYmxlLFxuXHRzZXRWaXNpYmxlLFxufTogUHJvcHMpIHtcblx0ZnVuY3Rpb24gaGFuZGxlRXh0ZXJuYWxDbGljaygpIHtcblx0XHRzZXRWaXNpYmxlKGZhbHNlKTtcblx0fVxuXG5cdGZ1bmN0aW9uIGhhbmRsZUVzY0tleShcblx0XHRfZTogR3RrLkV2ZW50Q29udHJvbGxlcktleSxcblx0XHRrZXl2YWw6IG51bWJlcixcblx0XHRfOiBudW1iZXIsXG5cdFx0X21vZDogbnVtYmVyLFxuXHQpIHtcblx0XHRpZiAoa2V5dmFsID09PSBHZGsuS0VZX0VzY2FwZSkgc2V0VmlzaWJsZShmYWxzZSk7XG5cdH1cblxuXHRmdW5jdGlvbiB0cmFuc2Zvcm1Db25maWdIZWlnaHQoY2ZnOiBDb25maWcpIHtcblx0XHRyZXR1cm4gKFxuXHRcdFx0KGNmZy5zZXNzaW9uTWVudT8uYnV0dG9uSGVpZ2h0ID8/XG5cdFx0XHRcdGRlZmF1bHRDb25maWcuc2Vzc2lvbk1lbnUuYnV0dG9uSGVpZ2h0KSAqXG5cdFx0XHRcdDIgK1xuXHRcdFx0KGNmZy5zZXNzaW9uTWVudT8uYnV0dG9uR2FwID8/IGRlZmF1bHRDb25maWcuc2Vzc2lvbk1lbnUuYnV0dG9uR2FwKVxuXHRcdCk7XG5cdH1cblxuXHRmdW5jdGlvbiB0cmFuc2Zvcm1Db25maWdXaWR0aChjZmc6IENvbmZpZykge1xuXHRcdHJldHVybiAoXG5cdFx0XHQoY2ZnLnNlc3Npb25NZW51Py5idXR0b25XaWR0aCA/P1xuXHRcdFx0XHRkZWZhdWx0Q29uZmlnLnNlc3Npb25NZW51LmJ1dHRvbldpZHRoKSAqXG5cdFx0XHRcdDQgK1xuXHRcdFx0KGNmZy5zZXNzaW9uTWVudT8uYnV0dG9uR2FwID8/XG5cdFx0XHRcdGRlZmF1bHRDb25maWcuc2Vzc2lvbk1lbnUuYnV0dG9uR2FwKSAqXG5cdFx0XHRcdDNcblx0XHQpO1xuXHR9XG5cblx0cmV0dXJuIChcblx0XHQ8R3RrLldpbmRvd1xuXHRcdFx0d2lkdGhSZXF1ZXN0PXtnZGttb25pdG9yLmdlb21ldHJ5LndpZHRofVxuXHRcdFx0aGVpZ2h0UmVxdWVzdD17Z2RrbW9uaXRvci5nZW9tZXRyeS5oZWlnaHR9XG5cdFx0XHRyZXNpemFibGU9e2ZhbHNlfVxuXHRcdFx0Y2xhc3M9XCJzZXNzaW9uLW1lbnVcIlxuXHRcdFx0dGl0bGU9XCJBR1MgU2Vzc2lvbiBNZW51XCJcblx0XHRcdGRpc3BsYXk9e2dka21vbml0b3IuZGlzcGxheX1cblx0XHRcdG9uQ2xvc2VSZXF1ZXN0PXsoKSA9PiB7XG5cdFx0XHRcdHNldFZpc2libGUoZmFsc2UpO1xuXHRcdFx0fX1cblx0XHRcdCQ9eyhzZWxmKSA9PiB7XG5cdFx0XHRcdGNvbnN0IHJldmVhbGVyID0gc2VsZi5jaGlsZCBhcyBHdGsuUmV2ZWFsZXI7XG5cdFx0XHRcdGNvbnN0IHRyYW5zaXRpb25EdXJhdGlvbiA9IHJldmVhbGVyLmdldF90cmFuc2l0aW9uX2R1cmF0aW9uKCk7XG5cblx0XHRcdFx0aXNWaXNpYmxlLnN1YnNjcmliZShhc3luYyAoKSA9PiB7XG5cdFx0XHRcdFx0Y29uc3QgY2xhc3NlcyA9IHNlbGYuY3NzQ2xhc3Nlcztcblx0XHRcdFx0XHRjb25zdCB2aXNpYmxlID0gaXNWaXNpYmxlLmdldCgpO1xuXG5cdFx0XHRcdFx0aWYgKCF2aXNpYmxlKSB7XG5cdFx0XHRcdFx0XHRyZXZlYWxlci5zZXRfcmV2ZWFsX2NoaWxkKHZpc2libGUpO1xuXHRcdFx0XHRcdFx0c2VsZi5zZXRfY3NzX2NsYXNzZXMoXG5cdFx0XHRcdFx0XHRcdGNsYXNzZXMuZmlsdGVyKChjbGFzc05hbWUpID0+IGNsYXNzTmFtZSAhPT0gXCJvcGVuXCIpLFxuXHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0YXdhaXQgc2xlZXAodHJhbnNpdGlvbkR1cmF0aW9uKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRzZWxmLnNldF92aXNpYmxlKHZpc2libGUpO1xuXG5cdFx0XHRcdFx0aWYgKHZpc2libGUpIHtcblx0XHRcdFx0XHRcdHJldmVhbGVyLnNldF9yZXZlYWxfY2hpbGQodmlzaWJsZSk7XG5cdFx0XHRcdFx0XHRzZWxmLnNldF9jc3NfY2xhc3NlcyhbLi4uY2xhc3NlcywgXCJvcGVuXCJdKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXHRcdFx0fX1cblx0XHQ+XG5cdFx0XHQ8R3RrLkV2ZW50Q29udHJvbGxlcktleSBvbktleVByZXNzZWQ9e2hhbmRsZUVzY0tleX0gLz5cblxuXHRcdFx0PHJldmVhbGVyXG5cdFx0XHRcdHRyYW5zaXRpb25EdXJhdGlvbj17Y29uZmlnKFxuXHRcdFx0XHRcdChjZmcpID0+XG5cdFx0XHRcdFx0XHRjZmcuYW5pbWF0aW9uc0R1cmF0aW9uPy5zZXNzaW9uTWVudSA/P1xuXHRcdFx0XHRcdFx0ZGVmYXVsdENvbmZpZy5hbmltYXRpb25zRHVyYXRpb24uc2Vzc2lvbk1lbnUsXG5cdFx0XHRcdCl9XG5cdFx0XHRcdHRyYW5zaXRpb25UeXBlPXtjb25maWcoXG5cdFx0XHRcdFx0KGNmZykgPT5cblx0XHRcdFx0XHRcdEd0ay5SZXZlYWxlclRyYW5zaXRpb25UeXBlW1xuXHRcdFx0XHRcdFx0XHRjZmcuYW5pbWF0aW9uc1R5cGU/LnNlc3Npb25NZW51ID8/XG5cdFx0XHRcdFx0XHRcdFx0ZGVmYXVsdENvbmZpZy5hbmltYXRpb25zVHlwZS5zZXNzaW9uTWVudVxuXHRcdFx0XHRcdFx0XSxcblx0XHRcdFx0KX1cblx0XHRcdD5cblx0XHRcdFx0PEd0ay5HZXN0dXJlQ2xpY2tcblx0XHRcdFx0XHRidXR0b249e0dkay5CVVRUT05fUFJJTUFSWX1cblx0XHRcdFx0XHRvblByZXNzZWQ9e2hhbmRsZUV4dGVybmFsQ2xpY2t9XG5cdFx0XHRcdFx0cHJvcGFnYXRpb25QaGFzZT17R3RrLlByb3BhZ2F0aW9uUGhhc2UuVEFSR0VUfVxuXHRcdFx0XHQvPlxuXG5cdFx0XHRcdDxBZHcuQ2xhbXBcblx0XHRcdFx0XHRvcmllbnRhdGlvbj17R3RrLk9yaWVudGF0aW9uLlZFUlRJQ0FMfVxuXHRcdFx0XHRcdG1heGltdW1TaXplPXtjb25maWcodHJhbnNmb3JtQ29uZmlnSGVpZ2h0KX1cblx0XHRcdFx0XHRtYXJnaW5Ub3A9e2JhckhlaWdodH1cblx0XHRcdFx0PlxuXHRcdFx0XHRcdDxBZHcuQ2xhbXBcblx0XHRcdFx0XHRcdG1heGltdW1TaXplPXtjb25maWcodHJhbnNmb3JtQ29uZmlnV2lkdGgpfVxuXHRcdFx0XHRcdFx0aGV4cGFuZFxuXHRcdFx0XHRcdFx0dmV4cGFuZFxuXHRcdFx0XHRcdD5cblx0XHRcdFx0XHRcdDxib3hcblx0XHRcdFx0XHRcdFx0b3JpZW50YXRpb249e0d0ay5PcmllbnRhdGlvbi5WRVJUSUNBTH1cblx0XHRcdFx0XHRcdFx0c3BhY2luZz17Y29uZmlnKFxuXHRcdFx0XHRcdFx0XHRcdChjZmcpID0+XG5cdFx0XHRcdFx0XHRcdFx0XHRjZmcuc2Vzc2lvbk1lbnU/LmJ1dHRvbkdhcCA/P1xuXHRcdFx0XHRcdFx0XHRcdFx0ZGVmYXVsdENvbmZpZy5zZXNzaW9uTWVudS5idXR0b25HYXAsXG5cdFx0XHRcdFx0XHRcdCl9XG5cdFx0XHRcdFx0XHQ+XG5cdFx0XHRcdFx0XHRcdDxib3hcblx0XHRcdFx0XHRcdFx0XHRzcGFjaW5nPXtjb25maWcoXG5cdFx0XHRcdFx0XHRcdFx0XHQoY2ZnKSA9PlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRjZmcuc2Vzc2lvbk1lbnU/LmJ1dHRvbkdhcCA/P1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRkZWZhdWx0Q29uZmlnLnNlc3Npb25NZW51LmJ1dHRvbkdhcCxcblx0XHRcdFx0XHRcdFx0XHQpfVxuXHRcdFx0XHRcdFx0XHQ+XG5cdFx0XHRcdFx0XHRcdFx0PGJ1dHRvblxuXHRcdFx0XHRcdFx0XHRcdFx0Y3Vyc29yPXtHZGsuQ3Vyc29yLm5ld19mcm9tX25hbWUoXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFwicG9pbnRlclwiLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRudWxsLFxuXHRcdFx0XHRcdFx0XHRcdFx0KX1cblx0XHRcdFx0XHRcdFx0XHRcdHdpZHRoUmVxdWVzdD17Y29uZmlnKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQoY2ZnKSA9PlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGNmZy5zZXNzaW9uTWVudT8uYnV0dG9uV2lkdGggPz9cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRkZWZhdWx0Q29uZmlnLnNlc3Npb25NZW51XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQuYnV0dG9uV2lkdGgsXG5cdFx0XHRcdFx0XHRcdFx0XHQpfVxuXHRcdFx0XHRcdFx0XHRcdFx0aGVpZ2h0UmVxdWVzdD17Y29uZmlnKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQoY2ZnKSA9PlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGNmZy5zZXNzaW9uTWVudT8uYnV0dG9uSGVpZ2h0ID8/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZGVmYXVsdENvbmZpZy5zZXNzaW9uTWVudVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0LmJ1dHRvbkhlaWdodCxcblx0XHRcdFx0XHRcdFx0XHRcdCl9XG5cdFx0XHRcdFx0XHRcdFx0XHRvbkNsaWNrZWQ9eygpID0+IHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0ZXhlY0FzeW5jKFwibG9naW5jdGwgbG9jay1zZXNzaW9uXCIpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRzZXRWaXNpYmxlKGZhbHNlKTtcblx0XHRcdFx0XHRcdFx0XHRcdH19XG5cdFx0XHRcdFx0XHRcdFx0PlxuXHRcdFx0XHRcdFx0XHRcdFx0PGJveFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRvcmllbnRhdGlvbj17R3RrLk9yaWVudGF0aW9uLlZFUlRJQ0FMfVxuXHRcdFx0XHRcdFx0XHRcdFx0XHR2YWxpZ249e0d0ay5BbGlnbi5DRU5URVJ9XG5cdFx0XHRcdFx0XHRcdFx0XHQ+XG5cdFx0XHRcdFx0XHRcdFx0XHRcdDxpbWFnZVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHBpeGVsU2l6ZT17NjB9XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWNvbk5hbWU9XCJtaS1sb2NrLXN5bWJvbGljXCJcblx0XHRcdFx0XHRcdFx0XHRcdFx0Lz5cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQ8bGFiZWxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR3cmFwTW9kZT17UGFuZ28uV3JhcE1vZGUuV09SRH1cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRqdXN0aWZ5PXtHdGsuSnVzdGlmaWNhdGlvbi5DRU5URVJ9XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0bGFiZWw9XCJMb2NrXCJcblx0XHRcdFx0XHRcdFx0XHRcdFx0Lz5cblx0XHRcdFx0XHRcdFx0XHRcdDwvYm94PlxuXHRcdFx0XHRcdFx0XHRcdDwvYnV0dG9uPlxuXG5cdFx0XHRcdFx0XHRcdFx0PGJ1dHRvblxuXHRcdFx0XHRcdFx0XHRcdFx0Y3Vyc29yPXtHZGsuQ3Vyc29yLm5ld19mcm9tX25hbWUoXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFwicG9pbnRlclwiLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRudWxsLFxuXHRcdFx0XHRcdFx0XHRcdFx0KX1cblx0XHRcdFx0XHRcdFx0XHRcdHdpZHRoUmVxdWVzdD17Y29uZmlnKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQoY2ZnKSA9PlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGNmZy5zZXNzaW9uTWVudT8uYnV0dG9uV2lkdGggPz9cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRkZWZhdWx0Q29uZmlnLnNlc3Npb25NZW51XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQuYnV0dG9uV2lkdGgsXG5cdFx0XHRcdFx0XHRcdFx0XHQpfVxuXHRcdFx0XHRcdFx0XHRcdFx0aGVpZ2h0UmVxdWVzdD17Y29uZmlnKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQoY2ZnKSA9PlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGNmZy5zZXNzaW9uTWVudT8uYnV0dG9uSGVpZ2h0ID8/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZGVmYXVsdENvbmZpZy5zZXNzaW9uTWVudVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0LmJ1dHRvbkhlaWdodCxcblx0XHRcdFx0XHRcdFx0XHRcdCl9XG5cdFx0XHRcdFx0XHRcdFx0XHRvbkNsaWNrZWQ9eygpID0+IHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0ZXhlY0FzeW5jKFwic3lzdGVtY3RsIHN1c3BlbmRcIik7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHNldFZpc2libGUoZmFsc2UpO1xuXHRcdFx0XHRcdFx0XHRcdFx0fX1cblx0XHRcdFx0XHRcdFx0XHQ+XG5cdFx0XHRcdFx0XHRcdFx0XHQ8Ym94XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG9yaWVudGF0aW9uPXtHdGsuT3JpZW50YXRpb24uVkVSVElDQUx9XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHZhbGlnbj17R3RrLkFsaWduLkNFTlRFUn1cblx0XHRcdFx0XHRcdFx0XHRcdD5cblx0XHRcdFx0XHRcdFx0XHRcdFx0PGltYWdlXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0cGl4ZWxTaXplPXs2MH1cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpY29uTmFtZT1cIm1pLWRhcmstbW9kZS1zeW1ib2xpY1wiXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8+XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0PGxhYmVsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0d3JhcE1vZGU9e1BhbmdvLldyYXBNb2RlLldPUkR9XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0anVzdGlmeT17R3RrLkp1c3RpZmljYXRpb24uQ0VOVEVSfVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGxhYmVsPVwiU2xlZXBcIlxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvPlxuXHRcdFx0XHRcdFx0XHRcdFx0PC9ib3g+XG5cdFx0XHRcdFx0XHRcdFx0PC9idXR0b24+XG5cblx0XHRcdFx0XHRcdFx0XHQ8YnV0dG9uXG5cdFx0XHRcdFx0XHRcdFx0XHRjdXJzb3I9e0dkay5DdXJzb3IubmV3X2Zyb21fbmFtZShcblx0XHRcdFx0XHRcdFx0XHRcdFx0XCJwb2ludGVyXCIsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdG51bGwsXG5cdFx0XHRcdFx0XHRcdFx0XHQpfVxuXHRcdFx0XHRcdFx0XHRcdFx0d2lkdGhSZXF1ZXN0PXtjb25maWcoXG5cdFx0XHRcdFx0XHRcdFx0XHRcdChjZmcpID0+XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Y2ZnLnNlc3Npb25NZW51Py5idXR0b25XaWR0aCA/P1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGRlZmF1bHRDb25maWcuc2Vzc2lvbk1lbnVcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdC5idXR0b25XaWR0aCxcblx0XHRcdFx0XHRcdFx0XHRcdCl9XG5cdFx0XHRcdFx0XHRcdFx0XHRoZWlnaHRSZXF1ZXN0PXtjb25maWcoXG5cdFx0XHRcdFx0XHRcdFx0XHRcdChjZmcpID0+XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Y2ZnLnNlc3Npb25NZW51Py5idXR0b25IZWlnaHQgPz9cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRkZWZhdWx0Q29uZmlnLnNlc3Npb25NZW51XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQuYnV0dG9uSGVpZ2h0LFxuXHRcdFx0XHRcdFx0XHRcdFx0KX1cblx0XHRcdFx0XHRcdFx0XHRcdG9uQ2xpY2tlZD17KCkgPT4ge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRleGVjQXN5bmMoXCJwa2lsbCBIeXBybGFuZFwiKTtcblx0XHRcdFx0XHRcdFx0XHRcdH19XG5cdFx0XHRcdFx0XHRcdFx0PlxuXHRcdFx0XHRcdFx0XHRcdFx0PGJveFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRvcmllbnRhdGlvbj17R3RrLk9yaWVudGF0aW9uLlZFUlRJQ0FMfVxuXHRcdFx0XHRcdFx0XHRcdFx0XHR2YWxpZ249e0d0ay5BbGlnbi5DRU5URVJ9XG5cdFx0XHRcdFx0XHRcdFx0XHQ+XG5cdFx0XHRcdFx0XHRcdFx0XHRcdDxpbWFnZVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHBpeGVsU2l6ZT17NjB9XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWNvbk5hbWU9XCJtaS1sb2dvdXQtc3ltYm9saWNcIlxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvPlxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdDxsYWJlbFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHdyYXBNb2RlPXtQYW5nby5XcmFwTW9kZS5XT1JEfVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGp1c3RpZnk9e0d0ay5KdXN0aWZpY2F0aW9uLkNFTlRFUn1cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRsYWJlbD1cIkxvZ291dFwiXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8+XG5cdFx0XHRcdFx0XHRcdFx0XHQ8L2JveD5cblx0XHRcdFx0XHRcdFx0XHQ8L2J1dHRvbj5cblxuXHRcdFx0XHRcdFx0XHRcdDxidXR0b25cblx0XHRcdFx0XHRcdFx0XHRcdGN1cnNvcj17R2RrLkN1cnNvci5uZXdfZnJvbV9uYW1lKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcInBvaW50ZXJcIixcblx0XHRcdFx0XHRcdFx0XHRcdFx0bnVsbCxcblx0XHRcdFx0XHRcdFx0XHRcdCl9XG5cdFx0XHRcdFx0XHRcdFx0XHR3aWR0aFJlcXVlc3Q9e2NvbmZpZyhcblx0XHRcdFx0XHRcdFx0XHRcdFx0KGNmZykgPT5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRjZmcuc2Vzc2lvbk1lbnU/LmJ1dHRvbldpZHRoID8/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZGVmYXVsdENvbmZpZy5zZXNzaW9uTWVudVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0LmJ1dHRvbldpZHRoLFxuXHRcdFx0XHRcdFx0XHRcdFx0KX1cblx0XHRcdFx0XHRcdFx0XHRcdGhlaWdodFJlcXVlc3Q9e2NvbmZpZyhcblx0XHRcdFx0XHRcdFx0XHRcdFx0KGNmZykgPT5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRjZmcuc2Vzc2lvbk1lbnU/LmJ1dHRvbkhlaWdodCA/P1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGRlZmF1bHRDb25maWcuc2Vzc2lvbk1lbnVcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdC5idXR0b25IZWlnaHQsXG5cdFx0XHRcdFx0XHRcdFx0XHQpfVxuXHRcdFx0XHRcdFx0XHRcdFx0b25DbGlja2VkPXsoKSA9PiB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGV4ZWNBc3luYyhcImtpdHR5IGJ0b3BcIik7XG5cdFx0XHRcdFx0XHRcdFx0XHR9fVxuXHRcdFx0XHRcdFx0XHRcdD5cblx0XHRcdFx0XHRcdFx0XHRcdDxib3hcblx0XHRcdFx0XHRcdFx0XHRcdFx0b3JpZW50YXRpb249e0d0ay5PcmllbnRhdGlvbi5WRVJUSUNBTH1cblx0XHRcdFx0XHRcdFx0XHRcdFx0dmFsaWduPXtHdGsuQWxpZ24uQ0VOVEVSfVxuXHRcdFx0XHRcdFx0XHRcdFx0PlxuXHRcdFx0XHRcdFx0XHRcdFx0XHQ8aW1hZ2Vcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRwaXhlbFNpemU9ezYwfVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGljb25OYW1lPVwibWktYnJvd3NlLWFjdGl2aXR5LXN5bWJvbGljXCJcblx0XHRcdFx0XHRcdFx0XHRcdFx0Lz5cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQ8bGFiZWxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR3cmFwTW9kZT17UGFuZ28uV3JhcE1vZGUuV09SRH1cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRqdXN0aWZ5PXtHdGsuSnVzdGlmaWNhdGlvbi5DRU5URVJ9XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0bGFiZWw9XCJUYXNrIE1hbmFnZXJcIlxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvPlxuXHRcdFx0XHRcdFx0XHRcdFx0PC9ib3g+XG5cdFx0XHRcdFx0XHRcdFx0PC9idXR0b24+XG5cdFx0XHRcdFx0XHRcdDwvYm94PlxuXG5cdFx0XHRcdFx0XHRcdDxib3hcblx0XHRcdFx0XHRcdFx0XHRzcGFjaW5nPXtjb25maWcoXG5cdFx0XHRcdFx0XHRcdFx0XHQoY2ZnKSA9PlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRjZmcuc2Vzc2lvbk1lbnU/LmJ1dHRvbkdhcCA/P1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRkZWZhdWx0Q29uZmlnLnNlc3Npb25NZW51LmJ1dHRvbkdhcCxcblx0XHRcdFx0XHRcdFx0XHQpfVxuXHRcdFx0XHRcdFx0XHQ+XG5cdFx0XHRcdFx0XHRcdFx0PGJ1dHRvblxuXHRcdFx0XHRcdFx0XHRcdFx0Y3Vyc29yPXtHZGsuQ3Vyc29yLm5ld19mcm9tX25hbWUoXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFwicG9pbnRlclwiLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRudWxsLFxuXHRcdFx0XHRcdFx0XHRcdFx0KX1cblx0XHRcdFx0XHRcdFx0XHRcdHdpZHRoUmVxdWVzdD17Y29uZmlnKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQoY2ZnKSA9PlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGNmZy5zZXNzaW9uTWVudT8uYnV0dG9uV2lkdGggPz9cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRkZWZhdWx0Q29uZmlnLnNlc3Npb25NZW51XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQuYnV0dG9uV2lkdGgsXG5cdFx0XHRcdFx0XHRcdFx0XHQpfVxuXHRcdFx0XHRcdFx0XHRcdFx0aGVpZ2h0UmVxdWVzdD17Y29uZmlnKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQoY2ZnKSA9PlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGNmZy5zZXNzaW9uTWVudT8uYnV0dG9uSGVpZ2h0ID8/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZGVmYXVsdENvbmZpZy5zZXNzaW9uTWVudVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0LmJ1dHRvbkhlaWdodCxcblx0XHRcdFx0XHRcdFx0XHRcdCl9XG5cdFx0XHRcdFx0XHRcdFx0XHRvbkNsaWNrZWQ9eygpID0+IHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0ZXhlY0FzeW5jKFwic3lzdGVtY3RsIGhpYmVybmF0ZVwiKTtcblx0XHRcdFx0XHRcdFx0XHRcdH19XG5cdFx0XHRcdFx0XHRcdFx0PlxuXHRcdFx0XHRcdFx0XHRcdFx0PGJveFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRvcmllbnRhdGlvbj17R3RrLk9yaWVudGF0aW9uLlZFUlRJQ0FMfVxuXHRcdFx0XHRcdFx0XHRcdFx0XHR2YWxpZ249e0d0ay5BbGlnbi5DRU5URVJ9XG5cdFx0XHRcdFx0XHRcdFx0XHQ+XG5cdFx0XHRcdFx0XHRcdFx0XHRcdDxpbWFnZVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHBpeGVsU2l6ZT17NjB9XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWNvbk5hbWU9XCJtaS1kb3dubG9hZGluZy1zeW1ib2xpY1wiXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8+XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0PGxhYmVsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0d3JhcE1vZGU9e1BhbmdvLldyYXBNb2RlLldPUkR9XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0anVzdGlmeT17R3RrLkp1c3RpZmljYXRpb24uQ0VOVEVSfVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGxhYmVsPVwiSGliZXJuYXRlXCJcblx0XHRcdFx0XHRcdFx0XHRcdFx0Lz5cblx0XHRcdFx0XHRcdFx0XHRcdDwvYm94PlxuXHRcdFx0XHRcdFx0XHRcdDwvYnV0dG9uPlxuXG5cdFx0XHRcdFx0XHRcdFx0PGJ1dHRvblxuXHRcdFx0XHRcdFx0XHRcdFx0Y3Vyc29yPXtHZGsuQ3Vyc29yLm5ld19mcm9tX25hbWUoXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFwicG9pbnRlclwiLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRudWxsLFxuXHRcdFx0XHRcdFx0XHRcdFx0KX1cblx0XHRcdFx0XHRcdFx0XHRcdHdpZHRoUmVxdWVzdD17Y29uZmlnKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQoY2ZnKSA9PlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGNmZy5zZXNzaW9uTWVudT8uYnV0dG9uV2lkdGggPz9cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRkZWZhdWx0Q29uZmlnLnNlc3Npb25NZW51XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQuYnV0dG9uV2lkdGgsXG5cdFx0XHRcdFx0XHRcdFx0XHQpfVxuXHRcdFx0XHRcdFx0XHRcdFx0aGVpZ2h0UmVxdWVzdD17Y29uZmlnKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQoY2ZnKSA9PlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGNmZy5zZXNzaW9uTWVudT8uYnV0dG9uSGVpZ2h0ID8/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZGVmYXVsdENvbmZpZy5zZXNzaW9uTWVudVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0LmJ1dHRvbkhlaWdodCxcblx0XHRcdFx0XHRcdFx0XHRcdCl9XG5cdFx0XHRcdFx0XHRcdFx0XHRvbkNsaWNrZWQ9eygpID0+IHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0ZXhlY0FzeW5jKFwic3lzdGVtY3RsIHBvd2Vyb2ZmXCIpO1xuXHRcdFx0XHRcdFx0XHRcdFx0fX1cblx0XHRcdFx0XHRcdFx0XHQ+XG5cdFx0XHRcdFx0XHRcdFx0XHQ8Ym94XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG9yaWVudGF0aW9uPXtHdGsuT3JpZW50YXRpb24uVkVSVElDQUx9XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHZhbGlnbj17R3RrLkFsaWduLkNFTlRFUn1cblx0XHRcdFx0XHRcdFx0XHRcdD5cblx0XHRcdFx0XHRcdFx0XHRcdFx0PGltYWdlXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0cGl4ZWxTaXplPXs2MH1cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpY29uTmFtZT1cIm1pLXBvd2VyLXNldHRpbmdzLW5ldy1zeW1ib2xpY1wiXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8+XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0PGxhYmVsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0d3JhcE1vZGU9e1BhbmdvLldyYXBNb2RlLldPUkR9XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0anVzdGlmeT17R3RrLkp1c3RpZmljYXRpb24uQ0VOVEVSfVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGxhYmVsPVwiU2h1dGRvd25cIlxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvPlxuXHRcdFx0XHRcdFx0XHRcdFx0PC9ib3g+XG5cdFx0XHRcdFx0XHRcdFx0PC9idXR0b24+XG5cblx0XHRcdFx0XHRcdFx0XHQ8YnV0dG9uXG5cdFx0XHRcdFx0XHRcdFx0XHRjdXJzb3I9e0dkay5DdXJzb3IubmV3X2Zyb21fbmFtZShcblx0XHRcdFx0XHRcdFx0XHRcdFx0XCJwb2ludGVyXCIsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdG51bGwsXG5cdFx0XHRcdFx0XHRcdFx0XHQpfVxuXHRcdFx0XHRcdFx0XHRcdFx0d2lkdGhSZXF1ZXN0PXtjb25maWcoXG5cdFx0XHRcdFx0XHRcdFx0XHRcdChjZmcpID0+XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Y2ZnLnNlc3Npb25NZW51Py5idXR0b25XaWR0aCA/P1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGRlZmF1bHRDb25maWcuc2Vzc2lvbk1lbnVcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdC5idXR0b25XaWR0aCxcblx0XHRcdFx0XHRcdFx0XHRcdCl9XG5cdFx0XHRcdFx0XHRcdFx0XHRoZWlnaHRSZXF1ZXN0PXtjb25maWcoXG5cdFx0XHRcdFx0XHRcdFx0XHRcdChjZmcpID0+XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Y2ZnLnNlc3Npb25NZW51Py5idXR0b25IZWlnaHQgPz9cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRkZWZhdWx0Q29uZmlnLnNlc3Npb25NZW51XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQuYnV0dG9uSGVpZ2h0LFxuXHRcdFx0XHRcdFx0XHRcdFx0KX1cblx0XHRcdFx0XHRcdFx0XHRcdG9uQ2xpY2tlZD17KCkgPT4ge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRleGVjQXN5bmMoXCJyZWJvb3RcIik7XG5cdFx0XHRcdFx0XHRcdFx0XHR9fVxuXHRcdFx0XHRcdFx0XHRcdD5cblx0XHRcdFx0XHRcdFx0XHRcdDxib3hcblx0XHRcdFx0XHRcdFx0XHRcdFx0b3JpZW50YXRpb249e0d0ay5PcmllbnRhdGlvbi5WRVJUSUNBTH1cblx0XHRcdFx0XHRcdFx0XHRcdFx0dmFsaWduPXtHdGsuQWxpZ24uQ0VOVEVSfVxuXHRcdFx0XHRcdFx0XHRcdFx0PlxuXHRcdFx0XHRcdFx0XHRcdFx0XHQ8aW1hZ2Vcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRwaXhlbFNpemU9ezYwfVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGljb25OYW1lPVwibWktcmVzdGFydC1hbHQtc3ltYm9saWNcIlxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvPlxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdDxsYWJlbFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHdyYXBNb2RlPXtQYW5nby5XcmFwTW9kZS5XT1JEfVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGp1c3RpZnk9e0d0ay5KdXN0aWZpY2F0aW9uLkNFTlRFUn1cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRsYWJlbD1cIlJlYm9vdFwiXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8+XG5cdFx0XHRcdFx0XHRcdFx0XHQ8L2JveD5cblx0XHRcdFx0XHRcdFx0XHQ8L2J1dHRvbj5cblxuXHRcdFx0XHRcdFx0XHRcdDxidXR0b25cblx0XHRcdFx0XHRcdFx0XHRcdGN1cnNvcj17R2RrLkN1cnNvci5uZXdfZnJvbV9uYW1lKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcInBvaW50ZXJcIixcblx0XHRcdFx0XHRcdFx0XHRcdFx0bnVsbCxcblx0XHRcdFx0XHRcdFx0XHRcdCl9XG5cdFx0XHRcdFx0XHRcdFx0XHR3aWR0aFJlcXVlc3Q9e2NvbmZpZyhcblx0XHRcdFx0XHRcdFx0XHRcdFx0KGNmZykgPT5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRjZmcuc2Vzc2lvbk1lbnU/LmJ1dHRvbldpZHRoID8/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZGVmYXVsdENvbmZpZy5zZXNzaW9uTWVudVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0LmJ1dHRvbldpZHRoLFxuXHRcdFx0XHRcdFx0XHRcdFx0KX1cblx0XHRcdFx0XHRcdFx0XHRcdGhlaWdodFJlcXVlc3Q9e2NvbmZpZyhcblx0XHRcdFx0XHRcdFx0XHRcdFx0KGNmZykgPT5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRjZmcuc2Vzc2lvbk1lbnU/LmJ1dHRvbkhlaWdodCA/P1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGRlZmF1bHRDb25maWcuc2Vzc2lvbk1lbnVcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdC5idXR0b25IZWlnaHQsXG5cdFx0XHRcdFx0XHRcdFx0XHQpfVxuXHRcdFx0XHRcdFx0XHRcdFx0b25DbGlja2VkPXsoKSA9PiB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGV4ZWNBc3luYyhcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcInN5c3RlbWN0bCByZWJvb3QgLS1maXJtd2FyZS1zZXR1cFwiLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRcdFx0fX1cblx0XHRcdFx0XHRcdFx0XHQ+XG5cdFx0XHRcdFx0XHRcdFx0XHQ8Ym94XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG9yaWVudGF0aW9uPXtHdGsuT3JpZW50YXRpb24uVkVSVElDQUx9XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHZhbGlnbj17R3RrLkFsaWduLkNFTlRFUn1cblx0XHRcdFx0XHRcdFx0XHRcdD5cblx0XHRcdFx0XHRcdFx0XHRcdFx0PGltYWdlXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0cGl4ZWxTaXplPXs2MH1cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpY29uTmFtZT1cIm1pLXNldHRpbmdzLWFwcGxpY2F0aW9ucy1zeW1ib2xpY1wiXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8+XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0PGxhYmVsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0d3JhcFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHdyYXBNb2RlPXtQYW5nby5XcmFwTW9kZS5XT1JEfVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGp1c3RpZnk9e0d0ay5KdXN0aWZpY2F0aW9uLkNFTlRFUn1cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRsYWJlbD1cIlVFRklcIlxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvPlxuXHRcdFx0XHRcdFx0XHRcdFx0PC9ib3g+XG5cdFx0XHRcdFx0XHRcdFx0PC9idXR0b24+XG5cdFx0XHRcdFx0XHRcdDwvYm94PlxuXHRcdFx0XHRcdFx0PC9ib3g+XG5cdFx0XHRcdFx0PC9BZHcuQ2xhbXA+XG5cdFx0XHRcdDwvQWR3LkNsYW1wPlxuXHRcdFx0PC9yZXZlYWxlcj5cblx0XHQ8L0d0ay5XaW5kb3c+XG5cdCk7XG59XG4iLCAiLyoqXG4gKiBJbiB0aGUgZnV0dXJlIEkgd291bGQgbGlrZSB0byBtYWtlIHR5cGUgZGVjbGFyYXRpb24gaW4gZGVjb3JhdG9ycyBvcHRpb25hbFxuICogYW5kIGluZmVyIGl0IGZyb20gdHlwZXNjcmlwdCB0eXBlcyBhdCB0cmFuc3BpbGUgdGltZS4gQ3VycmVudGx5LCB3ZSBjb3VsZFxuICogZWl0aGVyIHVzZSBzdGFnZSAyIGRlY29yYXRvcnMgd2l0aCB0aGUgXCJlbWl0RGVjb3JhdG9yTWV0YWRhdGFcIiBhbmRcbiAqIFwiZXhwZXJpbWVudGFsRGVjb3JhdG9yc1wiIHRzY29uZmlnIG9wdGlvbnMuIEhvd2V2ZXIsIG1ldGFkYXRhIGlzIG5vdCBzdXBwb3J0ZWRcbiAqIGJ5IGVzYnVpbGQgd2hpY2ggaXMgd2hhdCBJJ20gbW9zdGx5IHRhcmdldGluZyBhcyB0aGUgYnVuZGxlciBmb3IgcGVyZm9ybWFuY2VcbiAqIHJlYXNvbnMuIGh0dHBzOi8vZ2l0aHViLmNvbS9ldmFudy9lc2J1aWxkL2lzc3Vlcy8yNTdcbiAqIEhvd2V2ZXIsIEkgYmVsaWV2ZSB0aGF0IHdlIHNob3VsZCBub3QgdXNlIHN0YWdlIDIgYW55bW9yZSxcbiAqIHNvIEknbSB3YWl0aW5nIGZvciBhIGJldHRlciBhbHRlcm5hdGl2ZS5cbiAqL1xuXG5pbXBvcnQgR09iamVjdCBmcm9tIFwiZ2k6Ly9HT2JqZWN0XCJcbmltcG9ydCBHTGliIGZyb20gXCJnaTovL0dMaWJcIlxuaW1wb3J0IHsgZGVmaW5lUHJvcGVydHlHZXR0ZXIsIGtlYmFiaWZ5IH0gZnJvbSBcIi4vdXRpbC5qc1wiXG5cbmNvbnN0IHByaXYgPSBTeW1ib2woXCJnb2JqZWN0IHByaXZhdGVcIilcbmNvbnN0IHsgZGVmaW5lUHJvcGVydHksIGZyb21FbnRyaWVzLCBlbnRyaWVzIH0gPSBPYmplY3RcbmNvbnN0IHsgT2JqZWN0OiBHT2JqLCByZWdpc3RlckNsYXNzIH0gPSBHT2JqZWN0XG5cbmV4cG9ydCB7IEdPYmplY3QgYXMgZGVmYXVsdCB9XG5leHBvcnQgeyBHT2JqIGFzIE9iamVjdCB9XG5cbmV4cG9ydCBjb25zdCBTaWduYWxGbGFncyA9IEdPYmplY3QuU2lnbmFsRmxhZ3NcbmV4cG9ydCB0eXBlIFNpZ25hbEZsYWdzID0gR09iamVjdC5TaWduYWxGbGFnc1xuXG5leHBvcnQgY29uc3QgQWNjdW11bGF0b3JUeXBlID0gR09iamVjdC5BY2N1bXVsYXRvclR5cGVcbmV4cG9ydCB0eXBlIEFjY3VtdWxhdG9yVHlwZSA9IEdPYmplY3QuQWNjdW11bGF0b3JUeXBlXG5cbmV4cG9ydCB0eXBlIFBhcmFtU3BlYzxUID0gdW5rbm93bj4gPSBHT2JqZWN0LlBhcmFtU3BlYzxUPlxuZXhwb3J0IGNvbnN0IFBhcmFtU3BlYyA9IEdPYmplY3QuUGFyYW1TcGVjXG5cbmV4cG9ydCB0eXBlIFBhcmFtRmxhZ3MgPSBHT2JqZWN0LlBhcmFtRmxhZ3NcbmV4cG9ydCBjb25zdCBQYXJhbUZsYWdzID0gR09iamVjdC5QYXJhbUZsYWdzXG5cbmV4cG9ydCB0eXBlIEdUeXBlPFQgPSB1bmtub3duPiA9IEdPYmplY3QuR1R5cGU8VD5cblxudHlwZSBHT2JqID0gR09iamVjdC5PYmplY3RcblxuaW50ZXJmYWNlIEdPYmpQcml2YXRlIGV4dGVuZHMgR09iaiB7XG4gICAgW3ByaXZdOiBSZWNvcmQ8c3RyaW5nLCBhbnk+XG59XG5cbnR5cGUgTWV0YSA9IHtcbiAgICBwcm9wZXJ0aWVzPzoge1xuICAgICAgICBbZmllbGROYW1lOiBzdHJpbmddOiB7XG4gICAgICAgICAgICBmbGFnczogUGFyYW1GbGFnc1xuICAgICAgICAgICAgdHlwZTogUHJvcGVydHlUeXBlRGVjbGFyYXRpb248dW5rbm93bj5cbiAgICAgICAgfVxuICAgIH1cbiAgICBzaWduYWxzPzoge1xuICAgICAgICBba2V5OiBzdHJpbmddOiB7XG4gICAgICAgICAgICBkZWZhdWx0PzogYm9vbGVhblxuICAgICAgICAgICAgZmxhZ3M/OiBTaWduYWxGbGFnc1xuICAgICAgICAgICAgYWNjdW11bGF0b3I/OiBBY2N1bXVsYXRvclR5cGVcbiAgICAgICAgICAgIHJldHVybl90eXBlPzogR1R5cGVcbiAgICAgICAgICAgIHBhcmFtX3R5cGVzPzogQXJyYXk8R1R5cGU+XG4gICAgICAgICAgICBtZXRob2Q6ICguLi5hcmc6IGFueVtdKSA9PiB1bmtub3duXG4gICAgICAgIH1cbiAgICB9XG59XG5cbnR5cGUgQ29udGV4dCA9IHsgcHJpdmF0ZTogZmFsc2U7IHN0YXRpYzogZmFsc2U7IG5hbWU6IHN0cmluZyB9XG50eXBlIFByb3BlcnR5Q29udGV4dDxUPiA9IENsYXNzRmllbGREZWNvcmF0b3JDb250ZXh0PEdPYmosIFQ+ICYgQ29udGV4dFxudHlwZSBHZXR0ZXJDb250ZXh0PFQ+ID0gQ2xhc3NHZXR0ZXJEZWNvcmF0b3JDb250ZXh0PEdPYmosIFQ+ICYgQ29udGV4dFxudHlwZSBTZXR0ZXJDb250ZXh0PFQ+ID0gQ2xhc3NTZXR0ZXJEZWNvcmF0b3JDb250ZXh0PEdPYmosIFQ+ICYgQ29udGV4dFxudHlwZSBTaWduYWxDb250ZXh0PFQgZXh0ZW5kcyAoKSA9PiBhbnk+ID0gQ2xhc3NNZXRob2REZWNvcmF0b3JDb250ZXh0PEdPYmosIFQ+ICYgQ29udGV4dFxuXG50eXBlIFNpZ25hbE9wdGlvbnMgPSB7XG4gICAgZGVmYXVsdD86IGJvb2xlYW5cbiAgICBmbGFncz86IFNpZ25hbEZsYWdzXG4gICAgYWNjdW11bGF0b3I/OiBBY2N1bXVsYXRvclR5cGVcbn1cblxudHlwZSBQcm9wZXJ0eVR5cGVEZWNsYXJhdGlvbjxUPiA9XG4gICAgfCAoKG5hbWU6IHN0cmluZywgZmxhZ3M6IFBhcmFtRmxhZ3MpID0+IFBhcmFtU3BlYzxUPilcbiAgICB8IFBhcmFtU3BlYzxUPlxuICAgIHwgeyAkZ3R5cGU6IEdUeXBlPFQ+IH1cblxuZnVuY3Rpb24gYXNzZXJ0RmllbGQoXG4gICAgY3R4OiBDbGFzc0ZpZWxkRGVjb3JhdG9yQ29udGV4dCB8IENsYXNzR2V0dGVyRGVjb3JhdG9yQ29udGV4dCB8IENsYXNzU2V0dGVyRGVjb3JhdG9yQ29udGV4dCxcbik6IHN0cmluZyB7XG4gICAgaWYgKGN0eC5wcml2YXRlKSB0aHJvdyBFcnJvcihcInByaXZhdGUgZmllbGRzIGFyZSBub3Qgc3VwcG9ydGVkXCIpXG4gICAgaWYgKGN0eC5zdGF0aWMpIHRocm93IEVycm9yKFwic3RhdGljIGZpZWxkcyBhcmUgbm90IHN1cHBvcnRlZFwiKVxuXG4gICAgaWYgKHR5cGVvZiBjdHgubmFtZSAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICB0aHJvdyBFcnJvcihcIm9ubHkgc3RyaW5ncyBjYW4gYmUgZ29iamVjdCBwcm9wZXJ0eSBrZXlzXCIpXG4gICAgfVxuXG4gICAgcmV0dXJuIGN0eC5uYW1lXG59XG5cbi8qKlxuICogRGVmaW5lcyBhIHJlYWRhYmxlICphbmQqIHdyaXRlYWJsZSBwcm9wZXJ0eSB0byBiZSByZWdpc3RlcmVkIHdoZW4gdXNpbmcgdGhlIHtAbGluayByZWdpc3Rlcn0gZGVjb3JhdG9yLlxuICpcbiAqIEV4YW1wbGU6XG4gKiBgYGB0c1xuICogY2xhc3Mge1xuICogICAgIFxcQHByb3BlcnR5KFN0cmluZykgbXlQcm9wID0gXCJcIlxuICogfVxuICogYGBgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwcm9wZXJ0eTxUPih0eXBlRGVjbGFyYXRpb246IFByb3BlcnR5VHlwZURlY2xhcmF0aW9uPFQ+KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChcbiAgICAgICAgXzogdm9pZCxcbiAgICAgICAgY3R4OiBQcm9wZXJ0eUNvbnRleHQ8VD4sXG4gICAgICAgIG9wdGlvbnM/OiB7IG1ldGFPbmx5OiB0cnVlIH0sXG4gICAgKTogKHRoaXM6IEdPYmosIGluaXQ6IFQpID0+IFQge1xuICAgICAgICBjb25zdCBmaWVsZE5hbWUgPSBhc3NlcnRGaWVsZChjdHgpXG4gICAgICAgIGNvbnN0IGtleSA9IGtlYmFiaWZ5KGZpZWxkTmFtZSlcbiAgICAgICAgY29uc3QgbWV0YTogUGFydGlhbDxNZXRhPiA9IGN0eC5tZXRhZGF0YSFcblxuICAgICAgICBtZXRhLnByb3BlcnRpZXMgPz89IHt9XG4gICAgICAgIG1ldGEucHJvcGVydGllc1tmaWVsZE5hbWVdID0geyBmbGFnczogUGFyYW1GbGFncy5SRUFEV1JJVEUsIHR5cGU6IHR5cGVEZWNsYXJhdGlvbiB9XG5cbiAgICAgICAgY3R4LmFkZEluaXRpYWxpemVyKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGRlZmluZVByb3BlcnR5R2V0dGVyKHRoaXMsIGZpZWxkTmFtZSBhcyBFeHRyYWN0PGtleW9mIEdPYmosIHN0cmluZz4pXG5cbiAgICAgICAgICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMubWV0YU9ubHkpIHJldHVyblxuXG4gICAgICAgICAgICBkZWZpbmVQcm9wZXJ0eSh0aGlzLCBmaWVsZE5hbWUsIHtcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgc2V0KHY6IFQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXNbcHJpdl1ba2V5XSAhPT0gdikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1twcml2XVtrZXldID0gdlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RpZnkoa2V5KVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBnZXQoKTogVCB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzW3ByaXZdW2tleV1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSBzYXRpc2ZpZXMgVGhpc1R5cGU8R09ialByaXZhdGU+KVxuICAgICAgICB9KVxuXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoaW5pdDogVCkge1xuICAgICAgICAgICAgY29uc3QgZGljdCA9ICgodGhpcyBhcyBHT2JqUHJpdmF0ZSlbcHJpdl0gPz89IHt9KVxuICAgICAgICAgICAgZGljdFtrZXldID0gaW5pdFxuICAgICAgICAgICAgcmV0dXJuIGluaXRcbiAgICAgICAgfVxuICAgIH1cbn1cblxuLyoqXG4gKiBEZWZpbmVzIGEgcmVhZC1vbmx5IHByb3BlcnR5IHRvIGJlIHJlZ2lzdGVyZWQgd2hlbiB1c2luZyB0aGUge0BsaW5rIHJlZ2lzdGVyfSBkZWNvcmF0b3IuXG4gKiBJZiB0aGUgZ2V0dGVyIGhhcyBhIHNldHRlciBwYWlyIGRlY29yYXRlZCB3aXRoIHRoZSB7QGxpbmsgc2V0dGVyfSBkZWNvcmF0b3IgdGhlIHByb3BlcnR5IHdpbGwgYmUgcmVhZGFibGUgKmFuZCogd3JpdGVhYmxlLlxuICpcbiAqIEV4YW1wbGU6XG4gKiBgYGB0c1xuICogY2xhc3Mge1xuICogICAgIFxcQHNldHRlcihTdHJpbmcpXG4gKiAgICAgc2V0IG15UHJvcCh2YWx1ZTogc3RyaW5nKSB7XG4gKiAgICAgICAgIC8vXG4gKiAgICAgfVxuICpcbiAqICAgICBcXEBnZXR0ZXIoU3RyaW5nKVxuICogICAgIGdldCBteVByb3AoKTogc3RyaW5nIHtcbiAqICAgICAgICAgcmV0dXJuIFwiXCJcbiAqICAgICB9XG4gKiB9XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldHRlcjxUPih0eXBlRGVjbGFyYXRpb246IFByb3BlcnR5VHlwZURlY2xhcmF0aW9uPFQ+KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGdldHRlcihnZXR0ZXI6ICh0aGlzOiBHT2JqKSA9PiBULCBjdHg6IEdldHRlckNvbnRleHQ8VD4pOiAodGhpczogR09iaikgPT4gVCB7XG4gICAgICAgIGNvbnN0IGZpZWxkTmFtZSA9IGFzc2VydEZpZWxkKGN0eClcbiAgICAgICAgY29uc3QgbWV0YTogUGFydGlhbDxNZXRhPiA9IGN0eC5tZXRhZGF0YSFcbiAgICAgICAgY29uc3QgcHJvcHMgPSAobWV0YS5wcm9wZXJ0aWVzID8/PSB7fSlcbiAgICAgICAgaWYgKGZpZWxkTmFtZSBpbiBwcm9wcykge1xuICAgICAgICAgICAgY29uc3QgeyBmbGFncywgdHlwZSB9ID0gcHJvcHNbZmllbGROYW1lXVxuICAgICAgICAgICAgcHJvcHNbZmllbGROYW1lXSA9IHsgZmxhZ3M6IGZsYWdzIHwgUGFyYW1GbGFncy5SRUFEQUJMRSwgdHlwZSB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwcm9wc1tmaWVsZE5hbWVdID0geyBmbGFnczogUGFyYW1GbGFncy5SRUFEQUJMRSwgdHlwZTogdHlwZURlY2xhcmF0aW9uIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZ2V0dGVyXG4gICAgfVxufVxuXG4vKipcbiAqIERlZmluZXMgYSB3cml0ZS1vbmx5IHByb3BlcnR5IHRvIGJlIHJlZ2lzdGVyZWQgd2hlbiB1c2luZyB0aGUge0BsaW5rIHJlZ2lzdGVyfSBkZWNvcmF0b3IuXG4gKiBJZiB0aGUgc2V0dGVyIGhhcyBhIGdldHRlciBwYWlyIGRlY29yYXRlZCB3aXRoIHRoZSB7QGxpbmsgZ2V0dGVyfSBkZWNvcmF0b3IgdGhlIHByb3BlcnR5IHdpbGwgYmUgd3JpdGVhYmxlICphbmQqIHJlYWRhYmxlLlxuICpcbiAqIEV4YW1wbGU6XG4gKiBgYGB0c1xuICogY2xhc3Mge1xuICogICAgIFxcQHNldHRlcihTdHJpbmcpXG4gKiAgICAgc2V0IG15UHJvcCh2YWx1ZTogc3RyaW5nKSB7XG4gKiAgICAgICAgIC8vXG4gKiAgICAgfVxuICpcbiAqICAgICBcXEBnZXR0ZXIoU3RyaW5nKVxuICogICAgIGdldCBteVByb3AoKTogc3RyaW5nIHtcbiAqICAgICAgICAgcmV0dXJuIFwiXCJcbiAqICAgICB9XG4gKiB9XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldHRlcjxUPih0eXBlRGVjbGFyYXRpb246IFByb3BlcnR5VHlwZURlY2xhcmF0aW9uPFQ+KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHNldHRlcihcbiAgICAgICAgc2V0dGVyOiAodGhpczogR09iaiwgdmFsdWU6IFQpID0+IHZvaWQsXG4gICAgICAgIGN0eDogU2V0dGVyQ29udGV4dDxUPixcbiAgICApOiAodGhpczogR09iaiwgdmFsdWU6IFQpID0+IHZvaWQge1xuICAgICAgICBjb25zdCBmaWVsZE5hbWUgPSBhc3NlcnRGaWVsZChjdHgpXG4gICAgICAgIGNvbnN0IG1ldGE6IFBhcnRpYWw8TWV0YT4gPSBjdHgubWV0YWRhdGEhXG4gICAgICAgIGNvbnN0IHByb3BzID0gKG1ldGEucHJvcGVydGllcyA/Pz0ge30pXG4gICAgICAgIGlmIChmaWVsZE5hbWUgaW4gcHJvcHMpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgZmxhZ3MsIHR5cGUgfSA9IHByb3BzW2ZpZWxkTmFtZV1cbiAgICAgICAgICAgIHByb3BzW2ZpZWxkTmFtZV0gPSB7IGZsYWdzOiBmbGFncyB8IFBhcmFtRmxhZ3MuV1JJVEFCTEUsIHR5cGUgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcHJvcHNbZmllbGROYW1lXSA9IHsgZmxhZ3M6IFBhcmFtRmxhZ3MuV1JJVEFCTEUsIHR5cGU6IHR5cGVEZWNsYXJhdGlvbiB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNldHRlclxuICAgIH1cbn1cblxudHlwZSBQYXJhbVR5cGU8UD4gPSBQIGV4dGVuZHMgeyAkZ3R5cGU6IEdUeXBlPGluZmVyIFQ+IH0gPyBUIDogUCBleHRlbmRzIEdUeXBlPGluZmVyIFQ+ID8gVCA6IG5ldmVyXG5cbnR5cGUgUGFyYW1UeXBlczxQYXJhbXM+ID0ge1xuICAgIFtLIGluIGtleW9mIFBhcmFtc106IFBhcmFtVHlwZTxQYXJhbXNbS10+XG59XG5cbi8qKlxuICogRGVmaW5lcyBhIHNpZ25hbCB0byBiZSByZWdpc3RlcmVkIHdoZW4gdXNpbmcgdGhlIHtAbGluayByZWdpc3Rlcn0gZGVjb3JhdG9yLlxuICpcbiAqIEV4YW1wbGU6XG4gKiBgYGB0c1xuICogY2xhc3Mge1xuICogICAgIFxcQHNpZ25hbChbU3RyaW5nLCBOdW1iZXJdLCBCb29sZWFuLCB7XG4gKiAgICAgICAgIGFjY3VtdWxhdG9yOiBBY2N1bXVsYXRvclR5cGUuRklSU1RfV0lOU1xuICogICAgIH0pXG4gKiAgICAgbXlTaWduYWwoc3RyOiBzdHJpbmcsIG46IG51bWJlcik6IGJvb2xlYW4ge1xuICogICAgICAgICAvLyBkZWZhdWx0IGhhbmRsZXJcbiAqICAgICAgICAgcmV0dXJuIGZhbHNlXG4gKiAgICAgfVxuICogfVxuICogYGBgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzaWduYWw8XG4gICAgY29uc3QgUGFyYW1zIGV4dGVuZHMgQXJyYXk8eyAkZ3R5cGU6IEdUeXBlIH0gfCBHVHlwZT4sXG4gICAgUmV0dXJuIGV4dGVuZHMgeyAkZ3R5cGU6IEdUeXBlIH0gfCBHVHlwZSxcbj4oXG4gICAgcGFyYW1zOiBQYXJhbXMsXG4gICAgcmV0dXJuVHlwZT86IFJldHVybixcbiAgICBvcHRpb25zPzogU2lnbmFsT3B0aW9ucyxcbik6IChcbiAgICBtZXRob2Q6ICh0aGlzOiBHT2JqLCAuLi5hcmdzOiBQYXJhbVR5cGVzPFBhcmFtcz4pID0+IFBhcmFtVHlwZTxSZXR1cm4+LFxuICAgIGN0eDogU2lnbmFsQ29udGV4dDx0eXBlb2YgbWV0aG9kPixcbikgPT4gdHlwZW9mIG1ldGhvZFxuXG4vKipcbiAqIERlZmluZXMgYSBzaWduYWwgdG8gYmUgcmVnaXN0ZXJlZCB3aGVuIHVzaW5nIHRoZSB7QGxpbmsgcmVnaXN0ZXJ9IGRlY29yYXRvci5cbiAqXG4gKiBFeGFtcGxlOlxuICogYGBgdHNcbiAqIGNsYXNzIHtcbiAqICAgICBcXEBzaWduYWwoU3RyaW5nLCBOdW1iZXIpXG4gKiAgICAgbXlTaWduYWwoc3RyOiBzdHJpbmcsIG46IG51bWJlcik6IHZvaWQge1xuICogICAgICAgICAvLyBkZWZhdWx0IGhhbmRsZXJcbiAqICAgICB9XG4gKiB9XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNpZ25hbDxQYXJhbXMgZXh0ZW5kcyBBcnJheTx7ICRndHlwZTogR1R5cGUgfSB8IEdUeXBlPj4oXG4gICAgLi4ucGFyYW1zOiBQYXJhbXNcbik6IChcbiAgICBtZXRob2Q6ICh0aGlzOiBHT2JqZWN0Lk9iamVjdCwgLi4uYXJnczogUGFyYW1UeXBlczxQYXJhbXM+KSA9PiB2b2lkLFxuICAgIGN0eDogU2lnbmFsQ29udGV4dDx0eXBlb2YgbWV0aG9kPixcbikgPT4gdHlwZW9mIG1ldGhvZFxuXG5leHBvcnQgZnVuY3Rpb24gc2lnbmFsPFxuICAgIFBhcmFtcyBleHRlbmRzIEFycmF5PHsgJGd0eXBlOiBHVHlwZSB9IHwgR1R5cGU+LFxuICAgIFJldHVybiBleHRlbmRzIHsgJGd0eXBlOiBHVHlwZSB9IHwgR1R5cGUsXG4+KFxuICAgIC4uLmFyZ3M6IFBhcmFtcyB8IFtwYXJhbXM6IFBhcmFtcywgcmV0dXJuVHlwZT86IFJldHVybiwgb3B0aW9ucz86IFNpZ25hbE9wdGlvbnNdXG4pOiAoXG4gICAgbWV0aG9kOiAodGhpczogR09iaiwgLi4uYXJnczogUGFyYW1UeXBlczxQYXJhbXM+KSA9PiBQYXJhbVR5cGU8UmV0dXJuPiB8IHZvaWQsXG4gICAgY3R4OiBTaWduYWxDb250ZXh0PHR5cGVvZiBtZXRob2Q+LFxuKSA9PiB0eXBlb2YgbWV0aG9kIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKG1ldGhvZCwgY3R4KSB7XG4gICAgICAgIGlmIChjdHgucHJpdmF0ZSkgdGhyb3cgRXJyb3IoXCJwcml2YXRlIGZpZWxkcyBhcmUgbm90IHN1cHBvcnRlZFwiKVxuICAgICAgICBpZiAoY3R4LnN0YXRpYykgdGhyb3cgRXJyb3IoXCJzdGF0aWMgZmllbGRzIGFyZSBub3Qgc3VwcG9ydGVkXCIpXG5cbiAgICAgICAgaWYgKHR5cGVvZiBjdHgubmFtZSAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgdGhyb3cgRXJyb3IoXCJvbmx5IHN0cmluZ3MgY2FuIGJlIGdvYmplY3Qgc2lnbmFsc1wiKVxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgc2lnbmFsTmFtZSA9IGtlYmFiaWZ5KGN0eC5uYW1lKVxuICAgICAgICBjb25zdCBtZXRhOiBQYXJ0aWFsPE1ldGE+ID0gY3R4Lm1ldGFkYXRhIVxuICAgICAgICBjb25zdCBzaWduYWxzID0gKG1ldGEuc2lnbmFscyA/Pz0ge30pXG5cbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoYXJnc1swXSkpIHtcbiAgICAgICAgICAgIGNvbnN0IFtwYXJhbXMsIHJldHVyblR5cGUsIG9wdGlvbnNdID0gYXJncyBhcyBbXG4gICAgICAgICAgICAgICAgcGFyYW1zOiBQYXJhbXMsXG4gICAgICAgICAgICAgICAgcmV0dXJuVHlwZT86IFJldHVybixcbiAgICAgICAgICAgICAgICBvcHRpb25zPzogU2lnbmFsT3B0aW9ucyxcbiAgICAgICAgICAgIF1cblxuICAgICAgICAgICAgc2lnbmFsc1tzaWduYWxOYW1lXSA9IHtcbiAgICAgICAgICAgICAgICBtZXRob2QsXG4gICAgICAgICAgICAgICAgZGVmYXVsdDogb3B0aW9ucz8uZGVmYXVsdCA/PyB0cnVlLFxuICAgICAgICAgICAgICAgIHBhcmFtX3R5cGVzOiBwYXJhbXMubWFwKChpKSA9PiAoXCIkZ3R5cGVcIiBpbiBpID8gaS4kZ3R5cGUgOiBpKSksXG4gICAgICAgICAgICAgICAgLi4uKHJldHVyblR5cGUgJiYge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm5fdHlwZTogXCIkZ3R5cGVcIiBpbiByZXR1cm5UeXBlID8gcmV0dXJuVHlwZS4kZ3R5cGUgOiByZXR1cm5UeXBlLFxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIC4uLihvcHRpb25zPy5mbGFncyAmJiB7XG4gICAgICAgICAgICAgICAgICAgIGZsYWdzOiBvcHRpb25zLmZsYWdzLFxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIC4uLih0eXBlb2Ygb3B0aW9ucz8uYWNjdW11bGF0b3IgPT09IFwibnVtYmVyXCIgJiYge1xuICAgICAgICAgICAgICAgICAgICBhY2N1bXVsYXRvcjogb3B0aW9ucy5hY2N1bXVsYXRvcixcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IHBhcmFtcyA9IGFyZ3MgYXMgUGFyYW1zXG4gICAgICAgICAgICBzaWduYWxzW3NpZ25hbE5hbWVdID0ge1xuICAgICAgICAgICAgICAgIG1ldGhvZCxcbiAgICAgICAgICAgICAgICBwYXJhbV90eXBlczogcGFyYW1zLm1hcCgoaSkgPT4gKFwiJGd0eXBlXCIgaW4gaSA/IGkuJGd0eXBlIDogaSkpLFxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICguLi5wYXJhbXMpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmVtaXQoc2lnbmFsTmFtZSwgLi4ucGFyYW1zKSBhcyBQYXJhbVR5cGU8UmV0dXJuPlxuICAgICAgICB9XG4gICAgfVxufVxuXG5jb25zdCBNQVhJTlQgPSAyICoqIDMxIC0gMVxuY29uc3QgTUlOSU5UID0gLSgyICoqIDMxKVxuY29uc3QgTUFYVUlOVCA9IDIgKiogMzIgLSAxXG5jb25zdCBNQVhGTE9BVCA9IDMuNDAyODIzNWUzOFxuY29uc3QgTUlORkxPQVQgPSAtMy40MDI4MjM1ZTM4XG5jb25zdCBNSU5JTlQ2NCA9IE51bWJlci5NSU5fU0FGRV9JTlRFR0VSXG5jb25zdCBNQVhJTlQ2NCA9IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSXG5cbmZ1bmN0aW9uIHBzcGVjRnJvbUdUeXBlKHR5cGU6IEdUeXBlPHVua25vd24+LCBuYW1lOiBzdHJpbmcsIGZsYWdzOiBQYXJhbUZsYWdzKSB7XG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgIGNhc2UgR09iamVjdC5UWVBFX0JPT0xFQU46XG4gICAgICAgICAgICByZXR1cm4gUGFyYW1TcGVjLmJvb2xlYW4obmFtZSwgXCJcIiwgXCJcIiwgZmxhZ3MsIGZhbHNlKVxuICAgICAgICBjYXNlIEdPYmplY3QuVFlQRV9TVFJJTkc6XG4gICAgICAgICAgICByZXR1cm4gUGFyYW1TcGVjLnN0cmluZyhuYW1lLCBcIlwiLCBcIlwiLCBmbGFncywgXCJcIilcbiAgICAgICAgY2FzZSBHT2JqZWN0LlRZUEVfSU5UOlxuICAgICAgICAgICAgcmV0dXJuIFBhcmFtU3BlYy5pbnQobmFtZSwgXCJcIiwgXCJcIiwgZmxhZ3MsIE1JTklOVCwgTUFYSU5ULCAwKVxuICAgICAgICBjYXNlIEdPYmplY3QuVFlQRV9VSU5UOlxuICAgICAgICAgICAgcmV0dXJuIFBhcmFtU3BlYy51aW50KG5hbWUsIFwiXCIsIFwiXCIsIGZsYWdzLCAwLCBNQVhVSU5ULCAwKVxuICAgICAgICBjYXNlIEdPYmplY3QuVFlQRV9JTlQ2NDpcbiAgICAgICAgICAgIHJldHVybiBQYXJhbVNwZWMuaW50NjQobmFtZSwgXCJcIiwgXCJcIiwgZmxhZ3MsIE1JTklOVDY0LCBNQVhJTlQ2NCwgMClcbiAgICAgICAgY2FzZSBHT2JqZWN0LlRZUEVfVUlOVDY0OlxuICAgICAgICAgICAgcmV0dXJuIFBhcmFtU3BlYy51aW50NjQobmFtZSwgXCJcIiwgXCJcIiwgZmxhZ3MsIDAsIE51bWJlci5NQVhfU0FGRV9JTlRFR0VSLCAwKVxuICAgICAgICBjYXNlIEdPYmplY3QuVFlQRV9GTE9BVDpcbiAgICAgICAgICAgIHJldHVybiBQYXJhbVNwZWMuZmxvYXQobmFtZSwgXCJcIiwgXCJcIiwgZmxhZ3MsIE1JTkZMT0FULCBNQVhGTE9BVCwgMClcbiAgICAgICAgY2FzZSBHT2JqZWN0LlRZUEVfRE9VQkxFOlxuICAgICAgICAgICAgcmV0dXJuIFBhcmFtU3BlYy5kb3VibGUobmFtZSwgXCJcIiwgXCJcIiwgZmxhZ3MsIE51bWJlci5NSU5fVkFMVUUsIE51bWJlci5NSU5fVkFMVUUsIDApXG4gICAgICAgIGNhc2UgR09iamVjdC5UWVBFX0pTT0JKRUNUOlxuICAgICAgICAgICAgcmV0dXJuIFBhcmFtU3BlYy5qc29iamVjdChuYW1lLCBcIlwiLCBcIlwiLCBmbGFncylcbiAgICAgICAgY2FzZSBHT2JqZWN0LlRZUEVfVkFSSUFOVDpcbiAgICAgICAgICAgIHJldHVybiBQYXJhbVNwZWMub2JqZWN0KG5hbWUsIFwiXCIsIFwiXCIsIGZsYWdzIGFzIGFueSwgR0xpYi5WYXJpYW50KVxuXG4gICAgICAgIGNhc2UgR09iamVjdC5UWVBFX0VOVU06XG4gICAgICAgIGNhc2UgR09iamVjdC5UWVBFX0lOVEVSRkFDRTpcbiAgICAgICAgY2FzZSBHT2JqZWN0LlRZUEVfQk9YRUQ6XG4gICAgICAgIGNhc2UgR09iamVjdC5UWVBFX1BPSU5URVI6XG4gICAgICAgIGNhc2UgR09iamVjdC5UWVBFX1BBUkFNOlxuICAgICAgICBjYXNlIEdPYmplY3QudHlwZV9mcm9tX25hbWUoXCJHVHlwZVwiKTpcbiAgICAgICAgICAgIHRocm93IEVycm9yKGBjYW5ub3QgZ3Vlc3MgUGFyYW1TcGVjIGZyb20gR1R5cGUgXCIke3R5cGV9XCJgKVxuICAgICAgICBjYXNlIEdPYmplY3QuVFlQRV9PQkpFQ1Q6XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gUGFyYW1TcGVjLm9iamVjdChuYW1lLCBcIlwiLCBcIlwiLCBmbGFncyBhcyBhbnksIHR5cGUpXG4gICAgfVxufVxuXG5mdW5jdGlvbiBwc3BlYyhuYW1lOiBzdHJpbmcsIGZsYWdzOiBQYXJhbUZsYWdzLCBkZWNsYXJhdGlvbjogUHJvcGVydHlUeXBlRGVjbGFyYXRpb248dW5rbm93bj4pIHtcbiAgICBpZiAoZGVjbGFyYXRpb24gaW5zdGFuY2VvZiBQYXJhbVNwZWMpIHJldHVybiBkZWNsYXJhdGlvblxuXG4gICAgaWYgKGRlY2xhcmF0aW9uID09PSBPYmplY3QgfHwgZGVjbGFyYXRpb24gPT09IEZ1bmN0aW9uIHx8IGRlY2xhcmF0aW9uID09PSBBcnJheSkge1xuICAgICAgICByZXR1cm4gUGFyYW1TcGVjLmpzb2JqZWN0KG5hbWUsIFwiXCIsIFwiXCIsIGZsYWdzKVxuICAgIH1cblxuICAgIGlmIChkZWNsYXJhdGlvbiA9PT0gU3RyaW5nKSB7XG4gICAgICAgIHJldHVybiBQYXJhbVNwZWMuc3RyaW5nKG5hbWUsIFwiXCIsIFwiXCIsIGZsYWdzLCBcIlwiKVxuICAgIH1cblxuICAgIGlmIChkZWNsYXJhdGlvbiA9PT0gTnVtYmVyKSB7XG4gICAgICAgIHJldHVybiBQYXJhbVNwZWMuZG91YmxlKG5hbWUsIFwiXCIsIFwiXCIsIGZsYWdzLCAtTnVtYmVyLk1BWF9WQUxVRSwgTnVtYmVyLk1BWF9WQUxVRSwgMClcbiAgICB9XG5cbiAgICBpZiAoZGVjbGFyYXRpb24gPT09IEJvb2xlYW4pIHtcbiAgICAgICAgcmV0dXJuIFBhcmFtU3BlYy5ib29sZWFuKG5hbWUsIFwiXCIsIFwiXCIsIGZsYWdzLCBmYWxzZSlcbiAgICB9XG5cbiAgICBpZiAoXCIkZ3R5cGVcIiBpbiBkZWNsYXJhdGlvbikge1xuICAgICAgICByZXR1cm4gcHNwZWNGcm9tR1R5cGUoZGVjbGFyYXRpb24uJGd0eXBlLCBuYW1lLCBmbGFncylcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGRlY2xhcmF0aW9uID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgcmV0dXJuIGRlY2xhcmF0aW9uKG5hbWUsIGZsYWdzKVxuICAgIH1cblxuICAgIHRocm93IEVycm9yKFwiaW52YWxpZCBQcm9wZXJ0eVR5cGVEZWNsYXJhdGlvblwiKVxufVxuXG50eXBlIE1ldGFJbmZvID0gR09iamVjdC5NZXRhSW5mbzxuZXZlciwgQXJyYXk8eyAkZ3R5cGU6IEdUeXBlPHVua25vd24+IH0+LCBuZXZlcj5cblxuLyoqXG4gKiBSZXBsYWNlbWVudCBmb3Ige0BsaW5rIEdPYmplY3QucmVnaXN0ZXJDbGFzc31cbiAqIFRoaXMgZGVjb3JhdG9yIGNvbnN1bWVzIG1ldGFkYXRhIG5lZWRlZCB0byByZWdpc3RlciB0eXBlcyB3aGVyZSB0aGUgcHJvdmlkZWQgZGVjb3JhdG9ycyBhcmUgdXNlZDpcbiAqIC0ge0BsaW5rIHNpZ25hbH1cbiAqIC0ge0BsaW5rIHByb3BlcnR5fVxuICogLSB7QGxpbmsgZ2V0dGVyfVxuICogLSB7QGxpbmsgc2V0dGVyfVxuICpcbiAqIEV4YW1wbGU6XG4gKiBgYGB0c1xuICogXFxAcmVnaXN0ZXIoeyBHVHlwZU5hbWU6IFwiTXlDbGFzc1wiIH0pXG4gKiBjbGFzcyBNeUNsYXNzIGV4dGVuZHMgR09iamVjdC5PYmplY3QgeyB9XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlZ2lzdGVyPENscyBleHRlbmRzIHsgbmV3ICguLi5hcmdzOiBhbnkpOiBHT2JqIH0+KG9wdGlvbnM6IE1ldGFJbmZvID0ge30pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGNsczogQ2xzLCBjdHg6IENsYXNzRGVjb3JhdG9yQ29udGV4dDxDbHM+KSB7XG4gICAgICAgIGNvbnN0IHQgPSBvcHRpb25zLlRlbXBsYXRlXG5cbiAgICAgICAgaWYgKHR5cGVvZiB0ID09PSBcInN0cmluZ1wiICYmICF0LnN0YXJ0c1dpdGgoXCJyZXNvdXJjZTovL1wiKSAmJiAhdC5zdGFydHNXaXRoKFwiZmlsZTovL1wiKSkge1xuICAgICAgICAgICAgb3B0aW9ucy5UZW1wbGF0ZSA9IG5ldyBUZXh0RW5jb2RlcigpLmVuY29kZSh0KVxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgbWV0YSA9IGN0eC5tZXRhZGF0YSEgYXMgTWV0YVxuXG4gICAgICAgIGNvbnN0IHByb3BzOiBSZWNvcmQ8c3RyaW5nLCBQYXJhbVNwZWM8dW5rbm93bj4+ID0gZnJvbUVudHJpZXMoXG4gICAgICAgICAgICBlbnRyaWVzKG1ldGEucHJvcGVydGllcyA/PyB7fSkubWFwKChbZmllbGROYW1lLCB7IGZsYWdzLCB0eXBlIH1dKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3Qga2V5ID0ga2ViYWJpZnkoZmllbGROYW1lKVxuICAgICAgICAgICAgICAgIGNvbnN0IHNwZWMgPSBwc3BlYyhrZXksIGZsYWdzLCB0eXBlKVxuICAgICAgICAgICAgICAgIHJldHVybiBba2V5LCBzcGVjXVxuICAgICAgICAgICAgfSksXG4gICAgICAgIClcblxuICAgICAgICBjb25zdCBzaWduYWxzID0gZnJvbUVudHJpZXMoXG4gICAgICAgICAgICBlbnRyaWVzKG1ldGEuc2lnbmFscyA/PyB7fSkubWFwKChbc2lnbmFsTmFtZSwgeyBkZWZhdWx0OiBkZWYsIG1ldGhvZCwgLi4uc2lnbmFsIH1dKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGRlZikge1xuICAgICAgICAgICAgICAgICAgICBkZWZpbmVQcm9wZXJ0eShjbHMucHJvdG90eXBlLCBgb25fJHtzaWduYWxOYW1lLnJlcGxhY2VBbGwoXCItXCIsIFwiX1wiKX1gLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogbWV0aG9kLFxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gW3NpZ25hbE5hbWUsIHNpZ25hbF1cbiAgICAgICAgICAgIH0pLFxuICAgICAgICApXG5cbiAgICAgICAgZGVsZXRlIG1ldGEucHJvcGVydGllc1xuICAgICAgICBkZWxldGUgbWV0YS5zaWduYWxzXG5cbiAgICAgICAgcmVnaXN0ZXJDbGFzcyh7IC4uLm9wdGlvbnMsIFByb3BlcnRpZXM6IHByb3BzLCBTaWduYWxzOiBzaWduYWxzIH0sIGNscylcbiAgICB9XG59XG5cbi8qKlxuICogQGV4cGVyaW1lbnRhbFxuICogQXNzZXJ0cyBhIGd0eXBlIGluIGNhc2VzIHdoZXJlIHRoZSB0eXBlIGlzIHRvbyBsb29zZS9zdHJpY3QuXG4gKlxuICogRXhhbXBsZTpcbiAqIGBgYHRzXG4gKiB0eXBlIFR1cGxlID0gW251bWJlciwgbnVtYmVyXVxuICogY29uc3QgVHVwbGUgPSBndHlwZTxUdXBsZT4oQXJyYXkpXG4gKlxuICogY2xhc3Mge1xuICogICBcXEBwcm9wZXJ0eShUdXBsZSkgdmFsdWUgPSBbMSwgMl0gYXMgVHVwbGVcbiAqIH1cbiAqIGBgYFxuICovXG5leHBvcnQgZnVuY3Rpb24gZ3R5cGU8QXNzZXJ0Pih0eXBlOiBHVHlwZTxhbnk+IHwgeyAkZ3R5cGU6IEdUeXBlPGFueT4gfSk6IHtcbiAgICAkZ3R5cGU6IEdUeXBlPEFzc2VydD5cbn0ge1xuICAgIHJldHVybiBcIiRndHlwZVwiIGluIHR5cGUgPyB0eXBlIDogeyAkZ3R5cGU6IHR5cGUgfVxufVxuXG5kZWNsYXJlIGdsb2JhbCB7XG4gICAgaW50ZXJmYWNlIEZ1bmN0aW9uQ29uc3RydWN0b3Ige1xuICAgICAgICAkZ3R5cGU6IEdUeXBlPCguLi5hcmdzOiBhbnlbXSkgPT4gYW55PlxuICAgIH1cblxuICAgIGludGVyZmFjZSBBcnJheUNvbnN0cnVjdG9yIHtcbiAgICAgICAgJGd0eXBlOiBHVHlwZTxhbnlbXT5cbiAgICB9XG59XG5cbkZ1bmN0aW9uLiRndHlwZSA9IE9iamVjdC4kZ3R5cGUgYXMgRnVuY3Rpb25Db25zdHJ1Y3RvcltcIiRndHlwZVwiXVxuQXJyYXkuJGd0eXBlID0gT2JqZWN0LiRndHlwZSBhcyBBcnJheUNvbnN0cnVjdG9yW1wiJGd0eXBlXCJdXG4iLCAiaW1wb3J0IEFwcExhdW5jaGVyLCB7IHR5cGUgTGF1bmNoZXJNb2RlIH0gZnJvbSBcIkAvbGF1bmNoZXIvTGF1bmNoZXJcIjtcbmltcG9ydCBOb3RpZmljYXRpb25DZW50ZXIgZnJvbSBcIkAvbm90aWZpY2F0aW9ucy9Ob3RpZmljYXRpb25DZW50ZXJcIjtcbmltcG9ydCBOb3RpZmljYXRpb25Qb3B1cHMgZnJvbSBcIkAvbm90aWZpY2F0aW9ucy9Ob3RpZmljYXRpb25Qb3B1cFwiO1xuaW1wb3J0IHsgY3JlYXRlQmluZGluZywgY3JlYXRlQ29tcHV0ZWQsIGNyZWF0ZVN0YXRlLCBGb3IsIG9uQ2xlYW51cCB9IGZyb20gXCJhZ3NcIjtcbmltcG9ydCBTZXNzaW9uTWVudSBmcm9tIFwiQC9zZXNzaW9uTWVudS9TZXNzaW9uTWVudVwiO1xuaW1wb3J0IEdPYmplY3QsIHsgcmVnaXN0ZXIgfSBmcm9tIFwiYWdzL2dvYmplY3RcIjtcbmltcG9ydCBOb3RpZmQgZnJvbSBcImdpOi8vQXN0YWxOb3RpZmRcIjtcbmltcG9ydCBzdHlsZSBmcm9tIFwiLi9zdHlsZS5zY3NzXCI7XG5pbXBvcnQgeyBHdGsgfSBmcm9tIFwiYWdzL2d0azRcIjtcbmltcG9ydCBhcHAgZnJvbSBcImFncy9ndGs0L2FwcFwiO1xuaW1wb3J0IEdMaWIgZnJvbSBcImdpOi8vR0xpYlwiO1xuaW1wb3J0IE9TRCBmcm9tIFwiLi9vc2QvT1NEXCI7XG5pbXBvcnQgQmFyIGZyb20gXCJAL2Jhci9CYXJcIjtcblxuQHJlZ2lzdGVyKHsgSW1wbGVtZW50czogW0d0ay5CdWlsZGFibGVdIH0pXG5jbGFzcyBXaW5kb3dUcmFja2VyIGV4dGVuZHMgR09iamVjdC5PYmplY3Qge1xuXHR2ZnVuY19hZGRfY2hpbGQoXzogR3RrLkJ1aWxkZXIsIGNoaWxkOiBHdGsuV2luZG93KTogdm9pZCB7XG5cdFx0b25DbGVhbnVwKCgpID0+IGNoaWxkLmRlc3Ryb3koKSk7XG5cdH1cbn1cblxuZXhwb3J0IGNvbnN0IFtpc05vdGlmaWNhdGlvbkNlbnRlclZpc2libGUsIHNldElzTm90aWZpY2F0aW9uQ2VudGVyVmlzaWJsZV0gPVxuXHRjcmVhdGVTdGF0ZShmYWxzZSk7XG5cbmV4cG9ydCBjb25zdCBbaXNTZXNzaW9uTWVudVZpc2libGUsIHNldElzU2Vzc2lvbk1lbnVWaXNpYmxlXSA9XG5cdGNyZWF0ZVN0YXRlKGZhbHNlKTtcblxuZXhwb3J0IGNvbnN0IFthcHBMYXVuY2hlck1vZGUsIHNldEFwcExhdW5jaGVyTW9kZV0gPVxuXHRjcmVhdGVTdGF0ZTxMYXVuY2hlck1vZGU+KFwiY2xvc2VkXCIpO1xuXG5jb25zdCBpc05vdGlmaWNhdGlvblBvcHVwSGlkZGVuID0gY3JlYXRlQ29tcHV0ZWQoW2lzTm90aWZpY2F0aW9uQ2VudGVyVmlzaWJsZSwgaXNTZXNzaW9uTWVudVZpc2libGVdLCB0cmFuc2Zvcm1Jc05vdGlmaWNhdGlvblBvcHVwSGlkZGVuKVxuXG5jb25zdCBub3RpZmQgPSBOb3RpZmQuZ2V0X2RlZmF1bHQoKTtcblxuaXNOb3RpZmljYXRpb25DZW50ZXJWaXNpYmxlLnN1YnNjcmliZSgoKSA9PiB7XG5cdGlmIChpc05vdGlmaWNhdGlvbkNlbnRlclZpc2libGUuZ2V0KCkpIHtcblx0XHRpZiAoaXNTZXNzaW9uTWVudVZpc2libGUuZ2V0KCkpXG5cdFx0XHRyZXR1cm4gc2V0SXNOb3RpZmljYXRpb25DZW50ZXJWaXNpYmxlKGZhbHNlKTtcblxuXHRcdHNldEFwcExhdW5jaGVyTW9kZShcImNsb3NlZFwiKTtcblx0fVxufSk7XG5cbmlzU2Vzc2lvbk1lbnVWaXNpYmxlLnN1YnNjcmliZSgoKSA9PiB7XG5cdGlmIChpc1Nlc3Npb25NZW51VmlzaWJsZS5nZXQoKSkge1xuXHRcdHNldElzTm90aWZpY2F0aW9uQ2VudGVyVmlzaWJsZShmYWxzZSk7XG5cdFx0c2V0QXBwTGF1bmNoZXJNb2RlKFwiY2xvc2VkXCIpO1xuXHR9XG59KTtcblxuYXBwTGF1bmNoZXJNb2RlLnN1YnNjcmliZSgoKSA9PiB7XG5cdGlmIChhcHBMYXVuY2hlck1vZGUuZ2V0KCkgIT09IFwiY2xvc2VkXCIpIHtcblx0XHRpZiAoaXNTZXNzaW9uTWVudVZpc2libGUuZ2V0KCkpIHJldHVybiBzZXRBcHBMYXVuY2hlck1vZGUoXCJjbG9zZWRcIik7XG5cblx0XHRzZXRJc05vdGlmaWNhdGlvbkNlbnRlclZpc2libGUoZmFsc2UpO1xuXHR9XG59KTtcblxuZnVuY3Rpb24gdHJhbnNmb3JtSXNOb3RpZmljYXRpb25Qb3B1cEhpZGRlbihpc05vdGlmaWNhdGlvbkNlbnRlclZpc2libGU6IGJvb2xlYW4sIGlzU2Vzc2lvbk1lbnVWaXNpYmxlOiBib29sZWFuKSB7XG5cdHJldHVybiBpc05vdGlmaWNhdGlvbkNlbnRlclZpc2libGUgfHwgaXNTZXNzaW9uTWVudVZpc2libGU7XG59XG5cbmNvbnN0IGluc3RhbmNlTmFtZSA9IFNSQy5pbmNsdWRlcyhcImRlc2t0b3Atc2hlbGxcIilcblx0PyBcImRlc2t0b3Atc2hlbGwtZGV2XCJcblx0OiBcImRlc2t0b3Atc2hlbGxcIjtcblxuYXBwLnN0YXJ0KHtcblx0Y3NzOiBzdHlsZSxcblx0Z3RrVGhlbWU6IFwiQWR3YWl0YS1kYXJrXCIsXG5cdGluc3RhbmNlTmFtZSxcblx0aWNvbnM6IGAke1NSQ30vaWNvbnNgLFxuXG5cdG1haW4oKSB7XG5cdFx0Y29uc3QgbW9uaXRvcnMgPSBjcmVhdGVCaW5kaW5nKGFwcCwgXCJtb25pdG9yc1wiKTtcblxuXHRcdHJldHVybiAoXG5cdFx0XHQ8Rm9yIGVhY2g9e21vbml0b3JzfT5cblx0XHRcdFx0eyhtb25pdG9yKSA9PiAoXG5cdFx0XHRcdFx0PFdpbmRvd1RyYWNrZXI+XG5cdFx0XHRcdFx0XHQ8QmFyIGdka21vbml0b3I9e21vbml0b3J9IC8+XG5cblx0XHRcdFx0XHRcdDxOb3RpZmljYXRpb25Qb3B1cHNcblx0XHRcdFx0XHRcdFx0Z2RrbW9uaXRvcj17bW9uaXRvcn1cblx0XHRcdFx0XHRcdFx0aGlkZGVuPXtpc05vdGlmaWNhdGlvblBvcHVwSGlkZGVufVxuXHRcdFx0XHRcdFx0Lz5cblxuXHRcdFx0XHRcdFx0PE5vdGlmaWNhdGlvbkNlbnRlclxuXHRcdFx0XHRcdFx0XHRnZGttb25pdG9yPXttb25pdG9yfVxuXHRcdFx0XHRcdFx0XHR2aXNpYmxlPXtpc05vdGlmaWNhdGlvbkNlbnRlclZpc2libGV9XG5cdFx0XHRcdFx0XHRcdHNldFZpc2libGU9e3NldElzTm90aWZpY2F0aW9uQ2VudGVyVmlzaWJsZX1cblx0XHRcdFx0XHRcdC8+XG5cblx0XHRcdFx0XHRcdDxBcHBMYXVuY2hlclxuXHRcdFx0XHRcdFx0XHRnZGttb25pdG9yPXttb25pdG9yfVxuXHRcdFx0XHRcdFx0XHRtb2RlPXthcHBMYXVuY2hlck1vZGV9XG5cdFx0XHRcdFx0XHRcdHNldE1vZGU9e3NldEFwcExhdW5jaGVyTW9kZX1cblx0XHRcdFx0XHRcdC8+XG5cblx0XHRcdFx0XHRcdDxPU0Rcblx0XHRcdFx0XHRcdFx0Z2RrbW9uaXRvcj17bW9uaXRvcn1cblx0XHRcdFx0XHRcdFx0aGlkZGVuPXtpc1Nlc3Npb25NZW51VmlzaWJsZX1cblx0XHRcdFx0XHRcdC8+XG5cblx0XHRcdFx0XHRcdDxTZXNzaW9uTWVudVxuXHRcdFx0XHRcdFx0XHRnZGttb25pdG9yPXttb25pdG9yfVxuXHRcdFx0XHRcdFx0XHR2aXNpYmxlPXtpc1Nlc3Npb25NZW51VmlzaWJsZX1cblx0XHRcdFx0XHRcdFx0c2V0VmlzaWJsZT17c2V0SXNTZXNzaW9uTWVudVZpc2libGV9XG5cdFx0XHRcdFx0XHQvPlxuXHRcdFx0XHRcdDwvV2luZG93VHJhY2tlcj5cblx0XHRcdFx0KX1cblx0XHRcdDwvRm9yPlxuXHRcdCk7XG5cdH0sXG5cblx0cmVxdWVzdEhhbmRsZXIocmVxdWVzdCwgcmVzKSB7XG5cdFx0Y29uc3QgWywgYXJndl0gPSBHTGliLnNoZWxsX3BhcnNlX2FyZ3YocmVxdWVzdCk7XG5cblx0XHRpZiAoIWFyZ3YpIHJldHVybiByZXMoXCJhcmd2IHBhcnNlIGVycm9yXCIpO1xuXG5cdFx0c3dpdGNoIChhcmd2WzBdKSB7XG5cdFx0XHRjYXNlIFwiY2xlYXItbm90aWZcIjoge1xuXHRcdFx0XHRub3RpZmQuZ2V0X25vdGlmaWNhdGlvbnMoKS5mb3JFYWNoKChub3RpZikgPT4gbm90aWYuZGlzbWlzcygpKTtcblxuXHRcdFx0XHRyZXR1cm4gcmVzKFwib2tcIik7XG5cdFx0XHR9XG5cblx0XHRcdGNhc2UgXCJ0b2dnbGUtbm90aWZcIjoge1xuXHRcdFx0XHRpZiAoaXNTZXNzaW9uTWVudVZpc2libGUuZ2V0KCkpXG5cdFx0XHRcdFx0cmV0dXJuIHJlcyhcInNlc3Npb24gbWVudSBpcyBjdXJyZW50bHkgb3BlblwiKTtcblxuXHRcdFx0XHRzZXRJc05vdGlmaWNhdGlvbkNlbnRlclZpc2libGUoKHByZXYpID0+ICFwcmV2KTtcblx0XHRcdFx0c2V0QXBwTGF1bmNoZXJNb2RlKFwiY2xvc2VkXCIpO1xuXG5cdFx0XHRcdHJldHVybiByZXMoXCJva1wiKTtcblx0XHRcdH1cblxuXHRcdFx0Y2FzZSBcInRvZ2dsZS1zZXNzaW9uLW1lbnVcIjoge1xuXHRcdFx0XHRzZXRJc1Nlc3Npb25NZW51VmlzaWJsZSgocHJldikgPT4gIXByZXYpO1xuXHRcdFx0XHRzZXRJc05vdGlmaWNhdGlvbkNlbnRlclZpc2libGUoZmFsc2UpO1xuXHRcdFx0XHRzZXRBcHBMYXVuY2hlck1vZGUoXCJjbG9zZWRcIik7XG5cblx0XHRcdFx0cmV0dXJuIHJlcyhcIm9rXCIpO1xuXHRcdFx0fVxuXG5cdFx0XHRjYXNlIFwidG9nZ2xlLWxhdW5jaGVyLWFwcFwiOiB7XG5cdFx0XHRcdGlmIChpc1Nlc3Npb25NZW51VmlzaWJsZS5nZXQoKSlcblx0XHRcdFx0XHRyZXR1cm4gcmVzKFwic2Vzc2lvbiBtZW51IGlzIGN1cnJlbnRseSBvcGVuXCIpO1xuXG5cdFx0XHRcdHNldEFwcExhdW5jaGVyTW9kZShcImFwcFwiKTtcblx0XHRcdFx0c2V0SXNOb3RpZmljYXRpb25DZW50ZXJWaXNpYmxlKGZhbHNlKTtcblxuXHRcdFx0XHRyZXR1cm4gcmVzKFwib2tcIik7XG5cdFx0XHR9XG5cblx0XHRcdGNhc2UgXCJ0b2dnbGUtbGF1bmNoZXItY2FsY3VsYXRvclwiOiB7XG5cdFx0XHRcdGlmIChpc1Nlc3Npb25NZW51VmlzaWJsZS5nZXQoKSlcblx0XHRcdFx0XHRyZXR1cm4gcmVzKFwic2Vzc2lvbiBtZW51IGlzIGN1cnJlbnRseSBvcGVuXCIpO1xuXG5cdFx0XHRcdHNldEFwcExhdW5jaGVyTW9kZShcImNhbGN1bGF0b3JcIik7XG5cdFx0XHRcdHNldElzTm90aWZpY2F0aW9uQ2VudGVyVmlzaWJsZShmYWxzZSk7XG5cblx0XHRcdFx0cmV0dXJuIHJlcyhcIm9rXCIpO1xuXHRcdFx0fVxuXG5cdFx0XHQvKiBcblx0XHRcdFx0RElTQUJMRUQgYmVjYXVzZSBleGVjKFwiY2xpcGhpc3QgbGlzdFwiKSBzZWVtcyB0byBlcnJvciBiZWNhdXNlIGl0IHJldHVybnNcblx0XHRcdFx0cmF3IGJpbmFyeSBpbWFnZSBkYXRhIGluc3RlYWQgb2YgW1sgYmluYXJ5IGRhdGEgLi4gXV0gbGlrZSBpdCB3b3VsZCBpbiBhIFRUWVxuXHRcdFx0Ki9cblxuXHRcdFx0Ly8gY2FzZSBcInRvZ2dsZS1sYXVuY2hlci1jbGlwYm9hcmRcIjoge1xuXHRcdFx0Ly8gXHRzZXRBcHBMYXVuY2hlck1vZGUoXCJjbGlwYm9hcmRcIik7XG5cdFx0XHQvLyBcdHNldElzTm90aWZpY2F0aW9uQ2VudGVyVmlzaWJsZShmYWxzZSk7XG5cblx0XHRcdC8vIFx0cmV0dXJuIHJlcyhcIm9rXCIpO1xuXHRcdFx0Ly8gfVxuXG5cdFx0XHRkZWZhdWx0OiB7XG5cdFx0XHRcdHJldHVybiByZXMoXCJ1bmtub3duIGNvbW1hbmRcIik7XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxufSk7XG4iLCAiKiB7XG4gIGZvbnQtZmFtaWx5OiBMZXhlbmQsIEZpcmFDb2RlTmVyZEZvbnQsIE1hcGxlTW9ubywgSmV0QnJhaW5zTW9ubyBORk0sIEZvbnQgQXdlc29tZSwgc2Fucy1zZXJpZjtcbiAgZm9udC1zaXplOiAxNHB4O1xuICBjb2xvcjogI2NhZDNmNTtcbn1cblxudG9vbHRpcCB7XG4gIGJhY2tncm91bmQ6ICMxZTIwMzA7XG4gIGJvcmRlci1yYWRpdXM6IDE1cHg7XG59XG5cbnRvb2x0aXAgbGFiZWwge1xuICBjb2xvcjogI2NhZDNmNTtcbn1cblxuYnV0dG9uIHtcbiAgYm9yZGVyLXJhZGl1czogOHB4O1xuICBiYWNrZ3JvdW5kLWltYWdlOiB1bnNldDtcbiAgYmFja2dyb3VuZC1jb2xvcjogIzFlMjAzMDtcbiAgb3V0bGluZS1jb2xvcjogIzQ5NGQ2NDtcbiAgdHJhbnNpdGlvbjogYmFja2dyb3VuZC1jb2xvciAwLjNzIGVhc2UtaW4tb3V0O1xufVxuXG5idXR0b246aG92ZXIge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiBhbHBoYSgjMWUyMDMwLDAuNik7XG59XG5cbmNoZWNrIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogIzM2M2E0ZjtcbiAgYmFja2dyb3VuZC1pbWFnZTogdW5zZXQ7XG4gIGJvcmRlci1yYWRpdXM6IDZweDtcbiAgbWFyZ2luLXJpZ2h0OiA2cHg7XG4gIGJvcmRlci1jb2xvcjogIzFlMjAzMDtcbn1cblxuY2hlY2s6aG92ZXIge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiBhbHBoYSgjMzYzYTRmLDAuNik7XG59XG5cbmNoZWNrOmNoZWNrZWQge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjNWI2MDc4O1xuICBjb2xvcjogI2NhZDNmNTtcbn1cblxuY2hlY2s6Y2hlY2tlZDpob3ZlciB7XG4gIGJhY2tncm91bmQtY29sb3I6IGFscGhhKCM1YjYwNzgsMC42KTtcbn1cblxucG9wb3ZlciB7XG4gIG9wYWNpdHk6IDA7XG4gIHRyYW5zaXRpb24tcHJvcGVydHk6IG9wYWNpdHk7XG4gIHRyYW5zaXRpb24tZHVyYXRpb246IDAuM3M7XG4gIHRyYW5zaXRpb24tdGltaW5nLWZ1bmN0aW9uOiBlYXNlLWluLW91dDtcbn1cbnBvcG92ZXIgYXJyb3csXG5wb3BvdmVyIGNvbnRlbnRzIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogIzFlMjAzMDtcbn1cbnBvcG92ZXIgYnV0dG9uIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogIzI0MjczYTtcbn1cbnBvcG92ZXIgYnV0dG9uOmhvdmVyIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogYWxwaGEoIzI0MjczYSwwLjYpO1xufVxucG9wb3Zlci5vcGVuIHtcbiAgb3BhY2l0eTogMTtcbn1cblxuc2Nyb2xsZWR3aW5kb3cgc2Nyb2xsYmFyIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogYWxwaGEoIzAwMDAwMCwwLjIpO1xuICBib3JkZXItcmFkaXVzOiAyMHB4O1xufVxuc2Nyb2xsZWR3aW5kb3cgc2Nyb2xsYmFyIHRyb3VnaCB7XG4gIG1hcmdpbjogMXB4O1xuICBiYWNrZ3JvdW5kLWNvbG9yOiBhbHBoYSgjMzYzYTRmLDAuMSk7XG59XG5zY3JvbGxlZHdpbmRvdyBzY3JvbGxiYXIgdHJvdWdoIHNsaWRlciB7XG4gIGJhY2tncm91bmQtY29sb3I6IGFscGhhKCM4MDg3YTIsMC42KTtcbn1cbnNjcm9sbGVkd2luZG93IHNjcm9sbGJhciB0cm91Z2g6aG92ZXIge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiBhbHBoYSgjMzYzYTRmLDAuMik7XG59XG5zY3JvbGxlZHdpbmRvdyBzY3JvbGxiYXIgdHJvdWdoOmhvdmVyIHNsaWRlciB7XG4gIGJhY2tncm91bmQtY29sb3I6IGFscGhhKCM4MDg3YTIsMC4zKTtcbn1cbnNjcm9sbGVkd2luZG93IHNjcm9sbGJhciB0cm91Z2g6aG92ZXIgc2xpZGVyOmhvdmVyIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogYWxwaGEoIzgwODdhMiwwLjQpO1xufVxuc2Nyb2xsZWR3aW5kb3cgc2Nyb2xsYmFyIHRyb3VnaDpob3ZlciBzbGlkZXI6YWN0aXZlIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogIzM2M2E0Zjtcbn1cblxuLm5vdGlmaWNhdGlvbiB7XG4gIGJvcmRlci1yYWRpdXM6IDEzcHg7XG4gIGJhY2tncm91bmQtY29sb3I6ICMyNDI3M2E7XG4gIG1hcmdpbjogMC41cmVtIDFyZW0gMC41cmVtIDFyZW07XG4gIGJveC1zaGFkb3c6IDJweCAzcHggOHB4IDAgYWxwaGEoYmxhY2ssMC40KTtcbiAgYm9yZGVyOiAxcHQgc29saWQgYWxwaGEoIzI0MjczYSwwLjAzKTtcbn1cbi5ub3RpZmljYXRpb24uY2VudGVyIHtcbiAgbWFyZ2luLWxlZnQ6IDA7XG4gIG1hcmdpbi1yaWdodDogMDtcbn1cbi5ub3RpZmljYXRpb24uY3JpdGljYWwge1xuICBib3JkZXI6IDFwdCBzb2xpZCBhbHBoYSgjZWQ4Nzk2LDAuNCk7XG59XG4ubm90aWZpY2F0aW9uLmNyaXRpY2FsIC5oZWFkZXIgLmFwcC1uYW1lIHtcbiAgY29sb3I6IGFscGhhKCNlZDg3OTYsMC44KTtcbn1cbi5ub3RpZmljYXRpb24uY3JpdGljYWwgLmhlYWRlciAuYXBwLWljb24ge1xuICBjb2xvcjogYWxwaGEoI2VkODc5NiwwLjYpO1xufVxuLm5vdGlmaWNhdGlvbiAuaGVhZGVyIHtcbiAgcGFkZGluZzogMC41cmVtO1xuICBjb2xvcjogYWxwaGEoI2E1YWRjYiwwLjUpO1xufVxuLm5vdGlmaWNhdGlvbiAuaGVhZGVyIC5hcHAtaWNvbiB7XG4gIG1hcmdpbjogMCAwLjRyZW07XG59XG4ubm90aWZpY2F0aW9uIC5oZWFkZXIgLmFwcC1uYW1lIHtcbiAgbWFyZ2luLXJpZ2h0OiAwLjNyZW07XG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xufVxuLm5vdGlmaWNhdGlvbiAuaGVhZGVyIC5hcHAtbmFtZTpmaXJzdC1jaGlsZCB7XG4gIG1hcmdpbi1sZWZ0OiAwLjRyZW07XG59XG4ubm90aWZpY2F0aW9uIC5oZWFkZXIgLnRpbWUge1xuICBtYXJnaW46IDAgMC40cmVtO1xufVxuLm5vdGlmaWNhdGlvbiBzZXBhcmF0b3Ige1xuICBtYXJnaW46IDAgMC40cmVtO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiBhbHBoYSgjNmU3MzhkLDAuMSk7XG59XG4ubm90aWZpY2F0aW9uIC5jb250ZW50IHtcbiAgbWFyZ2luOiAxcmVtO1xuICBtYXJnaW4tdG9wOiAwLjVyZW07XG59XG4ubm90aWZpY2F0aW9uIC5jb250ZW50IC5zdW1tYXJ5IHtcbiAgZm9udC1zaXplOiAxLjJlbTtcbiAgY29sb3I6ICNjYWQzZjU7XG59XG4ubm90aWZpY2F0aW9uIC5jb250ZW50IC5ib2R5IHtcbiAgY29sb3I6IGFscGhhKCNjYWQzZjUsMC44KTtcbn1cbi5ub3RpZmljYXRpb24gLmNvbnRlbnQgLmltYWdlIHtcbiAgYm9yZGVyOiAxcHggc29saWQgYWxwaGEoIzZlNzM4ZCwwLjAyKTtcbiAgbWFyZ2luLXJpZ2h0OiAwLjVyZW07XG4gIGJvcmRlci1yYWRpdXM6IDlweDtcbiAgbWluLXdpZHRoOiAxMDBweDtcbiAgbWluLWhlaWdodDogMTAwcHg7XG4gIGJhY2tncm91bmQtc2l6ZTogY292ZXI7XG4gIGJhY2tncm91bmQtcG9zaXRpb246IGNlbnRlcjtcbn1cbi5ub3RpZmljYXRpb24gLmFjdGlvbnMge1xuICBtYXJnaW46IDFyZW07XG4gIG1hcmdpbi10b3A6IDA7XG59XG4ubm90aWZpY2F0aW9uIC5hY3Rpb25zIGJ1dHRvbiB7XG4gIG1hcmdpbjogMCAwLjNyZW07XG59XG4ubm90aWZpY2F0aW9uIC5hY3Rpb25zIGJ1dHRvbjpmaXJzdC1jaGlsZCB7XG4gIG1hcmdpbi1sZWZ0OiAwO1xufVxuLm5vdGlmaWNhdGlvbiAuYWN0aW9ucyBidXR0b246bGFzdC1jaGlsZCB7XG4gIG1hcmdpbi1yaWdodDogMDtcbn1cbi5ub3RpZmljYXRpb24gLnByb2dyZXNzLWJhciBwcm9ncmVzcyB7XG4gIGJvcmRlci1jb2xvcjogIzZlNzM4ZDtcbiAgYmFja2dyb3VuZC1jb2xvcjogIzZlNzM4ZDtcbn1cbi5ub3RpZmljYXRpb24gLnByb2dyZXNzLWJhciB0cm91Z2gge1xuICBib3JkZXItY29sb3I6ICMxODE5MjY7XG4gIGJhY2tncm91bmQtY29sb3I6ICMxODE5MjY7XG59XG4ubm90aWZpY2F0aW9uIC5wcm9ncmVzcy1iYXIgcHJvZ3Jlc3MsXG4ubm90aWZpY2F0aW9uIC5wcm9ncmVzcy1iYXIgdHJvdWdoIHtcbiAgbWluLWhlaWdodDogMnB4O1xufVxuXG53aW5kb3cuYmFyIHtcbiAgYmFja2dyb3VuZDogIzI0MjczYTtcbiAgY29sb3I6ICNjYWQzZjU7XG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xufVxud2luZG93LmJhciA+IGNlbnRlcmJveCB7XG4gIGJvcmRlci1yYWRpdXM6IDEwcHg7XG59XG53aW5kb3cuYmFyIC5tb2R1bGUtZ3JvdXAge1xuICBtYXJnaW46IDZweDtcbiAgYm9yZGVyLXJhZGl1czogOHB4O1xuICBwYWRkaW5nOiA4cHg7XG4gIGJhY2tncm91bmQtY29sb3I6ICMxZTIwMzA7XG4gIG1hcmdpbi1yaWdodDogMnB4O1xufVxud2luZG93LmJhciAubW9kdWxlLWdyb3VwLmxhc3Qge1xuICBtYXJnaW4tcmlnaHQ6IDA7XG59XG53aW5kb3cuYmFyIC5tb2R1bGUtZ3JvdXAuZW5kIHtcbiAgbWFyZ2luLXJpZ2h0OiA2cHg7XG59XG53aW5kb3cuYmFyIC5tb2R1bGUtZ3JvdXAgLmNwdS1tb2R1bGUsXG53aW5kb3cuYmFyIC5tb2R1bGUtZ3JvdXAgLmRpc2stbW9kdWxlIHtcbiAgbWFyZ2luLXJpZ2h0OiAxMnB4O1xufVxud2luZG93LmJhciAubm90aWZpY2F0aW9uLW1vZHVsZSB7XG4gIG1hcmdpbi1yaWdodDogMDtcbn1cbndpbmRvdy5iYXIgLmltYWdlLWNvdmVyLWFydCB7XG4gIGJvcmRlci1yYWRpdXM6IDhweDtcbiAgbWluLXdpZHRoOiAzNXB4O1xuICBtaW4taGVpZ2h0OiAzNXB4O1xuICBiYWNrZ3JvdW5kLXNpemU6IGNvdmVyO1xuICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiBjZW50ZXI7XG59XG53aW5kb3cuYmFyIC50aW1lIC5jYWxlbmRhciB7XG4gIGJvcmRlci13aWR0aDogMDtcbn1cbndpbmRvdy5iYXIgLnRpbWUgLmNhbGVuZGFyIGhlYWRlciBidXR0b24ge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB1bnNldDtcbn1cbndpbmRvdy5iYXIgLnRpbWUgLmNhbGVuZGFyIGhlYWRlciBidXR0b246aG92ZXIge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiBhbHBoYSgjMTgxOTI2LDAuNik7XG4gIGJhY2tncm91bmQtaW1hZ2U6IHVuc2V0O1xufVxud2luZG93LmJhciAudGltZSAuY2FsZW5kYXIgZ3JpZCAuZGF5LW51bWJlciB7XG4gIGJvcmRlci1yYWRpdXM6IDIwcHg7XG4gIG91dGxpbmUtY29sb3I6ICMxODE5MjY7XG59XG53aW5kb3cuYmFyIC50aW1lIC5jYWxlbmRhciBncmlkIC5kYXktbnVtYmVyLm90aGVyLW1vbnRoIHtcbiAgY29sb3I6ICM1YjYwNzg7XG59XG53aW5kb3cuYmFyIC50aW1lIC5jYWxlbmRhciBncmlkIC5kYXktbnVtYmVyOnNlbGVjdGVkIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogIzE4MTkyNjtcbn1cbndpbmRvdy5iYXIgLnRpbWUgLmNhbGVuZGFyIGdyaWQgLmRheS1udW1iZXIudG9kYXkge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMzYzYTRmO1xufVxud2luZG93LmJhciAudGltZSAuY2FsZW5kYXIgZ3JpZCAuZGF5LW51bWJlcjpob3ZlciB7XG4gIGJhY2tncm91bmQtY29sb3I6IGFscGhhKCMxODE5MjYsMC41KTtcbiAgY29sb3I6ICNjYWQzZjU7XG59XG53aW5kb3cuYmFyIC50cmF5LXBvcG92ZXIgLnRyYXktaXRlbSAudHJheS1wb3BvdmVyLW1lbnUgbW9kZWxidXR0b24ge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB1bnNldDtcbiAgbWFyZ2luLXRvcDogM3B4O1xuICBtYXJnaW4tYm90dG9tOiAzcHg7XG59XG53aW5kb3cuYmFyIC50cmF5LXBvcG92ZXIgLnRyYXktaXRlbSAudHJheS1wb3BvdmVyLW1lbnUgbW9kZWxidXR0b246Zmlyc3QtY2hpbGQge1xuICBtYXJnaW4tdG9wOiAwO1xufVxud2luZG93LmJhciAudHJheS1wb3BvdmVyIC50cmF5LWl0ZW0gLnRyYXktcG9wb3Zlci1tZW51IG1vZGVsYnV0dG9uOmxhc3QtY2hpbGQge1xuICBtYXJnaW4tYm90dG9tOiAwO1xufVxud2luZG93LmJhciAudHJheS1wb3BvdmVyIC50cmF5LWl0ZW0gLnRyYXktcG9wb3Zlci1tZW51IG1vZGVsYnV0dG9uLnRpdGxlIHtcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gIG1hcmdpbi1ib3R0b206IDZweDtcbn1cbndpbmRvdy5iYXIgLnRyYXktcG9wb3ZlciAudHJheS1pdGVtIC50cmF5LXBvcG92ZXItbWVudSBtb2RlbGJ1dHRvbjpob3ZlciB7XG4gIGJhY2tncm91bmQtY29sb3I6IGFscGhhKCMyNDI3M2EsMC44KTtcbn1cbndpbmRvdy5iYXIgLnRyYXktcG9wb3ZlciAudHJheS1pdGVtIC50cmF5LXBvcG92ZXItbWVudSBzZXBhcmF0b3Ige1xuICBtYXJnaW4tdG9wOiA2cHg7XG4gIG1hcmdpbi1ib3R0b206IDZweDtcbiAgYmFja2dyb3VuZC1jb2xvcjogYWxwaGEoIzZlNzM4ZCwwLjUpO1xufVxud2luZG93LmJhciAuYmF0dGVyeS1pY29uLFxud2luZG93LmJhciAuY3B1LWljb24sXG53aW5kb3cuYmFyIC5kaXNrLWljb24sXG53aW5kb3cuYmFyIC5tZWRpYS1pY29uLFxud2luZG93LmJhciAubHlyaWNzLWljb24sXG53aW5kb3cuYmFyIC5taWNyb3Bob25lLWljb24sXG53aW5kb3cuYmFyIC5taWNyb3Bob25lLWJsdWV0b290aC1pY29uLFxud2luZG93LmJhciAubmV0d29yay1pY29uLFxud2luZG93LmJhciAuc3BlYWtlci1pY29uLFxud2luZG93LmJhciAuc3BlYWtlci1ibHVldG9vdGgtaWNvbixcbndpbmRvdy5iYXIgLnJhbS1pY29uLFxud2luZG93LmJhciAudGltZS1pY29uLmNsb2NrIHtcbiAgbWFyZ2luLXJpZ2h0OiA2cHg7XG59XG53aW5kb3cuYmFyIC50aW1lLWljb24uY2FsZW5kYXIge1xuICBtYXJnaW4tcmlnaHQ6IDZweDtcbiAgbWFyZ2luLWxlZnQ6IDZweDtcbn1cbndpbmRvdy5iYXIgLm5vdGlmaWNhdGlvbi1pY29uIHtcbiAgbWFyZ2luLXJpZ2h0OiAxMnB4O1xufVxud2luZG93LmJhciAubm90aWZpY2F0aW9uLWljb24gLmljb24ge1xuICBtYXJnaW4tcmlnaHQ6IC04cHg7XG59XG53aW5kb3cuYmFyIC5ub3RpZmljYXRpb24taWNvbiAudW5yZWFkIHtcbiAgY29sb3I6ICNlZDg3OTY7XG4gIG1hcmdpbi1ib3R0b206IDZweDtcbn1cbndpbmRvdy5iYXIgLm5vdGlmaWNhdGlvbi1pY29uLnVucmVhZCB7XG4gIG1hcmdpbi1yaWdodDogNnB4O1xufVxuXG53aW5kb3cubm90aWZpY2F0aW9uLXBvcHVwcyB7XG4gIGFsbDogdW5zZXQ7XG59XG5cbndpbmRvdy5ub3RpZmljYXRpb24tY2VudGVyIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogYWxwaGEoIzAwMDAwMCwwKTtcbiAgdHJhbnNpdGlvbjogYmFja2dyb3VuZC1jb2xvciAwLjVzIGVhc2UtaW4tb3V0O1xufVxud2luZG93Lm5vdGlmaWNhdGlvbi1jZW50ZXIub3BlbiB7XG4gIGJhY2tncm91bmQtY29sb3I6IGFscGhhKCMwMDAwMDAsMC4yKTtcbn1cbndpbmRvdy5ub3RpZmljYXRpb24tY2VudGVyIC5ub3RpZmljYXRpb24tY29udGFpbmVyIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogYWxwaGEoIzE4MTkyNiwwLjk1KTtcbiAgYm9yZGVyLXJhZGl1czogMTVweDtcbiAgcGFkZGluZzogMXJlbTtcbiAgbWFyZ2luOiAxcmVtO1xuICBib3gtc2hhZG93OiAycHggM3B4IDhweCAwIGFscGhhKGJsYWNrLDAuNCk7XG59XG53aW5kb3cubm90aWZpY2F0aW9uLWNlbnRlciAubm90aWZpY2F0aW9uLWNvbnRhaW5lciAuaGVhZGVyIC50aXRsZS1jb250YWluZXIgLmRpc21pc3MtYWxsIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogIzI0MjczYTtcbn1cbndpbmRvdy5ub3RpZmljYXRpb24tY2VudGVyIC5ub3RpZmljYXRpb24tY29udGFpbmVyIC5oZWFkZXIgLnRpdGxlLWNvbnRhaW5lciAuZGlzbWlzcy1hbGw6aG92ZXIge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiBhbHBoYSgjMjQyNzNhLDAuNik7XG59XG53aW5kb3cubm90aWZpY2F0aW9uLWNlbnRlciAubm90aWZpY2F0aW9uLWNvbnRhaW5lciAuaGVhZGVyIC50aXRsZS1jb250YWluZXIgLnRpdGxlIHtcbiAgZm9udC1zaXplOiAzMHB4O1xuICBmb250LXdlaWdodDogYm9sZDtcbn1cbndpbmRvdy5ub3RpZmljYXRpb24tY2VudGVyIC5ub3RpZmljYXRpb24tY29udGFpbmVyIC5oZWFkZXIgLmRuZC1jb250YWluZXIge1xuICBtYXJnaW4tdG9wOiAxMHB4O1xuICBtYXJnaW4tYm90dG9tOiAxMHB4O1xufVxud2luZG93Lm5vdGlmaWNhdGlvbi1jZW50ZXIgLm5vdGlmaWNhdGlvbi1jb250YWluZXIgLmhlYWRlciAuZG5kLWNvbnRhaW5lciAuZG5kLXRpdGxlIHtcbiAgZm9udC1zaXplOiAyMHB4O1xuICBmb250LXdlaWdodDogYm9sZDtcbn1cbndpbmRvdy5ub3RpZmljYXRpb24tY2VudGVyIC5ub3RpZmljYXRpb24tY29udGFpbmVyIC5oZWFkZXIgLmRuZC1jb250YWluZXIgLmRuZC10b2dnbGUge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMjQyNzNhO1xufVxud2luZG93Lm5vdGlmaWNhdGlvbi1jZW50ZXIgLm5vdGlmaWNhdGlvbi1jb250YWluZXIgLmhlYWRlciAuZG5kLWNvbnRhaW5lciAuZG5kLXRvZ2dsZTpjaGVja2VkIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogIzZlNzM4ZDtcbn1cbndpbmRvdy5ub3RpZmljYXRpb24tY2VudGVyIC5ub3RpZmljYXRpb24tY29udGFpbmVyIC5oZWFkZXIgLmRuZC1jb250YWluZXIgLmRuZC10b2dnbGU6Y2hlY2tlZCBzbGlkZXIge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjNDk0ZDY0O1xufVxud2luZG93Lm5vdGlmaWNhdGlvbi1jZW50ZXIgLm5vdGlmaWNhdGlvbi1jb250YWluZXIgLmhlYWRlciAuZG5kLWNvbnRhaW5lciAuZG5kLXRvZ2dsZSBzbGlkZXIge1xuICBiYWNrZ3JvdW5kLWltYWdlOiB1bnNldDtcbiAgYmFja2dyb3VuZC1jb2xvcjogIzZlNzM4ZDtcbn1cbndpbmRvdy5ub3RpZmljYXRpb24tY2VudGVyIC5ub3RpZmljYXRpb24tY29udGFpbmVyIC5oZWFkZXItc2VwYXJhdG9yIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogYWxwaGEoIzZlNzM4ZCwwLjUpO1xuICBtYXJnaW4tYm90dG9tOiA2cHg7XG59XG53aW5kb3cubm90aWZpY2F0aW9uLWNlbnRlciAubm90aWZpY2F0aW9uLWNvbnRhaW5lciAuY2F0ZWdvcnkge1xuICBtYXJnaW4tdG9wOiA2cHg7XG4gIG1hcmdpbi1ib3R0b206IDZweDtcbn1cbndpbmRvdy5ub3RpZmljYXRpb24tY2VudGVyIC5ub3RpZmljYXRpb24tY29udGFpbmVyIC5jYXRlZ29yeTpmaXJzdC1jaGlsZCB7XG4gIG1hcmdpbi10b3A6IDA7XG59XG53aW5kb3cubm90aWZpY2F0aW9uLWNlbnRlciAubm90aWZpY2F0aW9uLWNvbnRhaW5lciAuY2F0ZWdvcnk6bGFzdC1jaGlsZCB7XG4gIG1hcmdpbi1ib3R0b206IDA7XG59XG53aW5kb3cubm90aWZpY2F0aW9uLWNlbnRlciAubm90aWZpY2F0aW9uLWNvbnRhaW5lciAuY2F0ZWdvcnkgLmNhdGVnb3J5LWljb24ge1xuICBtYXJnaW4tcmlnaHQ6IDNweDtcbn1cbndpbmRvdy5ub3RpZmljYXRpb24tY2VudGVyIC5ub3RpZmljYXRpb24tY29udGFpbmVyIC5jYXRlZ29yeSAuY2F0ZWdvcnktdGl0bGUge1xuICBmb250LXNpemU6IDIycHg7XG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xufVxud2luZG93Lm5vdGlmaWNhdGlvbi1jZW50ZXIgLm5vdGlmaWNhdGlvbi1jb250YWluZXIgLmNhdGVnb3J5IC5jYXRlZ29yeS1zZXBhcmF0b3Ige1xuICBiYWNrZ3JvdW5kLWNvbG9yOiBhbHBoYSgjNmU3MzhkLDAuNSk7XG4gIG1hcmdpbi10b3A6IDZweDtcbn1cbndpbmRvdy5ub3RpZmljYXRpb24tY2VudGVyIC5ub3RpZmljYXRpb24tY29udGFpbmVyIC5jYXRlZ29yeSAuZGlzbWlzcy1jYXRlZ29yeSB7XG4gIGJhY2tncm91bmQtaW1hZ2U6IHVuc2V0O1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMjQyNzNhO1xufVxud2luZG93Lm5vdGlmaWNhdGlvbi1jZW50ZXIgLm5vdGlmaWNhdGlvbi1jb250YWluZXIgLm5vdGlmaWNhdGlvbiB7XG4gIG1hcmdpbi1ib3R0b206IDFyZW07XG59XG53aW5kb3cubm90aWZpY2F0aW9uLWNlbnRlciAubm90aWZpY2F0aW9uLWNvbnRhaW5lciAubm90aWZpY2F0aW9uOmxhc3QtY2hpbGQge1xuICBtYXJnaW4tYm90dG9tOiAwO1xufVxuXG53aW5kb3cubGF1bmNoZXIgLmxhdW5jaGVyLWNvbnRhaW5lciB7XG4gIGJhY2tncm91bmQtY29sb3I6IGFscGhhKCMxODE5MjYsMC45NSk7XG4gIGJvcmRlci1yYWRpdXM6IDE1cHg7XG4gIHBhZGRpbmc6IDFyZW07XG4gIGJveC1zaGFkb3c6IDJweCAzcHggOHB4IDAgYWxwaGEoYmxhY2ssMC40KTtcbn1cbndpbmRvdy5sYXVuY2hlciAubGF1bmNoZXItY29udGFpbmVyIC5zZWFyY2gtZW50cnkge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMWUyMDMwO1xuICBib3JkZXItcmFkaXVzOiA4cHg7XG4gIHBhZGRpbmc6IDRweCA4cHg7XG4gIGNvbG9yOiAjY2FkM2Y1O1xuICBmb250LXNpemU6IDIwcHg7XG4gIG1hcmdpbi1ib3R0b206IDEycHg7XG59XG53aW5kb3cubGF1bmNoZXIgLmxhdW5jaGVyLWNvbnRhaW5lciAuc2VhcmNoLWVudHJ5OmZvY3VzIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogYWxwaGEoIzFlMjAzMCwwLjgpO1xufVxud2luZG93LmxhdW5jaGVyIC5sYXVuY2hlci1jb250YWluZXIgLmFwcHMtY29udGFpbmVyIC5hcHAtY29udGFpbmVyIHtcbiAgcGFkZGluZzogNnB4O1xuICBtYXJnaW4tdG9wOiAzcHg7XG4gIG1hcmdpbi1ib3R0b206IDNweDtcbiAgYmFja2dyb3VuZC1jb2xvcjogIzFlMjAzMDtcbiAgYm9yZGVyLXJhZGl1czogOHB4O1xuICBib3JkZXI6IDAgc29saWQgIzM2M2E0ZjtcbiAgdHJhbnNpdGlvbjogYm9yZGVyLXdpZHRoIDAuMnMgZWFzZS1pbi1vdXQ7XG4gIHRyYW5zaXRpb246IGJhY2tncm91bmQtY29sb3IgMC4ycyBlYXNlLWluLW91dDtcbn1cbndpbmRvdy5sYXVuY2hlciAubGF1bmNoZXItY29udGFpbmVyIC5hcHBzLWNvbnRhaW5lciAuYXBwLWNvbnRhaW5lcjpob3ZlciB7XG4gIGJvcmRlci13aWR0aDogMXB4O1xuICBiYWNrZ3JvdW5kLWNvbG9yOiBhbHBoYSgjMWUyMDMwLDAuNik7XG59XG53aW5kb3cubGF1bmNoZXIgLmxhdW5jaGVyLWNvbnRhaW5lciAuYXBwcy1jb250YWluZXIgLmFwcC1jb250YWluZXIuZm9jdXMge1xuICBib3JkZXItd2lkdGg6IDNweDtcbn1cbndpbmRvdy5sYXVuY2hlciAubGF1bmNoZXItY29udGFpbmVyIC5hcHBzLWNvbnRhaW5lciAuYXBwLWNvbnRhaW5lcjpmaXJzdC1jaGlsZCB7XG4gIG1hcmdpbi10b3A6IDZweDtcbn1cbndpbmRvdy5sYXVuY2hlciAubGF1bmNoZXItY29udGFpbmVyIC5hcHBzLWNvbnRhaW5lciAuYXBwLWNvbnRhaW5lcjpsYXN0LWNoaWxkIHtcbiAgbWFyZ2luLWJvdHRvbTogMDtcbn1cbndpbmRvdy5sYXVuY2hlciAubGF1bmNoZXItY29udGFpbmVyIC5hcHBzLWNvbnRhaW5lciAuYXBwLWNvbnRhaW5lciAuYXBwLWljb24ge1xuICBtYXJnaW4tcmlnaHQ6IDEycHg7XG59XG53aW5kb3cubGF1bmNoZXIgLmxhdW5jaGVyLWNvbnRhaW5lciAuY2FsY3VsYXRvci1jb250YWluZXIgLmNhbGN1bGF0b3ItcmVzdWx0IHtcbiAgZm9udC1zaXplOiAyMHB4O1xuICBmb250LXdlaWdodDogYm9sZDtcbn1cbndpbmRvdy5sYXVuY2hlciAubGF1bmNoZXItY29udGFpbmVyIC5jYWxjdWxhdG9yLWNvbnRhaW5lciAuY2FsY3VsYXRvci1zZXBhcmF0b3Ige1xuICBtYXJnaW4tdG9wOiA2cHg7XG59XG5cbndpbmRvdy5vc2Qge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcbn1cbndpbmRvdy5vc2QgLm9zZC1jb250YWluZXIge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMjQyNzNhO1xuICBib3JkZXItcmFkaXVzOiAzMHB4O1xuICBwYWRkaW5nOiA1cHggMTBweDtcbn1cbndpbmRvdy5vc2QgLm9zZC1jb250YWluZXIgLmljb24ge1xuICBtYXJnaW4tcmlnaHQ6IDVweDtcbn1cbndpbmRvdy5vc2QgLm9zZC1jb250YWluZXIgLnByb2dyZXNzIHtcbiAgbWFyZ2luLXJpZ2h0OiA1cHg7XG59XG53aW5kb3cub3NkIC5vc2QtY29udGFpbmVyIC5wcm9ncmVzcy5vdmVyZmlsbGVkIHByb2dyZXNzIHtcbiAgYm9yZGVyLWNvbG9yOiAjZWQ4Nzk2O1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZWQ4Nzk2O1xufVxud2luZG93Lm9zZCAub3NkLWNvbnRhaW5lciAucHJvZ3Jlc3MgcHJvZ3Jlc3Mge1xuICBib3JkZXItY29sb3I6ICM2ZTczOGQ7XG4gIGJhY2tncm91bmQtY29sb3I6ICM2ZTczOGQ7XG59XG53aW5kb3cub3NkIC5vc2QtY29udGFpbmVyIC5wcm9ncmVzcyBwcm9ncmVzcyxcbndpbmRvdy5vc2QgLm9zZC1jb250YWluZXIgLnByb2dyZXNzIHRyb3VnaCB7XG4gIG1pbi1oZWlnaHQ6IDEwcHg7XG4gIGJvcmRlci1yYWRpdXM6IDMwcHg7XG59XG5cbndpbmRvdy5zZXNzaW9uLW1lbnUge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiBhbHBoYSgjMDAwMDAwLDApO1xuICB0cmFuc2l0aW9uOiBiYWNrZ3JvdW5kLWNvbG9yIDAuM3MgZWFzZS1pbi1vdXQ7XG59XG53aW5kb3cuc2Vzc2lvbi1tZW51Lm9wZW4ge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiBhbHBoYSgjMDAwMDAwLDAuNik7XG59XG53aW5kb3cuc2Vzc2lvbi1tZW51IGJ1dHRvbiB7XG4gIGJvcmRlci1yYWRpdXM6IDIwcHg7XG59XG53aW5kb3cuc2Vzc2lvbi1tZW51IGxhYmVsIHtcbiAgbWFyZ2luLXRvcDogMTBweDtcbn1cbndpbmRvdy5zZXNzaW9uLW1lbnUgdG9vbHRpcCBsYWJlbCB7XG4gIG1hcmdpbi10b3A6IDA7XG59IiwgImltcG9ydCB7IHR5cGUgQWNjZXNzb3IsIGNyZWF0ZUNvbXB1dGVkLCBjcmVhdGVTdGF0ZSB9IGZyb20gXCJhZ3NcIjtcbmltcG9ydCB7IG1vbml0b3JGaWxlLCByZWFkRmlsZUFzeW5jIH0gZnJvbSBcImFncy9maWxlXCI7XG5pbXBvcnQgeyBkZWZhdWx0Q29uZmlnIH0gZnJvbSBcIkAvY29uc3RhbnRzL2NvbmZpZ1wiO1xuaW1wb3J0IHsgdHlwZSBHZGssIEd0ayB9IGZyb20gXCJhZ3MvZ3RrNFwiO1xuaW1wb3J0IHR5cGUgQXN0YWxJTyBmcm9tIFwiZ2k6Ly9Bc3RhbElPXCI7XG5pbXBvcnQgeyBjb25maWcgfSBmcm9tIFwiQC91dGlsL2NvbmZpZ1wiO1xuaW1wb3J0IHsgc2xlZXAgfSBmcm9tIFwiQC91dGlsL3RpbWVyXCI7XG5pbXBvcnQgeyB0aW1lb3V0IH0gZnJvbSBcImFncy90aW1lXCI7XG5pbXBvcnQgZ2lDYWlybyBmcm9tIFwiZ2k6Ly9jYWlyb1wiO1xuaW1wb3J0IFdwIGZyb20gXCJnaTovL0FzdGFsV3BcIjtcbmltcG9ydCBHTGliIGZyb20gXCJnaTovL0dMaWJcIjtcblxuaW50ZXJmYWNlIFByb3BzIHtcblx0Z2RrbW9uaXRvcjogR2RrLk1vbml0b3I7XG5cdGhpZGRlbjogQWNjZXNzb3I8Ym9vbGVhbj47XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIE9TRCh7IGdka21vbml0b3IsIGhpZGRlbiB9OiBQcm9wcykge1xuXHRjb25zdCB3cCA9IFdwLmdldF9kZWZhdWx0KCk7XG5cblx0Y29uc3QgbWF4V2lkdGggPSBnZGttb25pdG9yLmdlb21ldHJ5LndpZHRoICogMC4xMjU7XG5cdGNvbnN0IG1heEhlaWdodCA9IGdka21vbml0b3IuZ2VvbWV0cnkuaGVpZ2h0ICogMC4wNDtcblx0Y29uc3QgbWFyZ2luVG9wID0gZ2RrbW9uaXRvci5nZW9tZXRyeS5oZWlnaHQgKiAwLjY7XG5cblx0Y29uc3QgZGVmYXVsdFNwZWFrZXIgPSB3cD8uYXVkaW8uZGVmYXVsdFNwZWFrZXI7XG5cdGNvbnN0IGRlZmF1bHRNaWNyb3Bob25lID0gd3A/LmF1ZGlvLmRlZmF1bHRNaWNyb3Bob25lO1xuXG5cdGNvbnN0IFtpc1Zpc2libGUsIHNldElzVmlzaWJsZV0gPSBjcmVhdGVTdGF0ZShmYWxzZSk7XG5cdGNvbnN0IHZpc2libGVTdGF0ZSA9IGNyZWF0ZUNvbXB1dGVkKFxuXHRcdFtpc1Zpc2libGUsIGhpZGRlbl0sXG5cdFx0dHJhbnNmb3JtVmlzaWJsZVN0YXRlLFxuXHQpO1xuXG5cdGxldCBsYXN0VGltZW91dDogQXN0YWxJTy5UaW1lO1xuXHRsZXQgaXNTdGFydHVwID0gdHJ1ZTtcblxuXHR0aW1lb3V0KDMwMCwgKCkgPT4ge1xuXHRcdGlzU3RhcnR1cCA9IGZhbHNlO1xuXHR9KTtcblxuXHRjb25zdCBbb3NkU3RhdGUsIHNldE9zZFN0YXRlXSA9IGNyZWF0ZVN0YXRlPHtcblx0XHR0eXBlOiBcInNwZWFrZXJcIiB8IFwibWljcm9waG9uZVwiIHwgXCJicmlnaHRuZXNzXCI7XG5cdFx0cGVyY2VudGFnZTogbnVtYmVyO1xuXHRcdG11dGU6IGJvb2xlYW47XG5cdFx0aWNvbjogc3RyaW5nO1xuXHR9Pih7XG5cdFx0dHlwZTogXCJzcGVha2VyXCIsXG5cdFx0cGVyY2VudGFnZTogZGVmYXVsdFNwZWFrZXI/LnZvbHVtZSB8fCAwLFxuXHRcdG11dGU6IGRlZmF1bHRTcGVha2VyPy5tdXRlIHx8IHRydWUsXG5cdFx0aWNvbjogZGVmYXVsdFNwZWFrZXI/Lmljb24gfHwgXCJhdWRpby12b2x1bWUtbXV0ZWQtc3ltYm9saWNcIixcblx0fSk7XG5cblx0ZGVmYXVsdFNwZWFrZXI/LmNvbm5lY3QoXCJub3RpZnk6OnZvbHVtZVwiLCB1cGRhdGVTcGVha2VyU3RhdGUpO1xuXHRkZWZhdWx0U3BlYWtlcj8uY29ubmVjdChcIm5vdGlmeTo6bXV0ZVwiLCB1cGRhdGVTcGVha2VyU3RhdGUpO1xuXG5cdGRlZmF1bHRNaWNyb3Bob25lPy5jb25uZWN0KFwibm90aWZ5Ojp2b2x1bWVcIiwgdXBkYXRlTWljcm9waG9uZVN0YXRlKTtcblx0ZGVmYXVsdE1pY3JvcGhvbmU/LmNvbm5lY3QoXCJub3RpZnk6Om11dGVcIiwgdXBkYXRlTWljcm9waG9uZVN0YXRlKTtcblxuXHRjb25zdCBkaXIgPSBHTGliLkRpci5vcGVuKFxuXHRcdGNvbmZpZy5nZXQoKS5wYXRocz8uYmFja2xpZ2h0QmFzZURpciA/P1xuXHRcdFx0ZGVmYXVsdENvbmZpZy5wYXRocy5iYWNrbGlnaHRCYXNlRGlyLFxuXHRcdDAsXG5cdCk7XG5cdGNvbnN0IGJhY2tsaWdodERpck5hbWUgPSBkaXIucmVhZF9uYW1lKCk7XG5cblx0aWYgKGJhY2tsaWdodERpck5hbWUpIHtcblx0XHRjb25zdCBiYWNrbGlnaHRDdXJyZW50UGF0aCA9IGAke2NvbmZpZy5nZXQoKS5wYXRocz8uYmFja2xpZ2h0QmFzZURpciA/PyBkZWZhdWx0Q29uZmlnLnBhdGhzLmJhY2tsaWdodEJhc2VEaXJ9LyR7YmFja2xpZ2h0RGlyTmFtZX0vYnJpZ2h0bmVzc2A7XG5cdFx0Y29uc3QgYmFja2xpZ2h0TWF4UGF0aCA9IGAke2NvbmZpZy5nZXQoKS5wYXRocz8uYmFja2xpZ2h0QmFzZURpciA/PyBkZWZhdWx0Q29uZmlnLnBhdGhzLmJhY2tsaWdodEJhc2VEaXJ9LyR7YmFja2xpZ2h0RGlyTmFtZX0vbWF4X2JyaWdodG5lc3NgO1xuXG5cdFx0bW9uaXRvckZpbGUoYmFja2xpZ2h0Q3VycmVudFBhdGgsIGFzeW5jICgpID0+IHtcblx0XHRcdGNvbnN0IFtjdXJyZW50U3RyaW5nLCBtYXhTdHJpbmddID0gYXdhaXQgUHJvbWlzZS5hbGwoW1xuXHRcdFx0XHRyZWFkRmlsZUFzeW5jKGJhY2tsaWdodEN1cnJlbnRQYXRoKSxcblx0XHRcdFx0cmVhZEZpbGVBc3luYyhiYWNrbGlnaHRNYXhQYXRoKSxcblx0XHRcdF0pO1xuXG5cdFx0XHRpZiAoaXNTdGFydHVwKSByZXR1cm47XG5cblx0XHRcdHNldE9zZFN0YXRlKHtcblx0XHRcdFx0dHlwZTogXCJicmlnaHRuZXNzXCIsXG5cdFx0XHRcdHBlcmNlbnRhZ2U6IHBhcnNlSW50KGN1cnJlbnRTdHJpbmcpIC8gcGFyc2VJbnQobWF4U3RyaW5nKSxcblx0XHRcdFx0bXV0ZTogZmFsc2UsXG5cdFx0XHRcdGljb246IFwiZGlzcGxheS1icmlnaHRuZXNzLXN5bWJvbGljXCIsXG5cdFx0XHR9KTtcblxuXHRcdFx0c2V0SXNWaXNpYmxlKHRydWUpO1xuXG5cdFx0XHRpZiAobGFzdFRpbWVvdXQpIGxhc3RUaW1lb3V0LmNhbmNlbCgpO1xuXHRcdFx0bGFzdFRpbWVvdXQgPSB0aW1lb3V0KFxuXHRcdFx0XHRjb25maWcuZ2V0KCkudGltZW91dHM/Lm9zZCA/PyBkZWZhdWx0Q29uZmlnLnRpbWVvdXRzLm9zZCxcblx0XHRcdFx0KCkgPT4ge1xuXHRcdFx0XHRcdHNldElzVmlzaWJsZShmYWxzZSk7XG5cdFx0XHRcdH0sXG5cdFx0XHQpO1xuXHRcdH0pO1xuXHR9XG5cblx0ZnVuY3Rpb24gdHJhbnNmb3JtVmlzaWJsZVN0YXRlKGlzVmlzaWJsZTogYm9vbGVhbiwgaGlkZGVuOiBib29sZWFuKSB7XG5cdFx0cmV0dXJuIGlzVmlzaWJsZSAmJiAhaGlkZGVuO1xuXHR9XG5cblx0ZnVuY3Rpb24gdXBkYXRlU3BlYWtlclN0YXRlKHNwZWFrZXI6IFdwLkVuZHBvaW50KSB7XG5cdFx0aWYgKGlzU3RhcnR1cCkgcmV0dXJuO1xuXG5cdFx0bGV0IGljb24gPSBzcGVha2VyLnZvbHVtZUljb247XG5cblx0XHRpZiAoc3BlYWtlci52b2x1bWUgPT09IDApIGljb24gPSBcImF1ZGlvLXZvbHVtZS1tdXRlZC1zeW1ib2xpY1wiO1xuXHRcdGVsc2UgaWYgKE1hdGgucm91bmQoc3BlYWtlci52b2x1bWUgKiAxMDApID09PSAxMDApXG5cdFx0XHRpY29uID0gXCJhdWRpby12b2x1bWUtaGlnaC1zeW1ib2xpY1wiO1xuXG5cdFx0c2V0T3NkU3RhdGUoe1xuXHRcdFx0dHlwZTogXCJzcGVha2VyXCIsXG5cdFx0XHRwZXJjZW50YWdlOiBzcGVha2VyLnZvbHVtZSxcblx0XHRcdG11dGU6IHNwZWFrZXIubXV0ZSxcblx0XHRcdGljb246IGljb24sXG5cdFx0fSk7XG5cblx0XHRzZXRJc1Zpc2libGUodHJ1ZSk7XG5cblx0XHRpZiAobGFzdFRpbWVvdXQpIGxhc3RUaW1lb3V0LmNhbmNlbCgpO1xuXHRcdGxhc3RUaW1lb3V0ID0gdGltZW91dChcblx0XHRcdGNvbmZpZy5nZXQoKS50aW1lb3V0cz8ub3NkID8/IGRlZmF1bHRDb25maWcudGltZW91dHMub3NkLFxuXHRcdFx0KCkgPT4ge1xuXHRcdFx0XHRzZXRJc1Zpc2libGUoZmFsc2UpO1xuXHRcdFx0fSxcblx0XHQpO1xuXHR9XG5cblx0ZnVuY3Rpb24gdXBkYXRlTWljcm9waG9uZVN0YXRlKG1pY3JvcGhvbmU6IFdwLkVuZHBvaW50KSB7XG5cdFx0aWYgKGlzU3RhcnR1cCkgcmV0dXJuO1xuXG5cdFx0bGV0IGljb24gPSBtaWNyb3Bob25lLnZvbHVtZUljb247XG5cblx0XHRpZiAobWljcm9waG9uZS52b2x1bWUgPT09IDApXG5cdFx0XHRpY29uID0gXCJtaWNyb3Bob25lLXNlbnNpdGl2aXR5LW11dGVkLXN5bWJvbGljXCI7XG5cblx0XHRzZXRPc2RTdGF0ZSh7XG5cdFx0XHR0eXBlOiBcIm1pY3JvcGhvbmVcIixcblx0XHRcdHBlcmNlbnRhZ2U6IG1pY3JvcGhvbmUudm9sdW1lLFxuXHRcdFx0bXV0ZTogbWljcm9waG9uZS5tdXRlLFxuXHRcdFx0aWNvbjogaWNvbixcblx0XHR9KTtcblxuXHRcdHNldElzVmlzaWJsZSh0cnVlKTtcblxuXHRcdGlmIChsYXN0VGltZW91dCkgbGFzdFRpbWVvdXQuY2FuY2VsKCk7XG5cdFx0bGFzdFRpbWVvdXQgPSB0aW1lb3V0KFxuXHRcdFx0Y29uZmlnLmdldCgpLnRpbWVvdXRzPy5vc2QgPz8gZGVmYXVsdENvbmZpZy50aW1lb3V0cy5vc2QsXG5cdFx0XHQoKSA9PiB7XG5cdFx0XHRcdHNldElzVmlzaWJsZShmYWxzZSk7XG5cdFx0XHR9LFxuXHRcdCk7XG5cdH1cblxuXHRyZXR1cm4gKFxuXHRcdDx3aW5kb3dcblx0XHRcdGdka21vbml0b3I9e2dka21vbml0b3J9XG5cdFx0XHRjbGFzcz1cIm9zZFwiXG5cdFx0XHR0aXRsZT1cIkFHUyBPU0RcIlxuXHRcdFx0Y3NzPXtgbWFyZ2luLXRvcDogJHttYXJnaW5Ub3B9cHg7YH1cblx0XHRcdCQ9eyhzZWxmKSA9PiB7XG5cdFx0XHRcdHNlbGYuZ2V0X3N1cmZhY2UoKT8uc2V0X2lucHV0X3JlZ2lvbihuZXcgZ2lDYWlyby5SZWdpb24oKSk7XG5cblx0XHRcdFx0c2VsZi5jb25uZWN0KFwibWFwXCIsICgpID0+IHtcblx0XHRcdFx0XHRzZWxmLmdldF9zdXJmYWNlKCk/LnNldF9pbnB1dF9yZWdpb24obmV3IGdpQ2Fpcm8uUmVnaW9uKCkpO1xuXHRcdFx0XHR9KTtcblxuXHRcdFx0XHRjb25zdCByZXZlYWxlciA9IHNlbGYuY2hpbGQgYXMgR3RrLlJldmVhbGVyO1xuXHRcdFx0XHRjb25zdCB0cmFuc2l0aW9uRHVyYXRpb24gPSByZXZlYWxlci5nZXRfdHJhbnNpdGlvbl9kdXJhdGlvbigpO1xuXG5cdFx0XHRcdHZpc2libGVTdGF0ZS5zdWJzY3JpYmUoYXN5bmMgKCkgPT4ge1xuXHRcdFx0XHRcdGNvbnN0IHZpc2libGUgPSB2aXNpYmxlU3RhdGUuZ2V0KCk7XG5cblx0XHRcdFx0XHRpZiAoIXZpc2libGUpIHtcblx0XHRcdFx0XHRcdHJldmVhbGVyLnNldF9yZXZlYWxfY2hpbGQodmlzaWJsZSk7XG5cblx0XHRcdFx0XHRcdGF3YWl0IHNsZWVwKHRyYW5zaXRpb25EdXJhdGlvbik7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0c2VsZi5zZXRfdmlzaWJsZSh2aXNpYmxlKTtcblxuXHRcdFx0XHRcdGlmICh2aXNpYmxlKSB7XG5cdFx0XHRcdFx0XHRyZXZlYWxlci5zZXRfcmV2ZWFsX2NoaWxkKHZpc2libGUpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cdFx0XHR9fVxuXHRcdD5cblx0XHRcdDxyZXZlYWxlclxuXHRcdFx0XHR0cmFuc2l0aW9uRHVyYXRpb249e2NvbmZpZyhcblx0XHRcdFx0XHQoY2ZnKSA9PlxuXHRcdFx0XHRcdFx0Y2ZnLmFuaW1hdGlvbnNEdXJhdGlvbj8ub3NkID8/XG5cdFx0XHRcdFx0XHRkZWZhdWx0Q29uZmlnLmFuaW1hdGlvbnNEdXJhdGlvbi5vc2QsXG5cdFx0XHRcdCl9XG5cdFx0XHRcdHRyYW5zaXRpb25UeXBlPXtjb25maWcoXG5cdFx0XHRcdFx0KGNmZykgPT5cblx0XHRcdFx0XHRcdEd0ay5SZXZlYWxlclRyYW5zaXRpb25UeXBlW1xuXHRcdFx0XHRcdFx0XHRjZmcuYW5pbWF0aW9uc1R5cGU/Lm9zZCA/P1xuXHRcdFx0XHRcdFx0XHRcdGRlZmF1bHRDb25maWcuYW5pbWF0aW9uc1R5cGUub3NkXG5cdFx0XHRcdFx0XHRdLFxuXHRcdFx0XHQpfVxuXHRcdFx0PlxuXHRcdFx0XHQ8Ym94XG5cdFx0XHRcdFx0aGVpZ2h0UmVxdWVzdD17bWF4SGVpZ2h0fVxuXHRcdFx0XHRcdHdpZHRoUmVxdWVzdD17bWF4V2lkdGh9XG5cdFx0XHRcdFx0Y2xhc3M9XCJvc2QtY29udGFpbmVyXCJcblx0XHRcdFx0PlxuXHRcdFx0XHRcdDxpbWFnZVxuXHRcdFx0XHRcdFx0aWNvbk5hbWU9e29zZFN0YXRlKChzdGF0ZSkgPT4gc3RhdGUuaWNvbil9XG5cdFx0XHRcdFx0XHRjbGFzcz1cImljb25cIlxuXHRcdFx0XHRcdC8+XG5cblx0XHRcdFx0XHQ8R3RrLlByb2dyZXNzQmFyXG5cdFx0XHRcdFx0XHRoZXhwYW5kXG5cdFx0XHRcdFx0XHR2YWxpZ249e0d0ay5BbGlnbi5DRU5URVJ9XG5cdFx0XHRcdFx0XHRjbGFzcz17b3NkU3RhdGUoKHN0YXRlKSA9PlxuXHRcdFx0XHRcdFx0XHRNYXRoLnJvdW5kKHN0YXRlLnBlcmNlbnRhZ2UgKiAxMDApID4gMTAwXG5cdFx0XHRcdFx0XHRcdFx0PyBcInByb2dyZXNzIG92ZXJmaWxsZWRcIlxuXHRcdFx0XHRcdFx0XHRcdDogXCJwcm9ncmVzc1wiLFxuXHRcdFx0XHRcdFx0KX1cblx0XHRcdFx0XHRcdGZyYWN0aW9uPXtvc2RTdGF0ZSgoc3RhdGUpID0+IHN0YXRlLnBlcmNlbnRhZ2UpfVxuXHRcdFx0XHRcdC8+XG5cblx0XHRcdFx0XHQ8bGFiZWxcblx0XHRcdFx0XHRcdGxhYmVsPXtvc2RTdGF0ZShcblx0XHRcdFx0XHRcdFx0KHN0YXRlKSA9PiBgJHtNYXRoLnJvdW5kKHN0YXRlLnBlcmNlbnRhZ2UgKiAxMDApfSVgLFxuXHRcdFx0XHRcdFx0KX1cblx0XHRcdFx0XHQvPlxuXHRcdFx0XHQ8L2JveD5cblx0XHRcdDwvcmV2ZWFsZXI+XG5cdFx0PC93aW5kb3c+XG5cdCk7XG59XG4iXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsT0FBT0EsY0FBYTs7O0FDQXBCLE9BQU8sYUFBYTtBQUNwQixPQUFPLFNBQVM7QUFDaEIsT0FBTyxVQUFVOzs7QUNBVixTQUFTLFNBQVMsS0FBYTtBQUNsQyxTQUFPLElBQ0YsUUFBUSxtQkFBbUIsT0FBTyxFQUNsQyxXQUFXLEtBQUssR0FBRyxFQUNuQixZQUFZO0FBQ3JCO0FBRU8sU0FBUyxTQUFTLEtBQWE7QUFDbEMsU0FBTyxJQUNGLFFBQVEsbUJBQW1CLE9BQU8sRUFDbEMsV0FBVyxLQUFLLEdBQUcsRUFDbkIsWUFBWTtBQUNyQjtBQXVETyxTQUFTLElBQUksS0FBcUIsTUFBYyxPQUFZO0FBQy9ELFFBQU0sTUFBTSxTQUFTLElBQUk7QUFDekIsUUFBTSxTQUFTLE9BQU8sR0FBRztBQUN6QixRQUFNLFNBQVMsT0FBTyxHQUFHO0FBRXpCLE1BQUk7QUFFSixNQUFJLFVBQVUsT0FBTyxPQUFPLElBQUksTUFBTSxNQUFNLFlBQVk7QUFDcEQsY0FBVyxJQUFJLE1BQU0sRUFBb0I7QUFBQSxFQUM3QyxPQUFPO0FBQ0gsY0FBVSxJQUFJLElBQXdCO0FBQUEsRUFDMUM7QUFFQSxNQUFJLFlBQVksT0FBTztBQUNuQixRQUFJLFVBQVUsT0FBTyxPQUFPLElBQUksTUFBTSxNQUFNLFlBQVk7QUFDcEQ7QUFBQyxNQUFDLElBQUksTUFBTSxFQUF1QixLQUFLO0FBQUEsSUFDNUMsT0FBTztBQUNILGFBQU8sT0FBTyxLQUFLLEVBQUUsQ0FBQyxJQUFJLEdBQUcsTUFBTSxDQUFDO0FBQUEsSUFDeEM7QUFBQSxFQUNKO0FBQ0o7OztBRDdFTyxJQUFNLFdBQU4sTUFBTSxrQkFBOEIsU0FBUztBQUFBLEVBQ2hEO0FBQUEsU0FBTyxTQUFTLFFBQVE7QUFBQTtBQUFBLEVBS3hCO0FBQUEsRUFDQTtBQUFBLEVBRUEsWUFBWSxLQUFjLFdBQStCO0FBQ3JELFVBQU0sa0VBQWtFO0FBQ3hFLFNBQUssYUFBYSxjQUFjLE1BQU0sTUFBTTtBQUM1QyxTQUFLLE9BQU87QUFBQSxFQUNoQjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU9BLFVBQVUsVUFBOEM7QUFFcEQsV0FBTyxLQUFLLFdBQVcsUUFBUTtBQUFBLEVBQ25DO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFLQSxNQUFTO0FBQ0wsY0FBUyxZQUFZLElBQUksSUFBSTtBQUM3QixXQUFPLEtBQUssS0FBSztBQUFBLEVBQ3JCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU1BLEdBQVUsV0FBeUM7QUFDL0MsV0FBTyxJQUFJLFVBQVMsTUFBTSxVQUFVLEtBQUssS0FBSyxDQUFDLEdBQUcsS0FBSyxVQUFVO0FBQUEsRUFDckU7QUFBQSxFQUVVLE1BQWEsV0FBeUM7QUFDNUQsV0FBTyxLQUFLLEdBQUcsU0FBUztBQUFBLEVBQzVCO0FBQUEsRUFFQSxXQUFtQjtBQUNmLFdBQU8sWUFBWSxLQUFLLElBQUksQ0FBQztBQUFBLEVBQ2pDO0FBQUEsRUFFQSxDQUFDLE9BQU8sV0FBVyxJQUFJO0FBQ25CLFlBQVEsS0FBSyxxREFBcUQ7QUFDbEUsV0FBTyxLQUFLLFNBQVM7QUFBQSxFQUN6QjtBQUNKO0FBdUJPLFNBQVMsWUFBZSxNQUFtQjtBQUM5QyxNQUFJLGVBQWU7QUFDbkIsUUFBTSxjQUFjLG9CQUFJLElBQXVCO0FBRS9DLFFBQU0sWUFBK0IsQ0FBQyxhQUFhO0FBQy9DLGdCQUFZLElBQUksUUFBUTtBQUN4QixXQUFPLE1BQU0sWUFBWSxPQUFPLFFBQVE7QUFBQSxFQUM1QztBQUVBLFFBQU1DLE9BQU0sQ0FBQyxhQUFzQjtBQUMvQixVQUFNLFFBQVcsT0FBTyxhQUFhLGFBQWEsU0FBUyxZQUFZLElBQUk7QUFDM0UsUUFBSSxpQkFBaUIsT0FBTztBQUN4QixxQkFBZTtBQUNmLGtCQUFZLFFBQVEsQ0FBQyxPQUFPLEdBQUcsQ0FBQztBQUFBLElBQ3BDO0FBQUEsRUFDSjtBQUVBLFNBQU8sQ0FBQyxJQUFJLFNBQVMsTUFBTSxjQUFjLFNBQVMsR0FBR0EsSUFBZ0I7QUFDekU7QUFnQk8sU0FBUyxlQUlkLE1BQVksV0FBK0M7QUFDekQsTUFBSTtBQUNKLFFBQU0sY0FBYyxvQkFBSSxJQUF1QjtBQUMvQyxRQUFNLFFBQVEsSUFBSSxNQUFlLEtBQUssTUFBTTtBQUU1QyxRQUFNLFlBQStCLENBQUMsYUFBYTtBQUMvQyxRQUFJLFlBQVksU0FBUyxHQUFHO0FBQ3hCLGdCQUFVLEtBQUs7QUFBQSxRQUFJLENBQUMsS0FBSyxNQUNyQixJQUFJLFVBQVUsTUFBTTtBQUNoQixnQkFBTSxRQUFRLElBQUksSUFBSTtBQUN0QixjQUFJLE1BQU0sQ0FBQyxNQUFNLE9BQU87QUFDcEIsa0JBQU0sQ0FBQyxJQUFJLElBQUksSUFBSTtBQUNuQix3QkFBWSxRQUFRLENBQUMsT0FBTyxHQUFHLENBQUM7QUFBQSxVQUNwQztBQUFBLFFBQ0osQ0FBQztBQUFBLE1BQ0w7QUFBQSxJQUNKO0FBRUEsZ0JBQVksSUFBSSxRQUFRO0FBRXhCLFdBQU8sTUFBTTtBQUNULGtCQUFZLE9BQU8sUUFBUTtBQUMzQixVQUFJLFlBQVksU0FBUyxHQUFHO0FBQ3hCLGdCQUFRLElBQUksQ0FBQyxPQUFPLEdBQUcsQ0FBQztBQUN4QixnQkFBUSxTQUFTO0FBQ2pCLGNBQU0sU0FBUztBQUFBLE1BQ25CO0FBQUEsSUFDSjtBQUFBLEVBQ0o7QUFFQSxRQUFNLE1BQU0sTUFBUztBQUNqQixVQUFNLE9BQU8sS0FBSyxJQUFJLENBQUMsS0FBSyxNQUFNO0FBQzlCLFVBQUksQ0FBQyxNQUFNLENBQUMsR0FBRztBQUNYLGNBQU0sQ0FBQyxJQUFJLElBQUksSUFBSTtBQUFBLE1BQ3ZCO0FBRUEsYUFBTyxNQUFNLENBQUM7QUFBQSxJQUNsQixDQUFDO0FBRUQsV0FBTyxZQUFZLFVBQVUsR0FBSSxJQUFhLElBQUs7QUFBQSxFQUN2RDtBQUVBLFNBQU8sSUFBSSxTQUFTLEtBQUssU0FBUztBQUN0QztBQWlDTyxTQUFTLGNBQWlCLFFBQXVDLEtBQTBCO0FBQzlGLFFBQU0sT0FBTyxTQUFTLEdBQUc7QUFFekIsUUFBTSxZQUErQixDQUFDLGFBQWE7QUFDL0MsVUFBTSxNQUFNLGtCQUFrQixJQUFJLFdBQVcsWUFBWTtBQUN6RCxVQUFNLEtBQUssT0FBTyxRQUFRLEdBQUcsR0FBRyxLQUFLLElBQUksSUFBSSxNQUFNLFNBQVMsQ0FBQztBQUM3RCxXQUFPLE1BQU0sT0FBTyxXQUFXLEVBQUU7QUFBQSxFQUNyQztBQUVBLFFBQU0sTUFBTSxNQUFTO0FBQ2pCLFFBQUksa0JBQWtCLElBQUksVUFBVTtBQUNoQyxhQUFPLE9BQU8sVUFBVSxHQUFHLEVBQUUsZ0JBQWdCO0FBQUEsSUFDakQsT0FBTztBQUNILFlBQU0sU0FBUyxPQUFPLEtBQUssV0FBVyxLQUFLLEdBQUcsQ0FBQztBQUUvQyxVQUFJLFVBQVUsVUFBVSxPQUFPLE9BQU8sTUFBTSxNQUFNLFlBQVk7QUFDMUQsZUFBUSxPQUFPLE1BQU0sRUFBb0I7QUFBQSxNQUM3QztBQUVBLFVBQUksUUFBUSxPQUFRLFFBQU8sT0FBTyxJQUFJO0FBQ3RDLFVBQUksT0FBTyxPQUFRLFFBQU8sT0FBTyxHQUEwQjtBQUUzRCxZQUFNLE1BQU0sdUJBQXVCLEdBQUcsRUFBRTtBQUFBLElBQzVDO0FBQUEsRUFDSjtBQUVBLFNBQU8sSUFBSSxTQUFTLEtBQUssU0FBUztBQUN0Qzs7O0FFM05PLFNBQVMsU0FBUyxNQUF1QjtBQUM1QyxTQUFPLE9BQU8sT0FBTyxLQUFLLElBQUk7QUFDbEM7QUFXQSxTQUFTLGNBQWM7QUFDbkIsUUFBTSxNQUFNLGNBQWM7QUFDOUI7QUFFTyxJQUFNLE1BQWM7QUFBQSxFQUN2QixtQkFBbUIsQ0FBQztBQUFBLEVBQ3BCLFVBQVU7QUFBQSxFQUNWLFFBQVE7QUFBQSxFQUNSLFVBQVU7QUFBQSxFQUNWLFdBQVcsTUFBTTtBQUFBLEVBQ2pCLGdCQUFnQixNQUFNO0FBQzFCOzs7QUNsQ08sSUFBTSxRQUFOLE1BQU0sT0FBTTtBQUFBLEVBVWYsWUFBWSxRQUF1QjtBQU5uQyxvQkFBVyxvQkFBSSxJQUFzQjtBQUVyQyxTQUFRLFdBQVcsb0JBQUksSUFBZ0I7QUFDdkMsU0FBUSxTQUFTLG9CQUFJLElBQWdCO0FBQ3JDLFNBQVEsVUFBVTtBQUdkLFNBQUssU0FBUztBQUFBLEVBQ2xCO0FBQUEsRUFFQSxVQUFVLFVBQXNCO0FBQzVCLFNBQUssVUFBVSxJQUFJLFFBQVE7QUFBQSxFQUMvQjtBQUFBLEVBRUEsUUFBUSxVQUFzQjtBQUMxQixRQUFJLEtBQUssVUFBVSxDQUFDLEtBQUssT0FBTyxTQUFTO0FBQ3JDLFdBQUssT0FBTyxRQUFRLFFBQVE7QUFBQSxJQUNoQyxPQUFPO0FBQ0gsV0FBSyxPQUFPLElBQUksUUFBUTtBQUFBLElBQzVCO0FBQUEsRUFDSjtBQUFBLEVBRUEsSUFBTyxJQUFhO0FBQ2hCLFVBQU0sT0FBTyxPQUFNO0FBQ25CLFdBQU0sVUFBVTtBQUVoQixRQUFJO0FBQ0EsYUFBTyxHQUFHO0FBQUEsSUFDZCxVQUFFO0FBQ0UsV0FBSyxPQUFPLFFBQVEsQ0FBQyxPQUFPLEdBQUcsQ0FBQztBQUNoQyxXQUFLLE9BQU8sTUFBTTtBQUNsQixXQUFLLFVBQVU7QUFDZixhQUFNLFVBQVU7QUFBQSxJQUNwQjtBQUFBLEVBQ0o7QUFBQSxFQUVBLFVBQVU7QUFDTixTQUFLLFNBQVMsUUFBUSxDQUFDLE9BQU8sR0FBRyxDQUFDO0FBQ2xDLFNBQUssU0FBUyxNQUFNO0FBQ3BCLFNBQUssU0FBUyxNQUFNO0FBQ3BCLFdBQU8sS0FBSztBQUFBLEVBQ2hCO0FBQ0o7QUE2RU8sU0FBUyxXQUFrQjtBQUM5QixRQUFNLFFBQVEsTUFBTTtBQUNwQixNQUFJLENBQUMsT0FBTztBQUNSLFVBQU0sTUFBTSwyQ0FBMkM7QUFBQSxFQUMzRDtBQUVBLFNBQU87QUFDWDtBQUtPLFNBQVMsVUFBVSxTQUFxQjtBQUMzQyxNQUFJLENBQUMsTUFBTSxTQUFTO0FBQ2hCLFlBQVEsTUFBTSxNQUFNLHNEQUFzRCxDQUFDO0FBQUEsRUFDL0U7QUFFQSxRQUFNLFNBQVMsVUFBVSxPQUFPO0FBQ3BDO0FBd0NPLFNBQVMsV0FBYyxJQUFnQztBQUMxRCxRQUFNLFFBQVEsSUFBSSxNQUFNLElBQUk7QUFDNUIsU0FBTyxNQUFNLElBQUksTUFBTSxHQUFHLE1BQU0sTUFBTSxRQUFRLENBQUMsQ0FBQztBQUNwRDs7O0FKcktPLElBQU0sVUFBVSxPQUFPLGtCQUFrQjtBQUt6QyxTQUFTLFFBQVEsUUFBd0I7QUFDNUMsU0FBTyxXQUFXLFNBQVUsT0FBTyxPQUFPLElBQWU7QUFDN0Q7QUF1RUEsU0FBUyxjQUFjLE1BQXVCO0FBQzFDLFNBQU8sS0FBSyxxQkFBcUJDLFNBQVE7QUFDN0M7QUFFQSxTQUFTLGVBQWUsTUFBdUI7QUFDM0MsU0FBTyxPQUFPLFNBQVMsY0FBYyxDQUFDLGNBQWMsSUFBSTtBQUM1RDtBQUdPLFNBQVMsUUFBUSxRQUFnQixNQUFjO0FBQ2xELE1BQUksV0FBVyxVQUFVLE9BQU8sT0FBTyxNQUFNLElBQUk7QUFDN0MsWUFBUSxLQUFLLHVCQUF1QixPQUFPLE9BQU8sQ0FBQyxPQUFPLElBQUksT0FBTyxNQUFNLEVBQUU7QUFBQSxFQUNqRjtBQUVBLFNBQU8sT0FBTyxRQUFRLEVBQUUsQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO0FBQzdDO0FBWU8sU0FBUyxJQUNaLE1BQ0EsU0FFQSxLQUNDO0FBQ0QsUUFBTSxFQUFFLEdBQUcsT0FBTyxjQUFjLFdBQVcsQ0FBQyxHQUFHLEdBQUcsS0FBSyxJQUFJO0FBQzNELFFBQU0sUUFBUTtBQUVkLE1BQUksSUFBSyxRQUFPLE9BQU8sT0FBTyxFQUFFLElBQUksQ0FBQztBQUNyQyxNQUFJLFVBQVUsS0FBSztBQUVuQixhQUFXLENBQUNDLE1BQUssS0FBSyxLQUFLLE9BQU8sUUFBUSxLQUFLLEdBQUc7QUFDOUMsUUFBSSxVQUFVLE9BQVcsUUFBTyxNQUFNQSxJQUFHO0FBQUEsRUFDN0M7QUFFQSxNQUFJLE9BQU8sU0FBUyxVQUFVO0FBQzFCLFFBQUksUUFBUSxJQUFJLG1CQUFtQjtBQUMvQixhQUFPLElBQUksa0JBQWtCLElBQUk7QUFBQSxJQUNyQyxPQUFPO0FBQ0gsWUFBTSxNQUFNLDhCQUE4QixJQUFJLEdBQUc7QUFBQSxJQUNyRDtBQUFBLEVBQ0o7QUFFQSxNQUFJLGVBQWUsSUFBSSxHQUFHO0FBQ3RCLFVBQU1DLFVBQVMsS0FBSyxFQUFFLFVBQVUsR0FBRyxNQUFNLENBQUM7QUFDMUMsUUFBSSxNQUFPLFNBQVFBLFNBQVEsS0FBSztBQUNoQyxRQUFJQSxPQUFNO0FBQ1YsV0FBT0E7QUFBQSxFQUNYO0FBR0EsUUFBTSxFQUFFLEtBQUssT0FBTyxVQUFVLElBQUk7QUFDbEMsU0FBTyxNQUFNO0FBQ2IsU0FBTyxNQUFNO0FBRWIsUUFBTSxVQUE2RCxDQUFDO0FBQ3BFLFFBQU0sV0FBK0MsQ0FBQztBQUd0RCxhQUFXLENBQUNELE1BQUssS0FBSyxLQUFLLE9BQU8sUUFBUSxLQUFLLEdBQUc7QUFDOUMsUUFBSUEsS0FBSSxXQUFXLElBQUksR0FBRztBQUN0QixjQUFRLEtBQUssQ0FBQ0EsS0FBSSxNQUFNLENBQUMsR0FBRyxLQUFzQixDQUFDO0FBQ25ELGFBQU8sTUFBTUEsSUFBRztBQUFBLElBQ3BCO0FBQ0EsUUFBSSxpQkFBaUIsVUFBVTtBQUMzQixlQUFTLEtBQUssQ0FBQ0EsTUFBSyxLQUFLLENBQUM7QUFDMUIsWUFBTUEsSUFBRyxJQUFJLE1BQU0sSUFBSTtBQUFBLElBQzNCO0FBQUEsRUFDSjtBQUdBLFFBQU0sU0FBUyxlQUFlLGFBQWEsS0FBSyxJQUFJLElBQUssS0FBZSxLQUFLO0FBQzdFLE1BQUksYUFBYyxRQUFPLE9BQU8sUUFBUSxLQUFLO0FBQzdDLE1BQUksTUFBTyxTQUFRLFFBQVEsS0FBSztBQUVoQyxNQUFJLElBQUssS0FBSSxPQUFPLFFBQVEsR0FBRztBQUMvQixNQUFJLFVBQVcsS0FBSSxTQUFTLFFBQVEsU0FBUztBQUc3QyxhQUFXLFNBQVMsTUFBTSxRQUFRLFFBQVEsSUFBSSxXQUFXLENBQUMsUUFBUSxHQUFHO0FBQ2pFLFFBQUksVUFBVSxNQUFNO0FBQ2hCLGNBQVEsS0FBSyxtREFBbUQ7QUFDaEU7QUFBQSxJQUNKO0FBRUEsUUFBSSxNQUFNLFFBQVEsS0FBSyxHQUFHO0FBQ3RCLGlCQUFXLE1BQU0sT0FBTztBQUNwQixZQUFJLFNBQVMsUUFBUSxJQUFJLEVBQUU7QUFBQSxNQUMvQjtBQUFBLElBQ0osV0FBVyxPQUFPO0FBQ2QsVUFBSSxTQUFTLFFBQVEsT0FBTyxFQUFFO0FBQUEsSUFDbEM7QUFBQSxFQUNKO0FBR0EsUUFBTSxrQkFBa0IsUUFBUSxJQUFJLENBQUMsQ0FBQyxLQUFLLE9BQU8sTUFBTTtBQUNwRCxVQUFNLE9BQU8sU0FBUyxHQUFHO0FBQ3pCLFVBQU0sS0FBSyxLQUFLLFdBQVcsU0FBUyxJQUM5QixPQUFPLFFBQVEsV0FBVyxLQUFLLE1BQU0sQ0FBQyxDQUFDLElBQUksT0FBTyxJQUNsRCxPQUFPLFFBQVEsU0FBUyxHQUFHLEdBQUcsT0FBTztBQUUzQyxXQUFPLE1BQU0sT0FBTyxXQUFXLEVBQUU7QUFBQSxFQUNyQyxDQUFDO0FBR0QsUUFBTSxrQkFBa0IsU0FBUyxJQUFJLENBQUMsQ0FBQyxNQUFNLE9BQU8sTUFBTTtBQUN0RCxVQUFNLFVBQVUsUUFBUSxVQUFVLE1BQU07QUFDcEMsVUFBSSxRQUFRLE1BQU0sUUFBUSxJQUFJLENBQUM7QUFBQSxJQUNuQyxDQUFDO0FBQ0QsUUFBSSxRQUFRLE1BQU0sUUFBUSxJQUFJLENBQUM7QUFDL0IsV0FBTztBQUFBLEVBQ1gsQ0FBQztBQUdELE1BQUksZ0JBQWdCLFNBQVMsS0FBSyxnQkFBZ0IsU0FBUyxHQUFHO0FBQzFELGNBQVUsTUFBTTtBQUNaLHNCQUFnQixRQUFRLENBQUMsT0FBTyxHQUFHLENBQUM7QUFDcEMsc0JBQWdCLFFBQVEsQ0FBQyxPQUFPLEdBQUcsQ0FBQztBQUFBLElBQ3hDLENBQUM7QUFBQSxFQUNMO0FBRUEsTUFBSSxNQUFNO0FBQ1YsU0FBTztBQUNYO0FBRU8sSUFBTSxPQUFPOzs7QUt0T3BCLE9BQU9FLGNBQWE7OztBQ0twQixJQUFNLE1BQU0sT0FBTyxtREFBbUQ7QUFFL0QsSUFBTSwwQkFBZ0QsTUFBTSxJQUM5RCxLQUFLLENBQUNDLFNBQVFBLEtBQUksdUJBQXVCLEVBQ3pDLE1BQU0sTUFBTSxNQUFNLE1BQU07OztBRFQ3QjtBQUtPLElBQU0sV0FBTixNQUFNLG1CQUEwQixLQUFBQyxTQUFRLFFBQ25DLEtBQUFBLFNBQVEsU0FXUixLQUFBQSxTQUFRLFlBWm1CLElBQWU7QUFBQSxFQWdFbEQsWUFBWSxFQUFFLFdBQVcsQ0FBQyxFQUFFLElBQXlDLENBQUMsR0FBRztBQUNyRSxVQUFNO0FBeENWLFNBQVEsZ0JBQWdCLG9CQUFJLElBQVk7QUF5Q3BDLFNBQUssWUFBWSxNQUFNLFFBQVEsUUFBUSxJQUFJLFdBQVcsQ0FBQyxRQUFRO0FBQUEsRUFDbkU7QUFBQSxFQWxFQTtBQUFBLFNBQVEsTUFBbUI7QUFBQSxNQUN2QixXQUFXLENBQUM7QUFBQSxNQUVaLGVBQWU7QUFBQSxRQUNYLGFBQWEsQ0FBQ0EsU0FBUSxhQUFhQSxTQUFRLFNBQVM7QUFBQSxNQUN4RDtBQUFBLE1BQ0EsaUJBQWlCO0FBQUEsUUFDYixhQUFhLENBQUNBLFNBQVEsYUFBYUEsU0FBUSxTQUFTO0FBQUEsTUFDeEQ7QUFBQSxJQUNKO0FBQUE7QUFBQSxFQUVBO0FBQUEsU0FBUSxNQUFzQjtBQUFBLE1BQzFCLFVBQVVBLFNBQVEsVUFBVSxTQUFTLFlBQVksSUFBSSxJQUFJQSxTQUFRLFdBQVcsUUFBUTtBQUFBLElBQ3hGO0FBQUE7QUFBQSxFQUVBLE9BQU87QUFDSCxJQUFBQSxTQUFRLGNBQWMsSUFBSTtBQUMxQiw0QkFBd0IsSUFBSTtBQUFBLEVBQ2hDO0FBQUEsRUFFQSxPQUFPLElBQU8sV0FBcUIsQ0FBQyxHQUFHO0FBQ25DLFdBQU8sSUFBSSxVQUFTLEVBQUUsU0FBUyxDQUFDO0FBQUEsRUFDcEM7QUFBQSxFQUtBLElBQUksV0FBVztBQUNYLFdBQU8sQ0FBQyxHQUFHLEtBQUssU0FBUztBQUFBLEVBQzdCO0FBQUEsRUFFQSxTQUFTLE9BQVUsUUFBZ0IsSUFBVTtBQUN6QyxRQUFJLGlCQUFpQixXQUFVO0FBQzNCLFlBQU0sTUFBTSx5Q0FBeUM7QUFBQSxJQUN6RDtBQUVBLFFBQUksUUFBUSxHQUFHO0FBQ1gsV0FBSyxZQUFZO0FBQUEsUUFDYixHQUFHLEtBQUssVUFBVSxNQUFNLEdBQUcsS0FBSztBQUFBLFFBQ2hDO0FBQUEsUUFDQSxHQUFHLEtBQUssVUFBVSxNQUFNLEtBQUs7QUFBQSxNQUNqQztBQUFBLElBQ0osT0FBTztBQUNILFdBQUssVUFBVSxLQUFLLEtBQUs7QUFDekIsY0FBUSxLQUFLLFVBQVUsU0FBUztBQUFBLElBQ3BDO0FBRUEsU0FBSyxLQUFLLGVBQWUsT0FBTyxLQUFLO0FBQ3JDLFNBQUssT0FBTyxVQUFVO0FBQUEsRUFDMUI7QUFBQSxFQUVBLFNBQVMsT0FBbUI7QUFDeEIsV0FBTyxLQUFLLFVBQVUsVUFBVSxDQUFDLE9BQU8sT0FBTyxLQUFLLElBQUk7QUFBQSxFQUM1RDtBQUFBLEVBRUEsWUFBWSxPQUFnQjtBQUN4QixVQUFNLFFBQVEsS0FBSyxVQUFVLFVBQVUsQ0FBQyxNQUFNLE1BQU0sS0FBSztBQUN6RCxTQUFLLFVBQVUsT0FBTyxPQUFPLENBQUM7QUFFOUIsU0FBSyxLQUFLLGlCQUFpQixPQUFPLEtBQUs7QUFDdkMsU0FBSyxPQUFPLFVBQVU7QUFBQSxFQUMxQjtBQUFBLEVBT0EsUUFBUSxRQUFnQixVQUFxRDtBQUN6RSxVQUFNLEtBQUssTUFBTSxRQUFRLFFBQVEsUUFBUTtBQUN6QyxTQUFLLGNBQWMsSUFBSSxFQUFFO0FBQ3pCLFdBQU87QUFBQSxFQUNYO0FBQUEsRUFFQSxXQUFXLElBQWtCO0FBQ3pCLFVBQU0sV0FBVyxFQUFFO0FBQ25CLFNBQUssY0FBYyxPQUFPLEVBQUU7QUFBQSxFQUNoQztBQUFBLEVBRUEsVUFBVTtBQUNOLFNBQUssS0FBSyxTQUFTO0FBQ25CLGVBQVcsTUFBTSxLQUFLLGNBQWMsT0FBTyxHQUFHO0FBQzFDLFlBQU0sV0FBVyxFQUFFO0FBQUEsSUFDdkI7QUFBQSxFQUNKO0FBQ0o7OztBRXZETyxTQUFTLElBQXVDO0FBQUEsRUFDbkQ7QUFBQSxFQUNBLFVBQVU7QUFBQSxFQUNWO0FBQUEsRUFDQSxLQUFLLENBQUMsU0FBZTtBQUN6QixHQUEwQztBQUd0QyxRQUFNLGVBQWUsU0FBUztBQUM5QixRQUFNLE1BQU0sb0JBQUksSUFBeUI7QUFDekMsUUFBTSxXQUFXLElBQUksU0FBYTtBQUVsQyxXQUFTQyxRQUFPLEVBQUUsTUFBTSxPQUFPLE9BQU8sQ0FBQyxLQUFLLEdBQUcsTUFBTSxHQUFZO0FBQzdELFFBQUksT0FBTyxZQUFZLFlBQVk7QUFDL0IsY0FBUSxPQUFPLE1BQU0sTUFBTSxJQUFJLENBQUM7QUFBQSxJQUNwQyxXQUFXLFlBQVksTUFBTTtBQUN6QixVQUFJLGVBQWUsS0FBSztBQUFBLElBQzVCO0FBQ0EsVUFBTSxRQUFRO0FBQUEsRUFDbEI7QUFFQSxXQUFTLFNBQVMsV0FBMkI7QUFDekMsVUFBTSxRQUFRLENBQUMsR0FBRyxTQUFTO0FBQzNCLFVBQU0sTUFBTSxNQUFNLElBQUksRUFBRTtBQUN4QixVQUFNLFFBQVEsSUFBSSxJQUFJLEdBQUc7QUFHekIsZUFBVyxDQUFDLEtBQUssS0FBSyxLQUFLLElBQUksUUFBUSxHQUFHO0FBR3RDLGVBQVMsWUFBWSxNQUFNLEtBQUs7QUFFaEMsVUFBSSxDQUFDLE1BQU0sSUFBSSxHQUFHLEdBQUc7QUFDakIsUUFBQUEsUUFBTyxLQUFLO0FBQ1osWUFBSSxPQUFPLEdBQUc7QUFBQSxNQUNsQjtBQUFBLElBQ0o7QUFHQSxVQUFNLElBQUksQ0FBQyxNQUFNLE1BQU07QUFDbkIsWUFBTSxNQUFNLElBQUksQ0FBQztBQUNqQixVQUFJLElBQUksSUFBSSxHQUFHLEdBQUc7QUFDZCxjQUFNO0FBQUEsVUFDRixPQUFPLENBQUMsRUFBRSxRQUFRO0FBQUEsVUFDbEI7QUFBQSxRQUNKLElBQUksSUFBSSxJQUFJLEdBQUc7QUFDZixpQkFBUyxDQUFDO0FBQ1YsWUFBSSxTQUFTLFNBQVMsS0FBSyxHQUFHO0FBQzFCLGtCQUFRLEtBQUsseUJBQXlCLEdBQUcsRUFBRTtBQUFBLFFBQy9DLE9BQU87QUFDSCxtQkFBUyxTQUFTLEtBQUs7QUFBQSxRQUMzQjtBQUFBLE1BQ0osT0FBTztBQUNILGNBQU0sQ0FBQyxPQUFPLFFBQVEsSUFBSSxZQUFZLENBQUM7QUFDdkMsY0FBTSxRQUFRLElBQUksTUFBTSxZQUFZO0FBQ3BDLGNBQU0sUUFBUSxNQUFNLElBQUksTUFBTSxRQUFRLE1BQU0sS0FBSyxDQUFDO0FBQ2xELFlBQUksSUFBSSxLQUFLLEVBQUUsTUFBTSxPQUFPLE9BQU8sQ0FBQyxPQUFPLFFBQVEsR0FBRyxNQUFNLENBQUM7QUFDN0QsaUJBQVMsU0FBUyxLQUFLO0FBQUEsTUFDM0I7QUFBQSxJQUNKLENBQUM7QUFBQSxFQUNMO0FBRUEsUUFBTSxVQUFVLEtBQUssVUFBVSxNQUFNO0FBQ2pDLGFBQVMsS0FBSyxJQUFJLENBQUM7QUFBQSxFQUN2QixDQUFDO0FBQ0QsV0FBUyxLQUFLLElBQUksQ0FBQztBQUVuQixZQUFVLE1BQU07QUFDWixZQUFRO0FBRVIsZUFBVyxTQUFTLElBQUksT0FBTyxHQUFHO0FBQzlCLE1BQUFBLFFBQU8sS0FBSztBQUFBLElBQ2hCO0FBRUEsUUFBSSxNQUFNO0FBQUEsRUFDZCxDQUFDO0FBRUQsU0FBTztBQUNYOzs7QUN6Rk8sU0FBUyxLQUErQjtBQUFBLEVBQzNDO0FBQUEsRUFDQSxVQUFVO0FBQUEsRUFDVjtBQUNKLEdBQWlDO0FBQzdCLFFBQU0sZUFBZSxTQUFTO0FBQzlCLFFBQU0sV0FBVyxJQUFJLFNBQVk7QUFFakMsTUFBSTtBQUVKLFdBQVMsU0FBUyxHQUFNO0FBQ3BCLGVBQVcsU0FBUyxTQUFTLFVBQVU7QUFDbkMsZUFBUyxZQUFZLEtBQUs7QUFFMUIsVUFBSSxPQUFPLFlBQVksWUFBWTtBQUMvQixnQkFBUSxLQUFLO0FBQUEsTUFDakIsV0FBVyxZQUFZLE1BQU07QUFDekIsWUFBSSxlQUFlLEtBQUs7QUFBQSxNQUM1QjtBQUVBLFVBQUksTUFBTyxPQUFNLFFBQVE7QUFBQSxJQUM3QjtBQUVBLFlBQVEsSUFBSSxNQUFNLFlBQVk7QUFDOUIsVUFBTSxLQUFLLE1BQU0sSUFBSSxNQUFNLFFBQVEsQ0FBQyxDQUFDO0FBQ3JDLFFBQUksT0FBTyxNQUFNLE9BQU8sU0FBUyxPQUFPLFFBQVEsT0FBTyxRQUFXO0FBQzlELGVBQVMsU0FBUyxFQUFFO0FBQUEsSUFDeEI7QUFBQSxFQUNKO0FBRUEsUUFBTSxVQUFVLE1BQU0sVUFBVSxNQUFNO0FBQ2xDLGFBQVMsTUFBTSxJQUFJLENBQUM7QUFBQSxFQUN4QixDQUFDO0FBQ0QsV0FBUyxNQUFNLElBQUksQ0FBQztBQUVwQixZQUFVLE1BQU07QUFDWixVQUFNLFFBQVE7QUFDZCxZQUFRO0FBQUEsRUFDWixDQUFDO0FBRUQsU0FBTztBQUNYOzs7QUNsRUEsT0FBTyxhQUFhO0FBVWIsSUFBTSxVQUFVLFFBQVE7QUFnQ3hCLFNBQVMsS0FBSyxLQUF3QjtBQUN6QyxTQUFPLE1BQU0sUUFBUSxHQUFHLElBQUksUUFBUSxRQUFRLE1BQU0sR0FBRyxJQUFJLFFBQVEsUUFBUSxLQUFLLEdBQUc7QUFDckY7QUFFTyxTQUFTLFVBQVUsS0FBeUM7QUFDL0QsU0FBTyxJQUFJLFFBQVEsQ0FBQyxTQUFTLFdBQVc7QUFDcEMsUUFBSSxNQUFNLFFBQVEsR0FBRyxHQUFHO0FBQ3BCLGNBQVEsUUFBUSxZQUFZLEtBQUssQ0FBQyxHQUFHLFFBQVE7QUFDekMsWUFBSTtBQUNBLGtCQUFRLFFBQVEsUUFBUSxtQkFBbUIsR0FBRyxDQUFDO0FBQUEsUUFDbkQsU0FBUyxPQUFPO0FBQ1osaUJBQU8sS0FBSztBQUFBLFFBQ2hCO0FBQUEsTUFDSixDQUFDO0FBQUEsSUFDTCxPQUFPO0FBQ0gsY0FBUSxRQUFRLFdBQVcsS0FBSyxDQUFDLEdBQUcsUUFBUTtBQUN4QyxZQUFJO0FBQ0Esa0JBQVEsUUFBUSxRQUFRLFlBQVksR0FBRyxDQUFDO0FBQUEsUUFDNUMsU0FBUyxPQUFPO0FBQ1osaUJBQU8sS0FBSztBQUFBLFFBQ2hCO0FBQUEsTUFDSixDQUFDO0FBQUEsSUFDTDtBQUFBLEVBQ0osQ0FBQztBQUNMOzs7QUNsRUEsT0FBTyxXQUFXO0FBQ2xCLE9BQU8sU0FBUztBQUNoQixPQUFPLFNBQVM7OztBQ0RoQixPQUFPQyxVQUFTO0FBQ2hCLE9BQU9DLFlBQVc7OztBQ0ZsQixPQUFPQyxVQUFTO0FBQ2hCLE9BQU9DLFVBQVM7QUFDaEIsT0FBT0MsY0FBYTtBQUlwQixJQUFNLGVBQWUsSUFBSUMsS0FBSSxRQUFRO0FBRXJDLFNBQVMsSUFBSSxRQUF1QixPQUF1QixHQUFXO0FBQ2xFLE1BQUksQ0FBQyxXQUFXLFFBQVEsT0FBTyxDQUFDLEdBQUc7QUFDL0IsV0FBTyxnQkFBZ0IsY0FBYyxPQUFPLFFBQVEsS0FBSyxDQUFDO0FBQUEsRUFDOUQ7QUFDSjtBQUVBLFNBQVMsY0FBYyxTQUF5QixRQUF3QjtBQUVwRSxTQUFPO0FBQ1g7QUFFQSxTQUFTLFdBQVcsUUFBd0IsT0FBdUIsR0FBVztBQUUxRSxNQUNJLGlCQUFpQkEsS0FBSSxjQUNyQixvQkFBb0IsVUFDcEIsT0FBTyxPQUFPLG1CQUFtQixZQUNuQztBQUNFLFdBQU8sZUFBZSxLQUFLO0FBQzNCLFdBQU87QUFBQSxFQUNYO0FBRUEsTUFDSSxpQkFBaUJBLEtBQUksVUFDckIsa0JBQWtCQSxLQUFJLFNBQ3RCLE1BQU0sU0FBUyxNQUNmLE1BQU0sU0FBUyxRQUNmLFFBQVEsS0FBSyxNQUFNLFNBQ3JCO0FBQ0UsV0FBTyxVQUFVLE9BQU8sTUFBTSxJQUFJO0FBQ2xDLFdBQU87QUFBQSxFQUNYO0FBRUEsTUFBSSxpQkFBaUJBLEtBQUksV0FBVyxrQkFBa0JBLEtBQUksWUFBWTtBQUNsRSxXQUFPLFlBQVksS0FBSztBQUN4QixXQUFPO0FBQUEsRUFDWDtBQUVBLE1BQ0ksaUJBQWlCQyxLQUFJLGNBQ3BCLGtCQUFrQkQsS0FBSSxjQUFjLGtCQUFrQkEsS0FBSSxjQUM3RDtBQUNFLFdBQU8sZUFBZSxLQUFLO0FBQzNCLFdBQU87QUFBQSxFQUNYO0FBRUEsTUFBSSxpQkFBaUJDLEtBQUksWUFBWSxrQkFBa0JBLEtBQUksTUFBTTtBQUFBLEVBRWpFO0FBRUEsTUFBSSxpQkFBaUJELEtBQUksVUFBVSxrQkFBa0JBLEtBQUksYUFBYTtBQUNsRSxXQUFPLFdBQVcsS0FBSztBQUN2QixXQUFPO0FBQUEsRUFDWDtBQUVBLE1BQUksaUJBQWlCQSxLQUFJLGNBQWMsa0JBQWtCQSxLQUFJLFVBQVU7QUFDbkUsV0FBTyxXQUFXLEtBQUs7QUFDdkIsV0FBTztBQUFBLEVBQ1g7QUFFQSxTQUFPO0FBQ1g7QUFFQSxTQUFTLE9BQU8sUUFBd0IsT0FBdUI7QUFDM0QsTUFBSSxjQUFjLFFBQVEsS0FBSyxFQUFHO0FBRWxDLE1BQUksZUFBZSxVQUFVLE9BQU8sT0FBTyxhQUFhLFlBQVk7QUFDaEUsV0FBTyxPQUFPLFVBQVUsSUFBSTtBQUFBLEVBQ2hDO0FBRUEsTUFBSSxZQUFZLFVBQVUsT0FBTyxPQUFPLFVBQVUsWUFBWTtBQUMxRCxXQUFPLE9BQU8sT0FBTyxLQUFLO0FBQUEsRUFDOUI7QUFFQSxRQUFNLE1BQU0saUJBQWlCLEtBQUssU0FBUyxNQUFNLEVBQUU7QUFDdkQ7QUFFQSxJQUFNLEVBQUUsVUFBVSxrQkFBa0IsSUFBSSxTQUFTO0FBQUEsRUFDN0MsT0FBTyxRQUFRLEtBQUs7QUFDaEIsUUFBSSxFQUFFLGtCQUFrQkEsS0FBSSxTQUFTO0FBQ2pDLGFBQU8sUUFBUSxLQUFLLE1BQU0scUJBQXFCLE1BQU0sRUFBRSxDQUFDO0FBQUEsSUFDNUQ7QUFFQSxVQUFNLE1BQU0sT0FBTyxrQkFBa0I7QUFDckMsUUFBSTtBQUVKLFVBQU0sU0FBUyxDQUFDRSxTQUFnQjtBQUM1QixVQUFJLENBQUNBLEtBQUksU0FBUyxHQUFHLEtBQUssQ0FBQ0EsS0FBSSxTQUFTLEdBQUcsR0FBRztBQUMxQyxRQUFBQSxPQUFNLE9BQU9BLElBQUc7QUFBQSxNQUNwQjtBQUVBLFVBQUksU0FBVSxLQUFJLGdCQUFnQixRQUFRO0FBRTFDLGlCQUFXLElBQUlGLEtBQUksWUFBWTtBQUMvQixlQUFTLGlCQUFpQkUsSUFBRztBQUM3QixVQUFJLGFBQWEsVUFBVUYsS0FBSSw0QkFBNEI7QUFBQSxJQUMvRDtBQUVBLFFBQUksZUFBZSxVQUFVO0FBQ3pCLGFBQU8sSUFBSSxJQUFJLENBQUM7QUFDaEIsWUFBTSxVQUFVLElBQUksVUFBVSxNQUFNLE9BQU8sSUFBSSxJQUFJLENBQUMsQ0FBQztBQUNyRCxnQkFBVSxPQUFPO0FBQUEsSUFDckIsT0FBTztBQUNILGFBQU8sR0FBRztBQUFBLElBQ2Q7QUFBQSxFQUNKO0FBQUEsRUFDQSxTQUFTLFFBQVEsV0FBVztBQUN4QixRQUFJLEVBQUUsa0JBQWtCQSxLQUFJLFNBQVM7QUFDakMsYUFBTyxRQUFRLEtBQUssTUFBTSwyQkFBMkIsTUFBTSxFQUFFLENBQUM7QUFBQSxJQUNsRTtBQUVBLFFBQUkscUJBQXFCLFVBQVU7QUFDL0IsYUFBTyxhQUFhLFVBQVUsSUFBSSxFQUFFLE1BQU0sS0FBSztBQUMvQyxZQUFNLFVBQVUsVUFBVTtBQUFBLFFBQ3RCLE1BQU8sT0FBTyxhQUFhLFVBQVUsSUFBSSxFQUFFLE1BQU0sS0FBSztBQUFBLE1BQzFEO0FBQ0EsZ0JBQVUsT0FBTztBQUFBLElBQ3JCLE9BQU87QUFDSCxhQUFPLGdCQUFnQixVQUFVLE1BQU0sS0FBSyxDQUFDO0FBQUEsSUFDakQ7QUFBQSxFQUNKO0FBQUEsRUFDQSxTQUFTLFFBQVEsT0FBTyxRQUFRLElBQUk7QUFDaEMsUUFBSSxFQUFFLGlCQUFpQkcsU0FBUSxTQUFTO0FBQ3BDLGNBQVFILEtBQUksTUFBTSxJQUFJLE9BQU8sS0FBSyxDQUFDO0FBQUEsSUFDdkM7QUFFQSxRQUFJLFdBQVcsUUFBUSxPQUFPLEtBQUssRUFBRztBQUV0QyxRQUFJLGtCQUFrQixVQUFVO0FBQzVCLGFBQU8sU0FBUyxLQUFLO0FBQ3JCO0FBQUEsSUFDSjtBQUVBLFFBQUksa0JBQWtCQSxLQUFJLFdBQVc7QUFDakMsVUFBSSxpQkFBaUIsVUFBVTtBQUMzQixtQkFBVyxNQUFNLE1BQU0sVUFBVTtBQUM3QixjQUFJLFFBQVEsSUFBSSxLQUFLO0FBQUEsUUFDekI7QUFFQSxjQUFNLFFBQVEsZUFBZSxDQUFDLEdBQUcsSUFBYUksV0FBa0I7QUFDNUQsY0FBSSxFQUFFLGNBQWNELFNBQVEsU0FBUztBQUNqQyxvQkFBUSxNQUFNLFVBQVUsY0FBYyxFQUFFLE9BQU8sTUFBTSxFQUFFLENBQUM7QUFDeEQ7QUFBQSxVQUNKO0FBQ0EsbUJBQVMsUUFBUSxJQUFJQyxNQUFLO0FBQUEsUUFDOUIsQ0FBQztBQUVELGNBQU0sUUFBUSxpQkFBaUIsQ0FBQyxHQUFHLE9BQWdCO0FBQy9DLGNBQUksRUFBRSxjQUFjRCxTQUFRLFNBQVM7QUFDakMsb0JBQVEsTUFBTSxVQUFVLGlCQUFpQixFQUFFLFNBQVMsTUFBTSxFQUFFLENBQUM7QUFDN0Q7QUFBQSxVQUNKO0FBQ0EsaUJBQU8sUUFBUSxFQUFFO0FBQUEsUUFDckIsQ0FBQztBQUVELGtCQUFVLE1BQU0sTUFBTSxRQUFRLENBQUM7QUFDL0I7QUFBQSxNQUNKO0FBRUEsVUFBSSxRQUFRLE9BQU8sS0FBSztBQUN4QjtBQUFBLElBQ0o7QUFFQSxVQUFNLE1BQU0sY0FBYyxLQUFLLE9BQU8sTUFBTSxFQUFFO0FBQUEsRUFDbEQ7QUFDSixDQUFDOzs7QURyS0QsT0FBTyxPQUFPLG1CQUFtQjtBQUFBLEVBQzdCLEtBQUtFLEtBQUk7QUFBQSxFQUNULFFBQVFBLEtBQUk7QUFBQSxFQUNaLFdBQVdBLEtBQUk7QUFBQTtBQUFBLEVBRWYsYUFBYUEsS0FBSTtBQUFBLEVBQ2pCLE9BQU9BLEtBQUk7QUFBQSxFQUNYLE9BQU9BLEtBQUk7QUFBQSxFQUNYLE9BQU9BLEtBQUk7QUFBQSxFQUNYLFVBQVVBLEtBQUk7QUFBQSxFQUNkLFlBQVlBLEtBQUk7QUFBQSxFQUNoQixTQUFTQSxLQUFJO0FBQUEsRUFDYixTQUFTQSxLQUFJO0FBQUEsRUFDYixVQUFVQSxLQUFJO0FBQUEsRUFDZCxnQkFBZ0JBLEtBQUk7QUFBQSxFQUNwQixRQUFRQyxPQUFNO0FBQUEsRUFDZCxPQUFPRCxLQUFJO0FBQUEsRUFDWCxRQUFRQSxLQUFJO0FBQUEsRUFDWixjQUFjQSxLQUFJO0FBQUEsRUFDbEIsUUFBUUMsT0FBTTtBQUNsQixDQUFDOzs7QUViYyxTQUFSLGVBQWdDO0FBQUEsRUFDdEM7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFDRCxHQUFVO0FBQ1QsUUFBTSxDQUFDLFFBQVEsU0FBUyxJQUFJLFlBQTJCLElBQUk7QUFDM0QsUUFBTSxDQUFDLFNBQVMsVUFBVSxJQUFJLFlBQXNCLENBQUMsQ0FBQztBQUV0RCxTQUFPLFVBQVUsTUFBTTtBQUN0QixRQUFJLENBQUMsT0FBTyxJQUFJLEtBQUssQ0FBQyxRQUFRLElBQUksRUFBRztBQUVyQyxlQUFXLENBQUMsQ0FBQztBQUNiLGNBQVUsSUFBSTtBQUNkLFVBQU07QUFBQSxFQUNQLENBQUM7QUFFRCxlQUFhLFVBQVUsTUFBTTtBQUM1QixRQUFJLENBQUMsYUFBYSxJQUFJLEtBQUssQ0FBQyxRQUFRLElBQUksRUFBRztBQUUzQyxVQUFNLE1BQU0sT0FBTyxJQUFJO0FBQ3ZCLFVBQU0sY0FBYyxRQUFRLElBQUk7QUFFaEMsUUFBSSxDQUFDLE9BQU8sWUFBWSxDQUFDLE1BQU0sSUFBSyxRQUFPLFlBQVk7QUFFdkQsZUFBVyxDQUFDLFNBQVMsQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO0FBQ25DLGdCQUFZO0FBQ1osY0FBVSxJQUFJO0FBQUEsRUFDZixDQUFDO0FBRUQsYUFBVyxVQUFVLE1BQU07QUFDMUIsUUFBSSxDQUFDLFFBQVEsSUFBSSxFQUFHO0FBRXBCLFVBQU0sVUFBVSxXQUFXLElBQUk7QUFFL0IsUUFBSSxDQUFDLFFBQVM7QUFFZCxRQUFJLFFBQVEsV0FBVyxJQUFJLFlBQVk7QUFDdEMsaUJBQVcsQ0FBQyxDQUFDO0FBQ2IsZ0JBQVUsSUFBSTtBQUNkLFlBQU07QUFFTjtBQUFBLElBQ0Q7QUFBQSxFQUNELENBQUM7QUFFRCxVQUFRLFVBQVUsTUFBTTtBQUN2QixRQUFJLFFBQVEsSUFBSSxFQUFHLFdBQVUsaUJBQWlCO0FBQUEsRUFDL0MsQ0FBQztBQUVELGNBQVksVUFBVSxNQUFNO0FBQzNCLFFBQUksQ0FBQyxRQUFRLElBQUksRUFBRztBQUVwQixVQUFNLFFBQVEsWUFBWSxJQUFJO0FBQzlCLFFBQUksQ0FBQyxNQUFPO0FBRVosUUFBSSxNQUFNO0FBRVYsUUFBSTtBQUNILFlBQU0sS0FBSyxRQUFRLEtBQUssRUFBRTtBQUFBLElBQzNCLFNBQVMsSUFBSTtBQUFBLElBQUM7QUFFZCxjQUFVLElBQUksS0FBSyxDQUFDO0FBQUEsRUFDckIsQ0FBQztBQUVELFNBQ0M7QUFBQSxJQUFDO0FBQUE7QUFBQSxNQUNBLGFBQWEsSUFBSSxZQUFZO0FBQUEsTUFDN0I7QUFBQSxNQUNBLE9BQU07QUFBQSxNQUVOO0FBQUE7QUFBQSxVQUFDO0FBQUE7QUFBQSxZQUNBLE9BQU8sT0FBTyxDQUFDLFFBQVEsT0FBTyxFQUFFO0FBQUEsWUFDaEMsUUFBUSxJQUFJLE1BQU07QUFBQSxZQUNsQixPQUFNO0FBQUE7QUFBQSxRQUNQO0FBQUEsUUFFQSxvQkFBQyxJQUFJLFdBQUosRUFBYyxTQUFPLE1BQUMsT0FBTSx3QkFBdUI7QUFBQSxRQUVwRCxvQkFBQyxPQUFJLE1BQU0sU0FDVCxXQUFDLGlCQUNELG9CQUFDLFdBQU0sUUFBUSxJQUFJLE1BQU0sT0FBTyxPQUFPLGNBQWMsR0FFdkQ7QUFBQTtBQUFBO0FBQUEsRUFDRDtBQUVGOzs7QUN2R0EsT0FBT0MsV0FBVTtBQUVWLElBQU0sT0FBT0EsTUFBSyxPQUFPLE1BQU07QUFFL0IsSUFBTSxpQkFBa0M7QUFBQSxFQUM5QztBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUNEO0FBRU8sSUFBTSxlQUFlLEdBQUcsSUFBSTtBQUM1QixJQUFNLGlCQUFpQixHQUFHLFlBQVk7QUFFdEMsSUFBTSxnQkFBZ0I7QUFBQSxFQUM1QixPQUFPO0FBQUEsSUFDTixpQkFBaUI7QUFBQSxJQUNqQixrQkFBa0I7QUFBQTtBQUFBLElBQ2xCLFlBQVksR0FBRyxJQUFJO0FBQUEsSUFDbkIsY0FBYyxHQUFHLFlBQVk7QUFBQSxFQUM5QjtBQUFBLEVBQ0EsWUFBWTtBQUFBLElBQ1gsT0FBTztBQUFBO0FBQUEsSUFDUCxZQUFZO0FBQUE7QUFBQSxJQUNaLFNBQVM7QUFBQTtBQUFBLEVBQ1Y7QUFBQSxFQUNBLG9CQUFvQjtBQUFBLElBQ25CLGNBQWM7QUFBQTtBQUFBLElBQ2QsVUFBVTtBQUFBO0FBQUEsSUFDVixvQkFBb0I7QUFBQTtBQUFBLElBQ3BCLEtBQUs7QUFBQTtBQUFBLElBQ0wsYUFBYTtBQUFBO0FBQUEsRUFDZDtBQUFBLEVBQ0EsZ0JBQWdCO0FBQUEsSUFDZixjQUFjO0FBQUEsSUFDZCxVQUFVO0FBQUEsSUFDVixvQkFBb0I7QUFBQSxJQUNwQixLQUFLO0FBQUEsSUFDTCxhQUFhO0FBQUEsRUFDZDtBQUFBLEVBQ0EsVUFBVTtBQUFBLElBQ1QsS0FBSztBQUFBO0FBQUEsSUFDTCwyQkFBMkI7QUFBQTtBQUFBLEVBQzVCO0FBQUEsRUFDQSxhQUFhO0FBQUEsSUFDWixhQUFhO0FBQUE7QUFBQSxJQUNiLGNBQWM7QUFBQTtBQUFBLElBQ2QsV0FBVztBQUFBO0FBQUEsRUFDWjtBQUFBLEVBQ0EsZ0JBQWdCO0FBQUEsRUFDaEIsMkJBQTJCO0FBQzVCOzs7QUMxREEsT0FBT0MsWUFBVztBQUdYLFNBQVMsU0FBUyxNQUFzQjtBQUMzQyxTQUFPQSxPQUFNLFVBQVUsSUFBSSxLQUFLO0FBQ3BDO0FBRU8sU0FBUyxjQUFjLE1BQStCO0FBQ3pELFNBQU8sSUFBSSxRQUFRLENBQUMsU0FBUyxXQUFXO0FBQ3BDLElBQUFBLE9BQU0sZ0JBQWdCLE1BQU0sQ0FBQyxHQUFHLFFBQVE7QUFDcEMsVUFBSTtBQUNBLGdCQUFRQSxPQUFNLGlCQUFpQixHQUFHLEtBQUssRUFBRTtBQUFBLE1BQzdDLFNBQVMsT0FBTztBQUNaLGVBQU8sS0FBSztBQUFBLE1BQ2hCO0FBQUEsSUFDSixDQUFDO0FBQUEsRUFDTCxDQUFDO0FBQ0w7QUFFTyxTQUFTLFVBQVUsTUFBYyxTQUF1QjtBQUMzRCxFQUFBQSxPQUFNLFdBQVcsTUFBTSxPQUFPO0FBQ2xDO0FBY08sU0FBUyxZQUNaLE1BQ0EsVUFDZTtBQUNmLFNBQU9DLE9BQU0sYUFBYSxNQUFNLENBQUMsTUFBYyxVQUFnQztBQUMzRSxhQUFTLE1BQU0sS0FBSztBQUFBLEVBQ3hCLENBQUM7QUFDTDs7O0FDMUNBLE9BQU9DLFdBQVU7QUFFVixTQUFTLFdBQVcsTUFBYyxNQUFNLE9BQU87QUFDckQsTUFBSTtBQUNILFdBQU9BLE1BQUs7QUFBQSxNQUNYO0FBQUEsTUFDQUEsTUFBSyxTQUFTLFNBQVNBLE1BQUssU0FBUztBQUFBLElBQ3RDO0FBRUQsU0FBT0EsTUFBSyxVQUFVLE1BQU1BLE1BQUssU0FBUyxNQUFNO0FBQ2pEOzs7QUNOQSxPQUFPQyxVQUFTO0FBT1QsSUFBTSxDQUFDLFFBQVEsU0FBUyxJQUFJLFlBQW9CLGFBQWE7QUFFcEUsSUFBSSxXQUFXLGNBQWMsR0FBRztBQUMvQixlQUFhO0FBQ2Q7QUFFQSxZQUFZLGdCQUFnQixDQUFDLEdBQUcsVUFBVTtBQUN6QyxNQUFJLFVBQVVDLEtBQUksaUJBQWlCLFNBQVM7QUFDM0MsWUFBUSxJQUFJLHNDQUFzQztBQUVsRCxpQkFBYTtBQUFBLEVBQ2Q7QUFFQSxNQUFJLFVBQVVBLEtBQUksaUJBQWlCLFNBQVM7QUFDM0MsWUFBUSxLQUFLLCtDQUErQztBQUU1RCxjQUFVLGFBQWE7QUFBQSxFQUN4QjtBQUVBLE1BQUksVUFBVUEsS0FBSSxpQkFBaUIsU0FBUztBQUMzQyxZQUFRLElBQUksc0NBQXNDO0FBRWxELGlCQUFhO0FBQUEsRUFDZDtBQUNELENBQUM7QUFFRCxTQUFTLGVBQWU7QUFDdkIsUUFBTSxPQUFPLFNBQVMsY0FBYztBQUVwQyxNQUFJO0FBQ0gsVUFBTSxhQUE4QixLQUFLLE1BQU0sSUFBSTtBQUVuRCxRQUFJLENBQUMsZUFBZSxVQUFVLEVBQUc7QUFFakMsY0FBVSxVQUFVO0FBQUEsRUFDckIsU0FBUyxHQUFHO0FBQ1gsWUFBUSxNQUFNLDBDQUEwQyxDQUFDO0FBQUEsRUFDMUQ7QUFDRDtBQUVBLFNBQVMsZUFBZUMsU0FBa0M7QUFDekQsTUFDQ0EsUUFBTyxPQUFPLG9CQUNiLENBQUNBLFFBQU8sT0FBTyxnQkFBZ0IsV0FBVyxHQUFHLEtBQzdDLENBQUNBLFFBQU8sTUFBTSxnQkFBZ0IsU0FBUyxPQUFPLElBQzlDO0FBQ0QsWUFBUTtBQUFBLE1BQ1A7QUFBQSxNQUNBQSxRQUFPLE9BQU87QUFBQSxJQUNmO0FBQ0EsV0FBTztBQUFBLEVBQ1I7QUFFQSxNQUNDQSxRQUFPLE9BQU8scUJBQ2IsQ0FBQ0EsUUFBTyxNQUFNLGlCQUFpQixXQUFXLEdBQUcsS0FDN0MsQ0FBQyxXQUFXQSxRQUFPLE1BQU0sa0JBQWtCLElBQUksSUFDL0M7QUFDRCxZQUFRO0FBQUEsTUFDUDtBQUFBLE1BQ0FBLFFBQU8sTUFBTTtBQUFBLElBQ2Q7QUFDQSxXQUFPO0FBQUEsRUFDUjtBQUVBLE1BQUlBLFFBQU8sT0FBTyxjQUFjLENBQUNBLFFBQU8sTUFBTSxXQUFXLFdBQVcsR0FBRyxHQUFHO0FBQ3pFLFlBQVE7QUFBQSxNQUNQO0FBQUEsTUFDQUEsUUFBTyxNQUFNO0FBQUEsSUFDZDtBQUNBLFdBQU87QUFBQSxFQUNSO0FBRUEsTUFDQ0EsUUFBTyxZQUFZLFVBQ2xCQSxRQUFPLFdBQVcsUUFBUSxLQUFLQSxRQUFPLFdBQVcsUUFBUSxJQUN6RDtBQUNELFlBQVE7QUFBQSxNQUNQO0FBQUEsTUFDQUEsUUFBTyxXQUFXO0FBQUEsSUFDbkI7QUFDQSxXQUFPO0FBQUEsRUFDUjtBQUVBLE1BQ0NBLFFBQU8sWUFBWSxlQUNsQkEsUUFBTyxXQUFXLGFBQWEsS0FBS0EsUUFBTyxXQUFXLGFBQWEsSUFDbkU7QUFDRCxZQUFRO0FBQUEsTUFDUDtBQUFBLE1BQ0FBLFFBQU8sV0FBVztBQUFBLElBQ25CO0FBQ0EsV0FBTztBQUFBLEVBQ1I7QUFFQSxNQUNDQSxRQUFPLFlBQVksWUFDbEJBLFFBQU8sV0FBVyxVQUFVLEtBQUtBLFFBQU8sV0FBVyxVQUFVLElBQzdEO0FBQ0QsWUFBUTtBQUFBLE1BQ1A7QUFBQSxNQUNBQSxRQUFPLFdBQVc7QUFBQSxJQUNuQjtBQUNBLFdBQU87QUFBQSxFQUNSO0FBRUEsTUFDQ0EsUUFBTyxvQkFBb0IsZ0JBQzNCQSxRQUFPLG1CQUFtQixlQUFlLEdBQ3hDO0FBQ0QsWUFBUTtBQUFBLE1BQ1A7QUFBQSxNQUNBQSxRQUFPLG1CQUFtQjtBQUFBLElBQzNCO0FBQ0EsV0FBTztBQUFBLEVBQ1I7QUFFQSxNQUNDQSxRQUFPLG9CQUFvQixZQUMzQkEsUUFBTyxtQkFBbUIsV0FBVyxHQUNwQztBQUNELFlBQVE7QUFBQSxNQUNQO0FBQUEsTUFDQUEsUUFBTyxtQkFBbUI7QUFBQSxJQUMzQjtBQUNBLFdBQU87QUFBQSxFQUNSO0FBRUEsTUFDQ0EsUUFBTyxvQkFBb0Isc0JBQzNCQSxRQUFPLG1CQUFtQixxQkFBcUIsR0FDOUM7QUFDRCxZQUFRO0FBQUEsTUFDUDtBQUFBLE1BQ0FBLFFBQU8sbUJBQW1CO0FBQUEsSUFDM0I7QUFDQSxXQUFPO0FBQUEsRUFDUjtBQUVBLE1BQUlBLFFBQU8sb0JBQW9CLE9BQU9BLFFBQU8sbUJBQW1CLE1BQU0sR0FBRztBQUN4RSxZQUFRO0FBQUEsTUFDUDtBQUFBLE1BQ0FBLFFBQU8sbUJBQW1CO0FBQUEsSUFDM0I7QUFDQSxXQUFPO0FBQUEsRUFDUjtBQUVBLE1BQ0NBLFFBQU8sb0JBQW9CLGVBQzNCQSxRQUFPLG1CQUFtQixjQUFjLEdBQ3ZDO0FBQ0QsWUFBUTtBQUFBLE1BQ1A7QUFBQSxNQUNBQSxRQUFPLG1CQUFtQjtBQUFBLElBQzNCO0FBQ0EsV0FBTztBQUFBLEVBQ1I7QUFFQSxNQUNDQSxRQUFPLGdCQUFnQixnQkFDdkIsQ0FBQyxlQUFlLFNBQVNBLFFBQU8sZUFBZSxZQUFZLEdBQzFEO0FBQ0QsWUFBUTtBQUFBLE1BQ1AsMkRBQTJELGVBQWUsSUFBSSxDQUFDLFNBQVMsSUFBSSxJQUFJLEdBQUcsRUFBRSxLQUFLLElBQUksQ0FBQztBQUFBLE1BQy9HQSxRQUFPLGVBQWU7QUFBQSxJQUN2QjtBQUNBLFdBQU87QUFBQSxFQUNSO0FBRUEsTUFDQ0EsUUFBTyxnQkFBZ0IsWUFDdkIsQ0FBQyxlQUFlLFNBQVNBLFFBQU8sZUFBZSxRQUFRLEdBQ3REO0FBQ0QsWUFBUTtBQUFBLE1BQ1AsdURBQXVELGVBQWUsSUFBSSxDQUFDLFNBQVMsSUFBSSxJQUFJLEdBQUcsRUFBRSxLQUFLLElBQUksQ0FBQztBQUFBLE1BQzNHQSxRQUFPLGVBQWU7QUFBQSxJQUN2QjtBQUNBLFdBQU87QUFBQSxFQUNSO0FBRUEsTUFDQ0EsUUFBTyxnQkFBZ0Isc0JBQ3ZCLENBQUMsZUFBZSxTQUFTQSxRQUFPLGVBQWUsa0JBQWtCLEdBQ2hFO0FBQ0QsWUFBUTtBQUFBLE1BQ1AsaUVBQWlFLGVBQWUsSUFBSSxDQUFDLFNBQVMsSUFBSSxJQUFJLEdBQUcsRUFBRSxLQUFLLElBQUksQ0FBQztBQUFBLE1BQ3JIQSxRQUFPLGVBQWU7QUFBQSxJQUN2QjtBQUNBLFdBQU87QUFBQSxFQUNSO0FBRUEsTUFDQ0EsUUFBTyxnQkFBZ0IsT0FDdkIsQ0FBQyxlQUFlLFNBQVNBLFFBQU8sZUFBZSxHQUFHLEdBQ2pEO0FBQ0QsWUFBUTtBQUFBLE1BQ1Asa0RBQWtELGVBQWUsSUFBSSxDQUFDLFNBQVMsSUFBSSxJQUFJLEdBQUcsRUFBRSxLQUFLLElBQUksQ0FBQztBQUFBLE1BQ3RHQSxRQUFPLGVBQWU7QUFBQSxJQUN2QjtBQUNBLFdBQU87QUFBQSxFQUNSO0FBRUEsTUFDQ0EsUUFBTyxnQkFBZ0IsZUFDdkIsQ0FBQyxlQUFlLFNBQVNBLFFBQU8sZUFBZSxXQUFXLEdBQ3pEO0FBQ0QsWUFBUTtBQUFBLE1BQ1AsMERBQTBELGVBQWUsSUFBSSxDQUFDLFNBQVMsSUFBSSxJQUFJLEdBQUcsRUFBRSxLQUFLLElBQUksQ0FBQztBQUFBLE1BQzlHQSxRQUFPLGVBQWU7QUFBQSxJQUN2QjtBQUNBLFdBQU87QUFBQSxFQUNSO0FBRUEsTUFBSUEsUUFBTyxVQUFVLE9BQU9BLFFBQU8sU0FBUyxNQUFNLEdBQUc7QUFDcEQsWUFBUTtBQUFBLE1BQ1A7QUFBQSxNQUNBQSxRQUFPLFNBQVM7QUFBQSxJQUNqQjtBQUNBLFdBQU87QUFBQSxFQUNSO0FBRUEsTUFDQ0EsUUFBTyxVQUFVLDZCQUNqQkEsUUFBTyxTQUFTLDRCQUE0QixHQUMzQztBQUNELFlBQVE7QUFBQSxNQUNQO0FBQUEsTUFDQUEsUUFBTyxTQUFTO0FBQUEsSUFDakI7QUFDQSxXQUFPO0FBQUEsRUFDUjtBQUVBLE1BQ0MsT0FBT0EsUUFBTyxhQUFhLGdCQUFnQixZQUMzQ0EsUUFBTyxZQUFZLGVBQWUsR0FDakM7QUFDRCxZQUFRO0FBQUEsTUFDUDtBQUFBLE1BQ0FBLFFBQU8sWUFBWTtBQUFBLElBQ3BCO0FBQ0EsV0FBTztBQUFBLEVBQ1I7QUFFQSxNQUNDLE9BQU9BLFFBQU8sYUFBYSxpQkFBaUIsWUFDNUNBLFFBQU8sWUFBWSxnQkFBZ0IsR0FDbEM7QUFDRCxZQUFRO0FBQUEsTUFDUDtBQUFBLE1BQ0FBLFFBQU8sWUFBWTtBQUFBLElBQ3BCO0FBQ0EsV0FBTztBQUFBLEVBQ1I7QUFFQSxNQUNDLE9BQU9BLFFBQU8sYUFBYSxjQUFjLFlBQ3pDQSxRQUFPLFlBQVksYUFBYSxHQUMvQjtBQUNELFlBQVE7QUFBQSxNQUNQO0FBQUEsTUFDQUEsUUFBTyxZQUFZO0FBQUEsSUFDcEI7QUFDQSxXQUFPO0FBQUEsRUFDUjtBQUVBLE1BQUlBLFFBQU8sa0JBQWtCQSxRQUFPLGtCQUFrQixHQUFHO0FBQ3hELFlBQVE7QUFBQSxNQUNQO0FBQUEsTUFDQUEsUUFBTztBQUFBLElBQ1I7QUFDQSxXQUFPO0FBQUEsRUFDUjtBQUVBLE1BQ0NBLFFBQU8sNkJBQ1BBLFFBQU8sNEJBQTRCLEtBQ2xDO0FBQ0QsWUFBUTtBQUFBLE1BQ1A7QUFBQSxNQUNBQSxRQUFPO0FBQUEsSUFDUjtBQUNBLFdBQU87QUFBQSxFQUNSO0FBRUEsU0FBTztBQUNSOzs7QUN0U08sU0FBUyxPQUFPLE1BQXNCO0FBQzVDLFFBQU0sWUFBWSxJQUFJLFVBQVUsZ0JBQWdCLElBQUksUUFBUSxZQUFZLENBQUU7QUFFMUUsU0FBTyxRQUFRLFVBQVUsU0FBUyxJQUFJO0FBQ3ZDOzs7QUNLZSxTQUFSLElBQXFCLEVBQUUsS0FBSyxTQUFTLE9BQU8sR0FBVTtBQUM1RCxXQUFTLGtCQUFrQjtBQUMxQixXQUFPO0FBQUEsRUFDUjtBQUVBLFNBQ0M7QUFBQSxJQUFDO0FBQUE7QUFBQSxNQUNBLGFBQWEsSUFBSSxZQUFZO0FBQUEsTUFDN0IsT0FBTztBQUFBLFFBQVEsQ0FBQyxjQUNmLFlBQVksd0JBQXdCO0FBQUEsTUFDckM7QUFBQSxNQUNBLFFBQVEsSUFBSSxPQUFPLGNBQWMsV0FBVyxJQUFJO0FBQUEsTUFFaEQ7QUFBQTtBQUFBLFVBQUMsSUFBSTtBQUFBLFVBQUo7QUFBQSxZQUNBLFFBQVEsSUFBSTtBQUFBLFlBQ1osV0FBVztBQUFBO0FBQUEsUUFDWjtBQUFBLFNBRUUsSUFBSSxZQUFZLE9BQU8sSUFBSSxLQUFLLE1BQ2pDO0FBQUEsVUFBQztBQUFBO0FBQUEsWUFDQSxPQUFNO0FBQUEsWUFDTixTQUFTLFFBQVEsSUFBSSxZQUFZLElBQUksS0FBSztBQUFBLFlBQzFDLFVBQVUsSUFBSSxZQUFZLElBQUk7QUFBQSxZQUM5QixXQUFXO0FBQUE7QUFBQSxRQUNaO0FBQUEsUUFHRDtBQUFBLFVBQUM7QUFBQTtBQUFBLFlBQ0EsYUFBYSxJQUFJLFlBQVk7QUFBQSxZQUM3QixPQUFNO0FBQUEsWUFDTixRQUFRLElBQUksTUFBTTtBQUFBLFlBRWxCO0FBQUE7QUFBQSxnQkFBQztBQUFBO0FBQUEsa0JBQ0EsT0FBTyxJQUFJO0FBQUEsa0JBQ1gsT0FBTTtBQUFBLGtCQUNOLFFBQVEsSUFBSSxNQUFNO0FBQUE7QUFBQSxjQUNuQjtBQUFBLGNBRUMsSUFBSSxlQUNKO0FBQUEsZ0JBQUM7QUFBQTtBQUFBLGtCQUNBLE9BQU8sSUFBSTtBQUFBLGtCQUNYLE9BQU07QUFBQSxrQkFDTixRQUFRLElBQUksTUFBTTtBQUFBO0FBQUEsY0FDbkI7QUFBQTtBQUFBO0FBQUEsUUFFRjtBQUFBO0FBQUE7QUFBQSxFQUNEO0FBRUY7OztBQ3ZEQSxPQUFPLFVBQVU7QUFZRixTQUFSLFFBQXlCO0FBQUEsRUFDL0I7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFDRCxHQUFVO0FBQ1QsUUFBTSxPQUFPLElBQUksS0FBSyxLQUFLO0FBQUEsSUFDMUIsZ0JBQWdCO0FBQUEsSUFDaEIsaUJBQWlCO0FBQUEsSUFDakIsc0JBQXNCO0FBQUEsRUFDdkIsQ0FBQztBQUVELFFBQU0sQ0FBQyxZQUFZLGFBQWEsSUFBSSxZQUFZLENBQUM7QUFFakQsU0FBTyxVQUFVLE1BQU07QUFDdEIsUUFBSSxDQUFDLE9BQU8sSUFBSSxLQUFLLENBQUMsUUFBUSxJQUFJLEVBQUc7QUFFckMsVUFBTTtBQUNOLGVBQVcsS0FBSyxTQUFTLENBQUM7QUFBQSxFQUMzQixDQUFDO0FBRUQsZUFBYSxVQUFVLE1BQU07QUFDNUIsUUFBSSxDQUFDLGFBQWEsSUFBSSxLQUFLLENBQUMsUUFBUSxJQUFJLEVBQUc7QUFFM0MscUJBQWlCO0FBQUEsRUFDbEIsQ0FBQztBQUVELGFBQVcsVUFBVSxNQUFNO0FBQzFCLFFBQUksQ0FBQyxRQUFRLElBQUksRUFBRztBQUVwQixVQUFNLFVBQVUsV0FBVyxJQUFJO0FBRS9CLFFBQUksQ0FBQyxRQUFTO0FBRWQsU0FDRSxRQUFRLFdBQVcsSUFBSSxZQUN2QixRQUFRLFdBQVcsSUFBSSxZQUN4QixRQUFRLElBQUksRUFBRSxTQUFTLFdBQVcsSUFBSSxHQUNyQztBQUNELG9CQUFjLENBQUMsU0FBUyxPQUFPLENBQUM7QUFDaEM7QUFBQSxJQUNEO0FBRUEsUUFDQyxRQUFRLFdBQVcsSUFBSSxVQUN2QixRQUFRLFdBQVcsSUFBSSxrQkFDdEI7QUFDRCxVQUFJLFdBQVcsSUFBSSxJQUFJLEVBQUcsZUFBYyxDQUFDLFNBQVMsT0FBTyxDQUFDO0FBQzFEO0FBQUEsSUFDRDtBQUVBLFFBQUksUUFBUSxXQUFXLElBQUksWUFBWTtBQUN0QyxZQUFNO0FBQ04saUJBQVcsS0FBSyxTQUFTLENBQUM7QUFDMUI7QUFBQSxJQUNEO0FBRUEsVUFBTSxRQUFRLFFBQVEsV0FBVyxJQUFJLGFBQWE7QUFFbEQsVUFBTSxhQUFhO0FBQUEsTUFDbEIsSUFBSTtBQUFBLE1BQ0osSUFBSTtBQUFBLE1BQ0osSUFBSTtBQUFBLE1BQ0osSUFBSTtBQUFBLE1BQ0osSUFBSTtBQUFBLE1BQ0osSUFBSTtBQUFBLE1BQ0osSUFBSTtBQUFBLE1BQ0osSUFBSTtBQUFBLE1BQ0osSUFBSTtBQUFBLE1BQ0osSUFBSTtBQUFBLElBQ0w7QUFFQSxRQUFJLFNBQVMsV0FBVyxTQUFTLFFBQVEsTUFBTSxHQUFHO0FBQ2pELFlBQU0sUUFBUSxXQUFXLFFBQVEsUUFBUSxNQUFNO0FBRS9DLFVBQUksVUFBVSxNQUFNLFNBQVMsUUFBUSxJQUFJLEVBQUUsUUFBUTtBQUNsRCxjQUFNO0FBQ04sbUJBQVcsS0FBSyxTQUFTLENBQUM7QUFDMUI7QUFBQSxNQUNEO0FBRUEsY0FBUSxJQUFJLEVBQUUsS0FBSyxFQUFFLE9BQU87QUFDNUIsWUFBTTtBQUNOLGlCQUFXLEtBQUssU0FBUyxDQUFDO0FBQzFCO0FBQUEsSUFDRDtBQUVBLFFBQUksUUFBUSxXQUFXLElBQUksWUFBWTtBQUN0Qyx1QkFBaUI7QUFDakI7QUFBQSxJQUNEO0FBRUEsUUFBSSxRQUFRLFdBQVcsSUFBSSxpQkFBaUIsT0FBTztBQUNsRCxZQUFNLE9BQU8sTUFBTTtBQUVuQixVQUFJLEtBQUssU0FBUyxHQUFHO0FBQ3BCLGNBQU0sTUFBTSxNQUFNLGFBQWE7QUFDL0IsWUFBSSxNQUFNLEdBQUc7QUFDWixnQkFBTSxVQUNMLE1BQU0sS0FBSyxNQUFNLEdBQUcsTUFBTSxDQUFDLElBQUksTUFBTSxLQUFLLE1BQU0sR0FBRztBQUVwRCxnQkFBTSxTQUFTLE9BQU87QUFDdEIsZ0JBQU0sV0FBVztBQUNqQixnQkFBTSxhQUFhLE1BQU0sQ0FBQztBQUFBLFFBQzNCO0FBQUEsTUFDRDtBQUVBO0FBQUEsSUFDRDtBQUVBLFFBQUksUUFBUSxXQUFXLElBQUksY0FBYyxPQUFPO0FBQy9DLFlBQU0sT0FBTyxNQUFNO0FBRW5CLFVBQUksS0FBSyxTQUFTLEdBQUc7QUFDcEIsY0FBTSxNQUFNLE1BQU0sYUFBYTtBQUMvQixZQUFJLE1BQU0sR0FBRztBQUNaLGdCQUFNLFVBQ0wsTUFBTSxLQUFLLE1BQU0sR0FBRyxHQUFHLElBQUksTUFBTSxLQUFLLE1BQU0sTUFBTSxDQUFDO0FBRXBELGdCQUFNLFNBQVMsT0FBTztBQUN0QixnQkFBTSxXQUFXO0FBQ2pCLGdCQUFNLGFBQWEsR0FBRztBQUFBLFFBQ3ZCO0FBQUEsTUFDRDtBQUVBO0FBQUEsSUFDRDtBQUVBLFVBQU0sY0FBYztBQUFBLE1BQ25CLElBQUk7QUFBQSxNQUNKLElBQUk7QUFBQSxNQUNKLElBQUk7QUFBQSxNQUNKLElBQUk7QUFBQSxNQUNKLElBQUk7QUFBQSxNQUNKLElBQUk7QUFBQSxNQUNKLElBQUk7QUFBQSxNQUNKLElBQUk7QUFBQSxNQUNKLElBQUk7QUFBQSxNQUNKLElBQUk7QUFBQSxNQUNKLElBQUk7QUFBQSxNQUNKLElBQUk7QUFBQSxNQUNKLElBQUk7QUFBQSxNQUNKLElBQUk7QUFBQSxNQUNKLElBQUk7QUFBQSxNQUNKLElBQUk7QUFBQSxNQUNKLElBQUk7QUFBQSxNQUNKLElBQUk7QUFBQSxNQUNKLElBQUk7QUFBQSxNQUNKLElBQUk7QUFBQSxNQUNKLElBQUk7QUFBQSxNQUNKLElBQUk7QUFBQSxNQUNKLElBQUk7QUFBQSxNQUNKLElBQUk7QUFBQSxNQUNKLElBQUk7QUFBQSxNQUNKLElBQUk7QUFBQSxNQUNKLElBQUk7QUFBQSxNQUNKLElBQUk7QUFBQSxNQUNKLElBQUk7QUFBQSxNQUNKLElBQUk7QUFBQSxNQUNKLElBQUk7QUFBQSxNQUNKLElBQUk7QUFBQSxNQUNKLElBQUk7QUFBQSxNQUNKLElBQUk7QUFBQSxNQUNKLElBQUk7QUFBQSxNQUNKLElBQUk7QUFBQSxNQUNKLElBQUk7QUFBQSxNQUNKLElBQUk7QUFBQSxNQUNKLElBQUk7QUFBQSxNQUNKLElBQUk7QUFBQSxNQUNKLElBQUk7QUFBQSxNQUNKLElBQUk7QUFBQSxNQUNKLElBQUk7QUFBQSxNQUNKLElBQUk7QUFBQSxNQUNKLElBQUk7QUFBQSxNQUNKLElBQUk7QUFBQSxNQUNKLElBQUk7QUFBQSxNQUNKLElBQUk7QUFBQSxNQUNKLElBQUk7QUFBQSxNQUNKLElBQUk7QUFBQSxNQUNKLElBQUk7QUFBQSxNQUNKLElBQUk7QUFBQSxNQUNKLElBQUk7QUFBQSxNQUNKLElBQUk7QUFBQSxNQUNKLElBQUk7QUFBQSxNQUNK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SSxJQUFJO0FBQUEsTUFDaEI7QUFBQSxNQUVBLEtBQUssdUJBQXVCO0FBQzNCLGdDQUF3QixDQUFDLFNBQVMsQ0FBQyxJQUFJO0FBQ3ZDLHVDQUErQixLQUFLO0FBQ3BDLDJCQUFtQixRQUFRO0FBRTNCLGVBQU8sSUFBSSxJQUFJO0FBQUEsTUFDaEI7QUFBQSxNQUVBLEtBQUssdUJBQXVCO0FBQzNCLFlBQUkscUJBQXFCLElBQUk7QUFDNUIsaUJBQU8sSUFBSSxnQ0FBZ0M7QUFFNUMsMkJBQW1CLEtBQUs7QUFDeEIsdUNBQStCLEtBQUs7QUFFcEMsZUFBTyxJQUFJLElBQUk7QUFBQSxNQUNoQjtBQUFBLE1BRUEsS0FBSyw4QkFBOEI7QUFDbEMsWUFBSSxxQkFBcUIsSUFBSTtBQUM1QixpQkFBTyxJQUFJLGdDQUFnQztBQUU1QywyQkFBbUIsWUFBWTtBQUMvQix1Q0FBK0IsS0FBSztBQUVwQyxlQUFPLElBQUksSUFBSTtBQUFBLE1BQ2hCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsTUFjQSxTQUFTO0FBQ1IsZUFBTyxJQUFJLGlCQUFpQjtBQUFBLE1BQzdCO0FBQUEsSUFDRDtBQUFBLEVBQ0Q7QUFDRCxDQUFDOyIsCiAgIm5hbWVzIjogWyJHT2JqZWN0IiwgInNldCIsICJHT2JqZWN0IiwgImtleSIsICJvYmplY3QiLCAiR09iamVjdCIsICJtb2QiLCAiR09iamVjdCIsICJyZW1vdmUiLCAiR3RrIiwgIkFzdGFsIiwgIkd0ayIsICJHaW8iLCAiR09iamVjdCIsICJHdGsiLCAiR2lvIiwgImNzcyIsICJHT2JqZWN0IiwgImluZGV4IiwgIkd0ayIsICJBc3RhbCIsICJHTGliIiwgIkFzdGFsIiwgIkFzdGFsIiwgIkdMaWIiLCAiR2lvIiwgIkdpbyIsICJjb25maWciLCAiZm9jdXNlZEFwcCIsICJpbmRleCIsICJub3RpZmQiLCAiZG9udERpc3R1cmIiLCAidm9sdW1lIiwgImRldmljZSIsICJpY29uTmFtZSIsICJ3cCIsICJtaWNyb3Bob25lIiwgIkdMaWIiLCAidGltZSIsICJzaG93QWx0IiwgInBlcmNlbnRhZ2UiLCAiaXNDaGFyZ2luZyIsICJ0aW1lVG9FbXB0eSIsICJ0aW1lVG9GdWxsIiwgImVuZXJneVJhdGUiLCAiV3AiLCAiV3AiLCAidm9sdW1lIiwgImRldmljZSIsICJpY29uTmFtZSIsICJpc011dGVkIiwgIkFzdGFsSU8iLCAiQXN0YWxJTyIsICJpbnRlcnZhbCIsICJ0aW1lb3V0IiwgInNldCIsICJOZXR3b3JrIiwgImNsYXNzTmFtZSIsICJtYXJxdWVlRGF0YSIsICJ1cmwiLCAiR2lvIiwgIkdMaWIiLCAiR2lvIiwgInVybCIsICJfaW5pdCIsICJTb3VwIiwgInVybCIsICJ0aW1lIiwgImNvdmVyQXJ0IiwgImF2YWlsYWJsZSIsICJ0cmFjayIsICJhcnRpc3QiLCAiYWxidW0iLCAidm9sdW1lIiwgInNvbmciLCAicG9zaXRpb24iLCAiR2lvIiwgIlRpbWUiLCAidGltZURhdGEiLCAiY2xhc3NOYW1lIiwgInNob3dBbHQiLCAiY2xhc3NOYW1lIiwgIkdMaWIiLCAiR3RrIiwgIkFzdGFsIiwgInNuYWtlaWZ5IiwgIm1vZCIsICJwYXRjaCIsICJBcHBzIiwgIk1wcmlzIiwgIk5vdGlmZCIsICJOb3RpZmljYXRpb24iLCAiV3AiLCAiVHJheSIsICJHT2JqZWN0IiwgIkFwcCIsICJHdGsiLCAiR0xpYiIsICJBZHciLCAiQXN0YWwiLCAiVGltZSIsICJOZXR3b3JrIiwgIkdMaWIiLCAidGltZW91dCIsICJzbGVlcCIsICJ0aW1lIiwgInNsZWVwIiwgIk5vdGlmZCIsICJ1cmdlbmN5IiwgIkd0ayIsICJBZHciLCAic2xlZXAiLCAiR3RrIiwgIkFkdyIsICJOb3RpZmQiLCAibm90aWZkIiwgIk5vdGlmZCIsICJ0aW1lIiwgInNsZWVwIiwgIm5vdGlmIiwgIk5vdGlmZCIsICJub3RpZmQiLCAiTm90aWZkIiwgIm5vdGlmaWNhdGlvbnMiLCAiaGlkZGVuIiwgImRvTm90RGlzdHVyYiIsICJQYW5nbyIsICJBZHciLCAic2xlZXAiLCAiQWR3IiwgIlBhbmdvIiwgIkdPYmplY3QiLCAiR0xpYiIsICJHT2JqZWN0IiwgIkdPYmplY3QiLCAiR09iamVjdCIsICJHTGliIiwgIk5vdGlmZCIsICJHTGliIiwgImdpQ2Fpcm8iLCAiV3AiLCAiR0xpYiIsICJXcCIsICJHTGliIiwgImlzVmlzaWJsZSIsICJoaWRkZW4iLCAiZ2lDYWlybyIsICJzbGVlcCIsICJfYSIsICJHT2JqZWN0IiwgIk5vdGlmZCIsICJpc05vdGlmaWNhdGlvbkNlbnRlclZpc2libGUiLCAiaXNTZXNzaW9uTWVudVZpc2libGUiLCAiR0xpYiJdCn0K

EOF

LD_PRELOAD="/nix/store/3vqpksgv7c8rfjcaqvw1iylnr2mnbgwq-gtk4-layer-shell-1.1.1/lib/libgtk4-layer-shell.so" /nix/store/wqzr7x421pfbdq9df1fvsjy1fsszxkdy-gjs-1.84.2/bin/gjs -m $file $@